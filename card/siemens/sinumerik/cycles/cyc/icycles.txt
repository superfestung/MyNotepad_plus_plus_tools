;----------------------------------------------------------
;
;@(#)$program_version_id:V06.24.00.00 15/07/24 15:00:00, ISO Cycles,
;
;----------------------------------------------------------
;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE301_SPF
PROC CYCLE301 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 04.04.06.00 ;DATE: 2010-12-15
;ISO user data conversion in case of basic system change (metr./inch)
DEF INT _GSYS
DEF REAL _FAK2=1
IF($MCS_ISO_SCALING_SYSTEM==0)
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
$MCS_ISO_SCALING_SYSTEM=1
ELSE
$MCS_ISO_SCALING_SYSTEM=2
ENDIF
M17
ENDIF
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
_GSYS=1
ELSE
_GSYS=2
ENDIF
IF($MCS_ISO_SCALING_SYSTEM <>_GSYS)
IF(_GSYS==2)
_FAK2=1/$MN_SCALING_VALUE_INCH
ELSE
_FAK2=$MN_SCALING_VALUE_INCH
ENDIF
_ZSFR[00]=_ZSFR[00]*_FAK2 _ZSFR[01]=_ZSFR[01]*_FAK2 _ZSFR[03]=_ZSFR[03]*_FAK2 _ZSFR[04]=_ZSFR[04]*_FAK2 _ZSFR[05]=_ZSFR[05]*_FAK2 _ZSFR[06]=_ZSFR[06]*_FAK2 _ZSFR[07]=_ZSFR[07]*_FAK2 _ZSFR[08]=_ZSFR[08]*_FAK2 _ZSFR[20]=_ZSFR[20]*_FAK2 _ZSFR[21]=_ZSFR[21]*_FAK2 $MCS_ISO_SCALING_SYSTEM=_GSYS
STOPRE
ENDIF
M17

;$ACCESS=71771
;$PATH=/_N_CST_DIR/_N_CYCLE305_SPF
PROC CYCLE305 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 02.06.02.00 Nov 04, 2008
;ISO high precision contour control (G05)
;
;
; to do:
; Add your machine specific code here.
;
;
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE322_SPF
PROC CYCLE322 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO working area limitation set (G22)
DEF AXIS _XX,_YY,_ZZ
DEF INT _I,_GAX,_PLAN,_FCX_P,_FCY_P,_FCZ_P,_FCI_P,_FCJ_P,_FCK_P,_KPA,_SNUM=2,_SOUT,_SDUM,_AX3B,_PANR,_MVG90G91
DEF REAL _FCX,_FCY,_FCZ,_FCI,_FCJ,_FCK,_LPX,_LPY,_LPZ,_LPI,_LPJ,_LPK,_AX1O,_AX1U,_AX2O,_AX2U,_AX3O,_AX3U,_FAK1,_FAK2,_AXWA,_AXWO,_AXWP,_PA1
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE322_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE322_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
_TEMP_LINE=_TEMP_LINE<<"G22 "
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_I_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"I"<<$C_I[0]<<" "
ENDIF
IF $C_J_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"J"<<$C_J[0]<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_MVG90G91=$P_GG[14]
G90
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
_FAK2=1
IF($MCS_ISO_SCALING_SYSTEM==1)
IF($P_GG[13]==1) OR ($P_GG[13]==3)
_FAK2=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2) OR ($P_GG[13]==4)
_FAK2=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
_PA1=0
FOR _PANR = 3 TO 8
_PA1=_PA1+(_ZSFR[_PANR]*_FAK2)
ENDFOR
IF(_PA1==0)
FOR _PANR = 3 TO 8
IF(_PANR<6)
_ZSFR[_PANR]=-9998*_FAK2
ELSE
_ZSFR[_PANR]=-9999*_FAK2
ENDIF
ENDFOR
ENDIF
IF($C_X_PROG>0)OR($C_I_PROG>0)
IF($C_X_PROG>0)AND($C_I_PROG>0)
IF($C_X==$C_I[0]) GOTOF _FEHL4
ENDIF
IF($C_X_PROG>0)AND($C_I_PROG==0)
IF($C_X==_ZSFR[06]) GOTOF _FEHL4
ENDIF
IF($C_X_PROG==0)AND($C_I_PROG>0)
IF($C_X==_ZSFR[03]) GOTOF _FEHL4
ENDIF
ENDIF
IF($C_Y_PROG>0)OR($C_J_PROG>0)
IF($C_Y_PROG>0)AND($C_J_PROG>0)
IF($C_Y==$C_J[0]) GOTOF _FEHL4
ENDIF
IF($C_Y_PROG>0)AND($C_J_PROG==0)
IF($C_Y==_ZSFR[07]) GOTOF _FEHL4
ENDIF
IF($C_Y_PROG==0)AND($C_J_PROG>0)
IF($C_Y==_ZSFR[04]) GOTOF _FEHL4
ENDIF
ENDIF
IF($C_Z_PROG>0)OR($C_K_PROG>0)
IF($C_Z_PROG>0)AND($C_K_PROG>0)
IF($C_Z==$C_K[0]) GOTOF _FEHL4
ENDIF
IF($C_Z_PROG>0)AND($C_K_PROG==0)
IF($C_Z==_ZSFR[08]) GOTOF _FEHL4
ENDIF
IF($C_Z_PROG==0)AND($C_K_PROG>0)
IF($C_Z==_ZSFR[05]) GOTOF _FEHL4
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
;aktive Ebene auslesen
_PLAN=$P_GG[6]
_GAX=0
FOR _I=0 TO 2
IF ($MC_AXCONF_GEOAX_ASSIGN_TAB[_I]>0)
_GAX=_GAX+1
ENDIF
ENDFOR
IF (_GAX>2)
_XX=$P_AXN1 _YY=$P_AXN2 _ZZ=$P_AXN3
ELSE
_XX=$P_AXN1 _YY=$P_AXN2
ENDIF
NPROT(_SNUM,0)
_SOUT=$MC_STROKE_CHECK_INSIDE
IF ($C_X_PROG>0)
_ZSFR[3]=$C_X
ENDIF
IF ($C_Y_PROG>0)
_ZSFR[4]=$C_Y
ENDIF
IF ($C_Z_PROG>0)
_ZSFR[5]=$C_Z
ENDIF
IF ($C_I_PROG>0)
_ZSFR[6]=$C_I[0]
ENDIF
IF ($C_J_PROG>0)
_ZSFR[7]=$C_J[0]
ENDIF
IF ($C_K_PROG>0)
_ZSFR[8]=$C_K[0]
ENDIF
CYCLE218(1)
IF (_ZSFR[3]<_ZSFR[6])
_LPX=_ZSFR[6] _LPI=_ZSFR[3]
ELSE
_LPX=_ZSFR[3] _LPI=_ZSFR[6]
ENDIF
IF (_ZSFR[4]<_ZSFR[7])
_LPY=_ZSFR[7] _LPJ=_ZSFR[4]
ELSE
_LPY=_ZSFR[4] _LPJ=_ZSFR[7]
ENDIF
IF (_ZSFR[5]<_ZSFR[8])
_LPZ=_ZSFR[8] _LPK=_ZSFR[5]
ELSE
_LPZ=_ZSFR[5] _LPK=_ZSFR[8]
ENDIF
CASE _PLAN OF 3 GOTOF _G19 2 GOTOF _G18 DEFAULT GOTOF _G17
_G19:
_AX1O=_LPY _AX1U=_LPJ _AX2O=_LPZ _AX2U=_LPK _AX3O=_LPX _AX3U=_LPI
GOTOF _GEND
_G18:
_AX1O=_LPZ _AX1U=_LPK _AX2O=_LPX _AX2U=_LPI _AX3O=_LPY _AX3U=_LPJ
GOTOF _GEND
_G17:
_AX1O=_LPX _AX1U=_LPI _AX2O=_LPY _AX2U=_LPJ _AX3O=_LPZ _AX3U=_LPK
_GEND:
IF (($MN_MM_EXTERN_CNC_SYSTEM == 2) OR ($MN_MM_EXTERN_CNC_SYSTEM == 5))
_AX3B=0
_AX3O=0
_AX3U=0
ELSE
_AX3B=3
ENDIF
IF (_SOUT==0)
NPROTDEF(_SNUM,FALSE,_AX3B,_AX3O,_AX3U)
G01 AX[_XX]=_AX1U AX[_YY]=_AX2U
AX[_XX]=_AX1O
AX[_YY]=_AX2O
AX[_XX]=_AX1U
AX[_YY]=_AX2U
EXECUTE(_SDUM)
ELSE
NPROTDEF(_SNUM,FALSE,_AX3B,_AX3O,_AX3U)
G01 AX[_XX]=_AX1U AX[_YY]=_AX2U
AX[_YY]=_AX2O
AX[_XX]=_AX1O
AX[_YY]=_AX2U
AX[_XX]=_AX1U
EXECUTE(_SDUM)
ENDIF
NPROT(_SNUM,2)
IF(_SOUT==0)
_AXWA=$AA_IW[_XX]
_AXWO=$AA_IW[_YY]
_AXWP=$AA_IW[_ZZ]
IF(_AXWA<_AX1O) AND (_AXWA>_AX1U) AND (_AXWO<_AX2O) AND (_AXWO>_AX2U) AND (_AXWP<_AX3O) AND (_AXWP>_AX3U) GOTOF _FEHL3
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
IF(_MVG90G91==2)
G91
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N332201 SETAL(61800)
RET
_FEHL3: STOPRE
NPROT(_SNUM,0)
STOPRE
N332203 SETAL(61817)
RET
_FEHL4: STOPRE
N332204 SETAL(61818)
RET
_RET: M17

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE323_SPF
PROC CYCLE323 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO working area limitation cancel (G23)
DEF INT _SNUM=2
CYCLE218(1)
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
NPROT(_SNUM,0)
GOTOF _RET
_FEHL1: STOPRE
N332301 SETAL(61800)
RET
_RET: M17

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE328_SPF
PROC CYCLE328 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO first reference point return (G28/G27/G30.1)
DEF INT _AXNAM,_AXE=0,_I=0,_AXP=0,_CNC,_ABC,_AXPRG[10],_DNUM,_GC,_AXNUM,_AXISGEO[10],_AXISSPIND[10],_HDSEP,_G91
DEF REAL _AXWERT[4,10],_POSDIF,_FAK1
DEF STRING[200] _TRAVSTR1,_TRAVSTR2
DEF STRING[32] _NAMEACHSE
DEF BOOL _AXFOUND=0,_WZ_ROL_K
DEF CHAR _AXNAMEN[10]
DEF AXIS _GEOAXNAME
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE328_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE328_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
_HDSEP=0
IF $MN_MM_EXTERN_CNC_SYSTEM==4
WRITE(_TEMP,_TEMP_FILE,";ISO 2.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[1]="<<$P_ISO2_HNO[1]<<"   ; active H number X-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[2]="<<$P_ISO2_HNO[2]<<"   ; active H number Y-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[3]="<<$P_ISO2_HNO[3]<<"   ; active H number Z-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_DNO="<<$P_ISO2_DNO<<"   ; active D number")
_HDSEP=4
ENDIF
IF $MN_MM_EXTERN_CNC_SYSTEM==5
WRITE(_TEMP,_TEMP_FILE,";ISO 3.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO3_DNO="<<$P_ISO3_DNO<<"   ; active D number")
_HDSEP=5
ENDIF
IF ( (_HDSEP==0)AND($P_TOOLNO>0)AND($P_TOOL>0) )
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
ENDIF
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
IF $C_G_PROG<>0
IF ($C_G==27) OR ($C_G==28)
IF ($C_G==27)
_TEMP_LINE=_TEMP_LINE<<"G27 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G28 "
ENDIF
ELSE
_TEMP_LINE=_TEMP_LINE<<"G30.1 "
ENDIF
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
_CNC=$MN_MM_EXTERN_CNC_SYSTEM
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
IF ((_CNC==2)OR(_CNC==5))
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL8
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
ELSE
_ABC=2
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF ($P_EXTGG[8]==3) AND ($P_EXTGG[7]==1)
_WZ_ROL_K=0
ELSE
_WZ_ROL_K=1
ENDIF
IF ($C_G==27) OR ($C_G==28)
IF ($C_G==27)
_GC=27
ELSE
_GC=28
ENDIF
ELSE
_GC=30
ENDIF
IF _ABC==1
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL2
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL2
IF($C_Y_PROG>0)AND($C_V_PROG>0)GOTOF _FEHL2
IF($C_C_PROG>0)AND($C_H_PROG>0)GOTOF _FEHL2
ENDIF
_AXPRG[0]=REP(0)
_AXWERT[0,0]=REP(0)
_AXNAMEN[0]=REP("")
_AXISGEO[0]=REP(0)
IF ($C_X_PROG>0)
_AXNAMEN[_AXP]="X"
_AXISGEO[_AXP]=1
_AXPRG[_AXP]=$C_X_PROG
_AXWERT[0,_AXP]=$C_X
_AXP=_AXP+1
ENDIF
IF ($C_Y_PROG>0)
_AXNAMEN[_AXP]="Y"
_AXISGEO[_AXP]=2
_AXPRG[_AXP]=$C_Y_PROG
_AXWERT[0,_AXP]=$C_Y
_AXP=_AXP+1
ENDIF
IF ($C_Z_PROG>0)
_AXNAMEN[_AXP]="Z"
_AXISGEO[_AXP]=3
_AXPRG[_AXP]=$C_Z_PROG
_AXWERT[0,_AXP]=$C_Z
_AXP=_AXP+1
ENDIF
IF ($C_U_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="X"
_AXISGEO[_AXP]=1
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="U"
_AXPRG[_AXP]=$C_U_PROG
ENDIF
_AXWERT[0,_AXP]=$C_U
_AXP=_AXP+1
ENDIF
IF ($C_V_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="Y"
_AXISGEO[_AXP]=2
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="V"
_AXPRG[_AXP]=$C_V_PROG
ENDIF
_AXWERT[0,_AXP]=$C_V
_AXP=_AXP+1
ENDIF
IF ($C_W_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="Z"
_AXISGEO[_AXP]=3
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="W"
_AXPRG[_AXP]=$C_W_PROG
ENDIF
_AXWERT[0,_AXP]=$C_W
_AXP=_AXP+1
ENDIF
IF ($C_A_PROG>0)
_AXNAMEN[_AXP]="A"
_AXPRG[_AXP]=$C_A_PROG
_AXWERT[0,_AXP]=$C_A
_AXP=_AXP+1
ENDIF
IF ($C_B_PROG>0)
_AXNAMEN[_AXP]="B"
_AXPRG[_AXP]= $C_B_PROG
_AXWERT[0,_AXP]=$C_B
_AXP=_AXP+1
ENDIF
IF ($C_C_PROG>0)
_AXNAMEN[_AXP]="C"
_AXPRG[_AXP]= $C_C_PROG
_AXWERT[0,_AXP]=$C_C
_AXP=_AXP+1
ENDIF
IF ($C_H_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="C"
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="H"
_AXPRG[_AXP]= $C_H_PROG
ENDIF
_AXWERT[0,_AXP]=$C_H
_AXP=_AXP+1
ENDIF
IF _AXP<1 GOTOF _RET
CYCLE218(1)
_TRAVSTR1="" _TRAVSTR2="SUPA"
FOR _AXNAM=0 TO (_AXP-1)
IF _AXISGEO[_AXNAM]>0
IF _AXISGEO[_AXNAM]==1
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[0]>0
_GEOAXNAME=$P_ACTGEOAX[1]
ENDIF
ENDIF
IF _AXISGEO[_AXNAM]==2
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[1]>0
_GEOAXNAME=$P_ACTGEOAX[2]
ENDIF
ENDIF
IF _AXISGEO[_AXNAM]==3
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[2]>0
_GEOAXNAME=$P_ACTGEOAX[3]
ENDIF
ENDIF
_NAMEACHSE=AXSTRING(_GEOAXNAME)
ELSE
_NAMEACHSE=_AXNAMEN[_AXNAM]
ENDIF
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEACHSE)
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
_AXISSPIND[_AXE]=$MA_SPIND_ASSIGN_TO_MACHAX[AXNAME(_NAMEACHSE)]
IF(_GC==30)
_AXWERT[1,_AXNAM]=$SA_EXTERN_REF_POSITION_G30_1[AXNAME(_NAMEACHSE)]
ELSE
_AXWERT[1,_AXNAM]=$MA_REFP_SET_POS[0,AXNAME(_NAMEACHSE)]
ENDIF
ELSE
GOTOF _FEHL4
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL4
_AXFOUND=0
_AXE=0
IF(_AXPRG[_AXNAM]==1)
_AXWERT[3,_AXNAM]=_AXWERT[0,_AXNAM]
ELSE
_AXWERT[3,_AXNAM]=$P_EP[AXNAME(_NAMEACHSE)]*_FAK1+_AXWERT[0,_AXNAM]
ENDIF
_TRAVSTR1 = _TRAVSTR1 << " " << _AXNAMEN[_AXNAM] << "=" << _AXWERT[3,_AXNAM]
_TRAVSTR2 = _TRAVSTR2 << " " << _AXNAMEN[_AXNAM] << "=" << _AXWERT[1,_AXNAM]
ENDFOR
IF ($C_G<>0)
TRAFOOF
ENDIF
IF (_GC==27)
G90 G60 G0
IF ($AN_NCK_VERSION<750000)
_AXE=0
WHILE (_AXE<_AXNUM)
IF (_AXISSPIND[_AXE]>0)
SPOS[_AXISSPIND[_AXE]]=IC(0)
ENDIF
_AXE=_AXE+1
ENDWHILE
ENDIF
SBLON
EXECSTRING(_TRAVSTR1)
SBLOF
STOPRE
FOR _I=0 TO (_AXP-1)
IF _AXISGEO[_I]>0
IF _AXISGEO[_I]==1
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[0]>0
_GEOAXNAME=$P_ACTGEOAX[1]
ENDIF
ENDIF
IF _AXISGEO[_I]==2
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[1]>0
_GEOAXNAME=$P_ACTGEOAX[2]
ENDIF
ENDIF
IF _AXISGEO[_I]==3
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[2]>0
_GEOAXNAME=$P_ACTGEOAX[3]
ENDIF
ENDIF
_NAMEACHSE=AXSTRING(_GEOAXNAME)
ELSE
_NAMEACHSE=_AXNAMEN[_I]
ENDIF
_POSDIF=ABS($AA_IM[AXNAME(_NAMEACHSE)]-_AXWERT[1,_I])
IF (_POSDIF>$MA_STOP_LIMIT_FINE[AXNAME(_NAMEACHSE)]) GOTOF _FEHL9
ENDFOR
ELSE
_HDSEP=0
IF _CNC==4
IF (($P_ISO2_DNO>=0)AND($P_ISO2_DNO<99))
$C_MACPAR[0]=$P_ISO2_DNO _HDSEP=4
ENDIF
FOR _I=1 TO 3
IF (($P_ISO2_HNO[_I]>=0)AND($P_ISO2_HNO[_I]<99))
$C_MACPAR[_I]=$P_ISO2_HNO[_I] _HDSEP=4
ENDIF
ENDFOR
ENDIF
IF _CNC==5
IF (($P_ISO3_DNO>=0)AND($P_ISO3_DNO<99))
$C_MACPAR[0]=$P_ISO3_DNO _HDSEP=5
ENDIF
ENDIF
IF _HDSEP==0
_DNUM=$P_TOOL
ENDIF
IF ($AN_NCK_VERSION<750000)
_AXE=0
WHILE (_AXE<_AXNUM)
IF (_AXISSPIND[_AXE]>0)
SPOS[_AXE+1]=IC(0)
ENDIF
_AXE=_AXE+1
ENDWHILE
ENDIF
G90 G00
_TRAVSTR1="G40"<<_TRAVSTR1
SBLON
EXECSTRING(_TRAVSTR1)
SBLOF
IF _HDSEP==4
G291
H0
D0
G290
ENDIF
IF _HDSEP==5
G291
D0
G290
ENDIF
IF _HDSEP==0
D0
ENDIF
DIAMOF
EXECSTRING(_TRAVSTR2)
IF ( (_HDSEP==4)OR(_HDSEP==5) )
G291
D$0
G290
ENDIF
IF (_HDSEP==0)
D=_DNUM
ENDIF
IF (_WZ_ROL_K==1)
IF _HDSEP==4
IF $MC_TOOL_CORR_MODE_G43G44==2
IF (($P_EXTGG[8]==1)OR($P_EXTGG[8]==2))
IF $P_EXTGG[8]==1
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
G91
IF $C_MACPAR[1]>0
G291
G43 X0 H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
G43 Y0 H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
G43 Z0 H$3
G290
ENDIF
ENDIF
IF $P_EXTGG[8]==2
IF $C_MACPAR[1]>0
G291
G44 X0 H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
G44 Y0 H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
G44 Z0 H$3
G290
ENDIF
ENDIF
IF(_G91==0)
G90
ENDIF
ENDIF
ELSE
IF $C_MACPAR[1]>0
G291
H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
H$3
G290
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N332801 SETAL(61800)
RET
_FEHL2: STOPRE
N332802 SETAL(61805)
RET
_FEHL4: STOPRE
N332804 SETAL(61803)
RET
_FEHL6: STOPRE
N332806 SETAL(61802)
RET
_FEHL8: STOPRE
N332808 SETAL(61801)
RET
_FEHL9: STOPRE
N332809 SETAL(61816)
RET
_RET: M17

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE330_SPF
PROC CYCLE330 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO 2.3.4. reference point return (G30)
DEF INT _AXNAM,_AXE=0,_AXP=0,_CNC,_ABC,_RP,_AXPRG[10],_DNUM,_AXNUM,_AXISGEO[10],_AXISSPIND[10],_HDSEP,_G91
DEF REAL _AXWERT[4,10],_FAK1
DEF STRING[200] _TRAVSTR1,_TRAVSTR2
DEF STRING[32] _NAMEACHSE
DEF BOOL _AXFOUND=0,_WZ_ROL_K
DEF CHAR _AXNAMEN[10]
DEF AXIS _GEOAXNAME
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE330_MPF"
DEF STRING[200] _TEMP_LINE=""
;
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE330_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
_HDSEP=0
IF $MN_MM_EXTERN_CNC_SYSTEM==4
WRITE(_TEMP,_TEMP_FILE,";ISO 2.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[1]="<<$P_ISO2_HNO[1]<<"   ; active H number X-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[2]="<<$P_ISO2_HNO[2]<<"   ; active H number Y-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[3]="<<$P_ISO2_HNO[3]<<"   ; active H number Z-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_DNO="<<$P_ISO2_DNO<<"   ; active D number")
_HDSEP=4
ENDIF
IF $MN_MM_EXTERN_CNC_SYSTEM==5
WRITE(_TEMP,_TEMP_FILE,";ISO 3.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO3_DNO="<<$P_ISO3_DNO<<"   ; active D number")
_HDSEP=5
ENDIF
IF ( (_HDSEP==0)AND($P_TOOLNO>0)AND($P_TOOL>0) )
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
ENDIF
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
IF $C_G_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
_CNC=$MN_MM_EXTERN_CNC_SYSTEM
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
IF ((_CNC==2)OR(_CNC==5))
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL8
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
ELSE
_ABC=2
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF ($P_EXTGG[8]==3) AND ($P_EXTGG[7]==1)
_WZ_ROL_K=0
ELSE
_WZ_ROL_K=1
ENDIF
IF _ABC==1
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL2
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL2
IF($C_Y_PROG>0)AND($C_V_PROG>0)GOTOF _FEHL2
IF($C_C_PROG>0)AND($C_H_PROG>0)GOTOF _FEHL2
ENDIF
_RP=1
IF($C_P_PROG>0)AND($C_P<=4)
_RP=$C_P-1
ENDIF
_AXPRG[0]=REP(0)
_AXWERT[0,0]=REP(0)
_AXNAMEN[0]=REP("")
_AXISGEO[0]=REP(0)
IF ($C_X_PROG>0)
_AXNAMEN[_AXP]="X"
_AXISGEO[_AXP]=1
_AXPRG[_AXP]=$C_X_PROG
_AXWERT[0,_AXP]=$C_X
_AXP=_AXP+1
ENDIF
IF ($C_Y_PROG>0)
_AXNAMEN[_AXP]="Y"
_AXISGEO[_AXP]=2
_AXPRG[_AXP]=$C_Y_PROG
_AXWERT[0,_AXP]=$C_Y
_AXP=_AXP+1
ENDIF
IF ($C_Z_PROG>0)
_AXNAMEN[_AXP]="Z"
_AXISGEO[_AXP]=3
_AXPRG[_AXP]=$C_Z_PROG
_AXWERT[0,_AXP]=$C_Z
_AXP=_AXP+1
ENDIF
IF ($C_U_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="X"
_AXISGEO[_AXP]=1
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="U"
_AXPRG[_AXP]=$C_U_PROG
ENDIF
_AXWERT[0,_AXP]=$C_U
_AXP=_AXP+1
ENDIF
IF ($C_V_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="Y"
_AXISGEO[_AXP]=2
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="V"
_AXPRG[_AXP]=$C_V_PROG
ENDIF
_AXWERT[0,_AXP]=$C_V
_AXP=_AXP+1
ENDIF
IF ($C_W_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="Z"
_AXISGEO[_AXP]=3
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="W"
_AXPRG[_AXP]=$C_W_PROG
ENDIF
_AXWERT[0,_AXP]=$C_W
_AXP=_AXP+1
ENDIF
IF ($C_A_PROG>0)
_AXNAMEN[_AXP]="A"
_AXPRG[_AXP]=$C_A_PROG
_AXWERT[0,_AXP]=$C_A
_AXP=_AXP+1
ENDIF
IF ($C_B_PROG>0)
_AXNAMEN[_AXP]="B"
_AXPRG[_AXP]= $C_B_PROG
_AXWERT[0,_AXP]=$C_B
_AXP=_AXP+1
ENDIF
IF ($C_C_PROG>0)
_AXNAMEN[_AXP]="C"
_AXPRG[_AXP]= $C_C_PROG
_AXWERT[0,_AXP]=$C_C
_AXP=_AXP+1
ENDIF
IF ($C_H_PROG>0)
IF (_ABC==1)
_AXNAMEN[_AXP]="C"
_AXPRG[_AXP]=3
ELSE
_AXNAMEN[_AXP]="H"
_AXPRG[_AXP]= $C_H_PROG
ENDIF
_AXWERT[0,_AXP]=$C_H
_AXP=_AXP+1
ENDIF
IF _AXP<1 GOTOF _RET
CYCLE218(1)
_TRAVSTR1="G40" _TRAVSTR2="SUPA"
FOR _AXNAM=0 TO (_AXP-1)
IF _AXISGEO[_AXNAM]>0
IF _AXISGEO[_AXNAM]==1
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[0]>0
_GEOAXNAME=$P_ACTGEOAX[1]
ENDIF
ENDIF
IF _AXISGEO[_AXNAM]==2
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[1]>0
_GEOAXNAME=$P_ACTGEOAX[2]
ENDIF
ENDIF
IF _AXISGEO[_AXNAM]==3
IF $MC_AXCONF_GEOAX_ASSIGN_TAB[2]>0
_GEOAXNAME=$P_ACTGEOAX[3]
ENDIF
ENDIF
_NAMEACHSE=AXSTRING(_GEOAXNAME)
ELSE
_NAMEACHSE=_AXNAMEN[_AXNAM]
ENDIF
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEACHSE)
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
_AXISSPIND[_AXE]=$MA_SPIND_ASSIGN_TO_MACHAX[AXNAME(_NAMEACHSE)]
_AXWERT[1,_AXNAM]=$MA_REFP_SET_POS[_RP,AXNAME(_NAMEACHSE)]
ELSE
GOTOF _FEHL4
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL4
_AXFOUND=0
_AXE=0
IF(_AXPRG[_AXNAM]==1)
_AXWERT[3,_AXNAM]=_AXWERT[0,_AXNAM]
ELSE
_AXWERT[3,_AXNAM]=$P_EP[AXNAME(_NAMEACHSE)]*_FAK1+_AXWERT[0,_AXNAM]
ENDIF
_TRAVSTR1 = _TRAVSTR1 << " " << _AXNAMEN[_AXNAM] << "=" << _AXWERT[3,_AXNAM]
_TRAVSTR2 = _TRAVSTR2 << " " << _AXNAMEN[_AXNAM] << "=" << _AXWERT[1,_AXNAM]
ENDFOR
TRAFOOF
_HDSEP=0
IF _CNC==4
IF (($P_ISO2_DNO>=0)AND($P_ISO2_DNO<99))
$C_MACPAR[0]=$P_ISO2_DNO _HDSEP=4
ENDIF
FOR _I=1 TO 3
IF (($P_ISO2_HNO[_I]>=0)AND($P_ISO2_HNO[_I]<99))
$C_MACPAR[_I]=$P_ISO2_HNO[_I] _HDSEP=4
ENDIF
ENDFOR
ENDIF
IF _CNC==5
IF (($P_ISO3_DNO>=0)AND($P_ISO3_DNO<99))
$C_MACPAR[0]=$P_ISO3_DNO _HDSEP=5
ENDIF
ENDIF
IF _HDSEP==0
_DNUM=$P_TOOL
ENDIF
IF ($AN_NCK_VERSION<750000)
_AXE=0
WHILE (_AXE<_AXNUM)
IF (_AXISSPIND[_AXE]>0)
SPOS[_AXE+1]=IC(0)
ENDIF
_AXE=_AXE+1
ENDWHILE
ENDIF
G90 G00
SBLON
EXECSTRING(_TRAVSTR1)
SBLOF
IF _HDSEP==4
G291
H0
D0
G290
ENDIF
IF _HDSEP==5
G291
D0
G290
ENDIF
IF _HDSEP==0
D0
ENDIF
DIAMOF
EXECSTRING(_TRAVSTR2)
IF ( (_HDSEP==4)OR(_HDSEP==5) )
G291
D$0
G290
ENDIF
IF (_HDSEP==0)
D=_DNUM
ENDIF
IF (_WZ_ROL_K==1)
IF _HDSEP==4
IF $MC_TOOL_CORR_MODE_G43G44==2
IF (($P_EXTGG[8]==1)OR($P_EXTGG[8]==2))
IF $P_EXTGG[8]==1
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
G91
IF $C_MACPAR[1]>0
G291
G43 X0 H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
G43 Y0 H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
G43 Z0 H$3
G290
ENDIF
ENDIF
IF $P_EXTGG[8]==2
IF $C_MACPAR[1]>0
G291
G44 X0 H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
G44 Y0 H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
G44 Z0 H$3
G290
ENDIF
ENDIF
IF(_G91==0)
G90
ENDIF
ENDIF
ELSE
IF $C_MACPAR[1]>0
G291
H$1
G290
ENDIF
IF $C_MACPAR[2]>0
G291
H$2
G290
ENDIF
IF $C_MACPAR[3]>0
G291
H$3
G290
ENDIF
ENDIF
ENDIF
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N333001 SETAL(61800)
RET
_FEHL2: STOPRE
N333002 SETAL(61805)
RET
_FEHL4: STOPRE
N333004 SETAL(61803)
RET
_FEHL6: STOPRE
N333006 SETAL(61802)
RET
_FEHL8: STOPRE
N333008 SETAL(61801)
RET
_RET: M17

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE396_SPF
PROC CYCLE396 SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 04.05.60.00 ;DATE: 2014-05-20
;ISO interrupt program call (M96)
DEF INT _TMP
DEF STRING[5] _PNAME
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE396_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE396_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
_TEMP_LINE=_TEMP_LINE<<"M96 P"
IF ($AN_NCK_VERSION>=480500)
_TEMP_LINE=_TEMP_LINE<<$C_PI
ELSE
_TEMP_LINE=_TEMP_LINE<<$C_P
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF ($AN_NCK_VERSION>=480500)
_TMP=$C_PI
ELSE
_TMP=$C_P
ENDIF
IF(_TMP<0) GOTOF _FEHL1
IF NOT ($MC_EXTERN_FUNCTION_MASK B_AND 'B1000000')
IF(STRLEN(<<_TMP)>4) GOTOF _FEHL1
CASE STRLEN(<<_TMP) OF 1 GOTOF _M1 2 GOTOF _M2 3 GOTOF _M3 DEFAULT GOTOF _M4
_M1:_PNAME="000"<<_TMP
GOTOF _M5
_M2:_PNAME="00"<<_TMP
GOTOF _M5
_M3:_PNAME="0"<<_TMP
GOTOF _M5
_M4:_PNAME=""<<_TMP
_M5:
G291
ISOCALL _PNAME
G290
ELSE
IF(STRLEN(<<_TMP)>8) GOTOF _FEHL1
G291
ISOCALL <<_TMP
G290
ENDIF
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B10'
REPOSL RMI
ELSE
REPOSL RME
ENDIF
M17
_FEHL1: STOPRE
N339601 SETAL(61812)
RET

;$ACCESS=71771
;$PATH=/_N_CST_DIR/_N_CYCLE308_SPF
PROC CYCLE308 DISPLOF SBLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO-M look-ahead control (G08)
DEF INT _FCP,_FCP_P
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
_FCP_P=$C_P_PROG _FCP=$C_P
CYCLE218(1)
IF (_FCP_P>0)
CASE _FCP OF 1 GOTOF _FFON 0 GOTOF _FFOF DEFAULT GOTOF _WRONG
_FFON:
FFWON
GOTOF _FFE
_FFOF:
FFWOF
GOTOF _FFE
_WRONG:
_FFE:
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N330801 SETAL(61800)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE370T_SPF
PROC CYCLE370T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-04-09
;ISO-T finishing (G70)
DEF AXIS _XX,_ZZ
DEF INT _G40,_G60,_ERR,_PLAN,_II,_G91,_GG01,_GG13,_GG14,_GG15,_GG10,_HDSEP
DEF REAL _SPX,_SPZ,_FAK1,_KT[93,6],_KT1[93,6]
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE370T_MPF"
DEF STRING[200] _TEMP_LINE=""
CYCLE218(1)
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE370T_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
_HDSEP=0
IF $MN_MM_EXTERN_CNC_SYSTEM==4
WRITE(_TEMP,_TEMP_FILE,";ISO 2.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[1]="<<$P_ISO2_HNO[1]<<"   ; active H number X-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[2]="<<$P_ISO2_HNO[2]<<"   ; active H number Y-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_HNO[3]="<<$P_ISO2_HNO[3]<<"   ; active H number Z-axis")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO2_DNO="<<$P_ISO2_DNO<<"   ; active D number")
_HDSEP=4
ENDIF
IF $MN_MM_EXTERN_CNC_SYSTEM==5
WRITE(_TEMP,_TEMP_FILE,";ISO 3.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO3_DNO="<<$P_ISO3_DNO<<"   ; active D number")
_HDSEP=5
ENDIF
IF _HDSEP==0
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
ENDIF
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
_TEMP_LINE=_TEMP_LINE<<"G70 "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
_TEMP_LINE=_TEMP_LINE<<"G72 "
ENDIF
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
IF($C_X_PROG>0) OR ($C_U_PROG>0) GOTOF _FEHL8
IF($C_Z_PROG>0) OR ($C_W_PROG>0) GOTOF _FEHL8
IF($C_Y_PROG>0) OR ($C_V_PROG>0) GOTOF _FEHL8
IF($C_C_PROG>0) OR ($C_H_PROG>0) GOTOF _FEHL8
IF($C_R_PROG>0) GOTOF _FEHL9
G18
_ZZ=$P_AXN1 _XX=$P_AXN2
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
_G40=$P_GG[07]
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
IF(_G91==0)
G90
ENDIF
_G60=$P_GG[10]
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1
IF($C_P==$C_Q)GOTOF _FEHL9
IF($C_F_PROG>0)
F=$C_F
ENDIF
IF(($P_GG[29]==1) OR ($P_GG[29]==4))
_PLAN=1
ELSE
_PLAN=2
ENDIF
CONTDCON(_KT,0)
G291
CALL $P_PATH[$P_STACK-1]<<$P_PROG[$P_STACK-1] BLOCK "N"<<$C_P TO "N"<<$C_Q
G290
EXECUTE(_ERR)
IF _ERR==1 GOTOF _FEHL4
FOR _II= 1 TO _KT[0,5]
_KT1[_II,0]=(_KT[_II,0] MOD 10)+1 _KT1[_II,1]=(_KT[_II,0] MOD 100 DIV 10)+1
_KT1[_II,2]=(_KT[_II,0] MOD 1000 DIV 100)+1 _KT1[_II,3]=(_KT[_II,0] MOD 10000 DIV 1000)+1
_KT1[_II,4]=(_KT[_II,0] MOD 100000 DIV 10000)+1 _KT1[_II,5]=_KT[_II,0] DIV 100000 MOD 10
ENDFOR
CASE(_G40) OF 3 GOTOF _KG42 2 GOTOF _KG41 1 GOTOF _KG40 DEFAULT GOTOF _KG40
_KG42: G42 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _KG4X
_KG41: G41 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _KG4X
_KG40: G40 G91 AX[_XX]=0 AX[_ZZ]=0
_KG4X:
IF(_G91==0)
G90
ENDIF
G64
SBLON
FOR _II= 1 TO _KT[0,5]
_GG01=_KT1[_II,0] _GG13=_KT1[_II,1] _GG14=_KT1[_II,2] _GG15=_KT1[_II,3] _GG10=_KT1[_II,4]
IF _KT1[_II,5]==1
IF _GG01>2
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
G09 AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] I=AC(_KT[_II,4]*_PLAN) K=AC(_KT[_II,3]) F=_KT[_II,5]
ELSE
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
G09 AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] F=_KT[_II,5]
ENDIF
ELSE
IF _GG01>2
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] I=AC(_KT[_II,4]*_PLAN) K=AC(_KT[_II,3]) F=_KT[_II,5]
ELSE
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] F=_KT[_II,5]
ENDIF
ENDIF
ENDFOR
SBLOF
SBLON
G0 G40 G[10]=_G60 AX[_XX]=_SPX AX[_ZZ]=_SPZ
SBLOF
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 G91 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N337001 SETAL(61800)
RET
_FEHL4: STOPRE
N337004 SETAL(61606)
RET
_FEHL8: STOPRE
N337008 SETAL(61811)
RET
_FEHL9: STOPRE
N337009 SETAL(61812)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE371T_SPF
PROC CYCLE371T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.012 ;DATE: 2020-08-31
;ISO-T longitudinal turning (G71/G77)
DEF AXIS _XX,_ZZ
DEF INT _ABC=2,_DIA,_G40,_G71,_G77,_G91,_FVARI,_ZYK,_FCX_P,_FCZ_P,_FCU_P,_FCW_P
DEF REAL _APX,_APZ,_FAK1,_FCF,_FCQ,_FCR,_FFALZ,_FFALX,_FVRT,_FMID,_FMUL,_EPX,_EPZ,_SPX,_SPZ
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE371T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE371T_MPF")
IF NOT (($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0))
_G71=1
ENDIF
IF ((($C_G==77)AND($C_G_PROG==1))OR(($C_G==71)AND(_G71==1)))
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
IF $C_G==77
_TEMP_LINE=_TEMP_LINE<<"G90 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G71 "
ENDIF
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
IF $C_G==77
_TEMP_LINE=_TEMP_LINE<<"G20 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G73 "
ENDIF
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL8
IF($C_C_PROG>0)OR ($C_H_PROG>0)GOTOF _FEHL8
_G40=$P_GG[07]
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($C_F_PROG>0)
_FCF=$C_F
ELSE
_FCF=$P_F
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF($C_G==77)
_ZYK=77
IF($C_G_PROG==1)
_G77=1
ELSE
_G77=0
ENDIF
ELSE
_ZYK=71
ENDIF
IF _ZYK==71 GOTOF _AS
SBLOF
G18
_ZZ=$P_AXN1 _XX=$P_AXN2
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1 _ZFPR[33]=_SPX _ZFPR[34]=_SPZ
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG
IF(_ZYK==77)AND(_G77==1)
IF(_FCX_P==0)AND(_FCU_P==0)GOTOF _FEHL9
IF(_FCZ_P==0)AND(_FCW_P==0)GOTOF _FEHL9
ENDIF
IF(_ABC==1)
IF(_FCX_P>0)
_ZFPR[27]=$C_X
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_SPX+$C_U
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_ZFPR[27]=$C_X
ELSE
_ZFPR[27]=_SPX+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_SPX+$C_U
ENDIF
ENDIF
ENDIF
_EPX=_ZFPR[27]
IF(_ABC==1)
IF(_FCZ_P>0)
_ZFPR[28]=$C_Z
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_SPZ+$C_W
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_ZFPR[28]=$C_Z
ELSE
_ZFPR[28]=_SPZ+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_SPZ+$C_W
ENDIF
ENDIF
ENDIF
_EPZ=_ZFPR[28]
IF(_ZYK==77)
IF($C_R_PROG>0)
_ZFPR[29]=$C_R
ELSE
IF(_G77==1)
_ZFPR[29]=0
ENDIF
ENDIF
ENDIF
_FCR=_ZFPR[29]
_APX=_EPX + (_FCR*_DIA)
IF(_FCF<=0)GOTOF _FEHL2
G90
CASE(_G40) OF 3 GOTOF _BG42 2 GOTOF _BG41 1 GOTOF _BG40 DEFAULT GOTOF _BG40
_BG42: G42 G0 AX[_XX]=_APX
GOTOF _BG4X
_BG41: G41 G0 AX[_XX]=_APX
GOTOF _BG4X
_BG40: G40 G0 AX[_XX]=_APX
_BG4X: G1 AX[_ZZ]=_EPZ AX[_XX]=_EPX F=_FCF
G1 AX[_XX]=_SPX
G40 G0 AX[_ZZ]=_SPZ
G91
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
SBLON
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
GOTOF _RET
_AS:
IF($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0)
_G71=0
ELSE
_G71=1
ENDIF
IF(_G71==1)
IF($C_P_PROG>0)OR ($C_Q_PROG>0)GOTOF _FEHL9
IF($C_W_PROG>0)OR ($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_F_PROG>0)OR ($C_S_PROG>0)OR ($C_T_PROG>0)GOTOF _FEHL9
IF($C_U_PROG>0)
_ZSFI[30]=$C_U*_FMUL
ENDIF
IF($C_R_PROG>0)
_ZSFI[31]=$C_R*_FMUL
ENDIF
ENDIF
IF(_G71==1)GOTOF _RET
_ZZ=$P_AXN1 _XX=$P_AXN2
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
G18
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1 _ZFPR[33]=_SPX _ZFPR[34]=_SPZ
IF(_FCF<=0)GOTOF _FEHL2
IF($C_R_PROG>0)OR ($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_P==$C_Q)GOTOF _FEHL9
_FMID=ABS(_ZSFI[30]/_FMUL)
_FVRT=_ZSFI[31]/_FMUL
_FFALZ=ABS($C_W)
_FFALX=ABS($C_U)/_DIA
IF($C_U>=0)
_FVARI=1
ELSE
_FVARI=3
ENDIF
G90
CYCLE218(1)
SBLON
N371 CYCLE395($P_PATH[$P_STACK-1]<<$P_PROG[$P_STACK-1]<<":N"<<$C_P<<":N"<<$C_Q,_FMID,_FFALZ,_FFALX,0,_FCF,_FCF,_FCF,(_FVARI+1000),0,0,_FVRT,1,0)
G0 AX[_XX]=_SPX AX[_ZZ]=_SPZ
SBLOF
G91
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET1
_FEHL1: STOPRE
N337101 SETAL(61800)
RET
_FEHL2: STOPRE
N337102 SETAL(61003)
RET
_FEHL5: STOPRE
N337105 SETAL(61805)
RET
_FEHL6: STOPRE
N337106 SETAL(61801)
RET
_FEHL8: STOPRE
N337108 SETAL(61811)
RET
_FEHL9: STOPRE
N337109 SETAL(61812)
RET
_RET1:
RET("N"<<$C_Q,1)
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE372T_SPF
PROC CYCLE372T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.012 ;DATE: 2020-08-31
;ISO-T face turning (G72/G79)
DEF AXIS _XX,_ZZ
DEF INT _ABC=2,_DIA,_G40,_G72,_G79,_G91,_FVARI,_ZYK,_FCX_P,_FCZ_P,_FCU_P,_FCW_P
DEF REAL _APX,_APZ,_FAK1,_FCF,_FCQ,_FCR,_FFALZ,_FFALX,_FVRT,_FMID,_FMUL,_EPX,_EPZ,_SPX,_SPZ
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE372T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE372T_MPF")
IF NOT (($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0))
_G72=1
ENDIF
IF ((($C_G==79)AND($C_G_PROG==1))OR(($C_G==72)AND(_G72==1)))
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date:"<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
IF $C_G==77
_TEMP_LINE=_TEMP_LINE<<"G94 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G72 "
ENDIF
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
IF $C_G==77
_TEMP_LINE=_TEMP_LINE<<"G24 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G74 "
ENDIF
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL8
IF($C_C_PROG>0)OR ($C_H_PROG>0)GOTOF _FEHL8
_G40=$P_GG[07]
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($C_F_PROG>0)
_FCF=$C_F
ELSE
_FCF=$P_F
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF($C_G==79)
_ZYK=79
IF($C_G_PROG==1)
_G79=1
ELSE
_G79=0
ENDIF
ELSE
_ZYK=72
ENDIF
IF _ZYK==72 GOTOF _AS
SBLOF
_ZZ=$P_AXN1 _XX=$P_AXN2
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
G18
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1 _ZFPR[33]=_SPX _ZFPR[34]=_SPZ
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG
IF(_ZYK==79)AND(_G79==1)
IF(_FCX_P==0)AND(_FCU_P==0)GOTOF _FEHL9
IF(_FCZ_P==0)AND(_FCW_P==0)GOTOF _FEHL9
ENDIF
IF(_ABC==1)
IF(_FCX_P>0)
_ZFPR[27]=$C_X
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_SPX+$C_U
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_ZFPR[27]=$C_X
ELSE
_ZFPR[27]=_SPX+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_SPX+$C_U
ENDIF
ENDIF
ENDIF
_EPX=_ZFPR[27]
IF(_ABC==1)
IF(_FCZ_P>0)
_ZFPR[28]=$C_Z
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_SPZ+$C_W
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_ZFPR[28]=$C_Z
ELSE
_ZFPR[28]=_SPZ+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_SPZ+$C_W
ENDIF
ENDIF
ENDIF
_EPZ=_ZFPR[28]
IF(_ZYK==79)
IF($C_R_PROG>0)
_ZFPR[29]=$C_R
ELSE
IF(_G79==1)
_ZFPR[29]=0
ENDIF
ENDIF
ENDIF
_FCR=_ZFPR[29]
_APZ=_EPZ + _FCR
IF(_FCF<=0)GOTOF _FEHL2
G90
CASE(_G40) OF 3 GOTOF _BG42 2 GOTOF _BG41 1 GOTOF _BG40 DEFAULT GOTOF _BG40
_BG42: G42 G0 AX[_ZZ]=_APZ
GOTOF _BG4X
_BG41: G41 G0 AX[_ZZ]=_APZ
GOTOF _BG4X
_BG40: G40 G0 AX[_ZZ]=_APZ
_BG4X: G1 AX[_ZZ]=_EPZ AX[_XX]=_EPX F=_FCF
G1 AX[_ZZ]=_SPZ
G40 G0 AX[_XX]=_SPX
G91
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
SBLON
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
GOTOF _RET
_AS:
IF($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0)
_G72=0
ELSE
_G72=1
ENDIF
IF(_G72==1)
IF($C_P_PROG>0)OR ($C_Q_PROG>0)GOTOF _FEHL9
IF($C_U_PROG>0)OR ($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_F_PROG>0)OR ($C_S_PROG>0)OR ($C_T_PROG>0)GOTOF _FEHL9
IF($C_W_PROG>0)
_ZSFI[30]=$C_W*_FMUL
ENDIF
IF($C_R_PROG>0)
_ZSFI[31]=$C_R*_FMUL
ENDIF
ENDIF
IF(_G72==1)GOTOF _RET
_ZZ=$P_AXN1 _XX=$P_AXN2
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
G18
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1 _ZFPR[33]=_SPX _ZFPR[34]=_SPZ
IF(_FCF<=0)GOTOF _FEHL2
IF($C_R_PROG>0)OR ($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_P==$C_Q)GOTOF _FEHL9
_FMID=ABS(_ZSFI[30]/_FMUL)
_FVRT=_ZSFI[31]/_FMUL
_FFALZ=ABS($C_W)
_FFALX=ABS($C_U)/_DIA
IF($C_W>=0)
_FVARI=2
ELSE
_FVARI=4
ENDIF
G90
CYCLE218(1)
SBLON
N372 CYCLE395($P_PATH[$P_STACK-1]<<$P_PROG[$P_STACK-1]<<":N"<<$C_P<<":N"<<$C_Q,_FMID,_FFALZ,_FFALX,0,_FCF,_FCF,_FCF,(_FVARI+1000),0,0,_FVRT,1,0)
G0 AX[_XX]=_SPX AX[_ZZ]=_SPZ
SBLOF
G91
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET1
_FEHL1: STOPRE
N337201 SETAL(61800)
RET
_FEHL2: STOPRE
N337202 SETAL(61003)
RET
_FEHL5: STOPRE
N337205 SETAL(61805)
RET
_FEHL6: STOPRE
N337206 SETAL(61801)
RET
_FEHL8: STOPRE
N337208 SETAL(61811)
RET
_FEHL9: STOPRE
N337209 SETAL(61812)
RET
_RET1:
RET("N"<<$C_Q,1)
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE373T_SPF
PROC CYCLE373T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.011 ;DATE: 2020-08-20
;ISO-T pattern repeating (G73)
DEF AXIS _XX,_ZZ
DEF INT _ABC=2,_COUN,_G40,_ERR,_PLAN,_G73,_G91,_TEIL,_NCVCYCFR=480200,_CYCFROK,_II,_GG01,_GG13,_GG14,_GG15,_GG10,_HDSEP
DEF REAL _ATRX,_ATRZ,_FAK1,_FCF,_FMUL,_SPX,_SPZ,_TEILX,_TEILZ,_ZPX,_ZPZ,_KT[93,6],_KT1[93,6]
DEF FRAME _OLDFR
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE373T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE373T_MPF")
IF NOT (($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0))
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
_TEMP_LINE=_TEMP_LINE<<"G73 "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
_TEMP_LINE=_TEMP_LINE<<"G75 "
ENDIF
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL8
IF($C_C_PROG>0)OR ($C_H_PROG>0)GOTOF _FEHL8
_G40=$P_GG[07]
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($C_F_PROG>0)
_FCF=$C_F
ELSE
_FCF=$P_F
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF(($P_GG[29]==1) OR ($P_GG[29]==4))
_PLAN=1
ELSE
_PLAN=2
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF($C_P_PROG>0)AND($C_Q_PROG>0)AND($C_U_PROG>0)AND($C_W_PROG>0)
_G73=0
ELSE
_G73=1
ENDIF
IF(_G73==1)
IF($C_P_PROG>0)OR ($C_Q_PROG>0)GOTOF _FEHL9
IF($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_F_PROG>0)OR ($C_S_PROG>0)OR ($C_T_PROG>0)GOTOF _FEHL9
IF($C_U_PROG>0)
_ZSFI[32]=ABS($C_U)*_FMUL
ENDIF
IF($C_W_PROG>0)
_ZSFI[33]=ABS($C_W)*_FMUL
ENDIF
IF($C_R_PROG>0)
IF($C_R<0) GOTOF _FEHL9
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
_ZSFI[34]=$C_R
ELSE
_ZSFI[34]=$C_R*_FMUL
ENDIF
ENDIF
ENDIF
IF(_G73==1)
CYCLE218(1)
GOTOF _RET
ENDIF
G18
_ZZ=$P_AXN1 _XX=$P_AXN2
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1
IF (_G40<>1)
G40 G91 AX[_XX]=0 AX[_ZZ]=0
ENDIF
G18
IF(_FCF<=0)GOTOF _FEHL2
F=_FCF
IF($C_R_PROG>0)OR ($C_X_PROG>0)OR ($C_Z_PROG>0)GOTOF _FEHL9
IF($C_P==$C_Q)GOTOF _FEHL9
SBLOF
IF(($AN_NCK_VERSION>=_NCVCYCFR)AND(($MC_MM_SYSTEM_FRAME_MASK B_AND 'B100000')<>'B100000')) GOTOF _FEHL20
IF ($AN_NCK_VERSION>=_NCVCYCFR)
_CYCFROK=1
ELSE
_CYCFROK=0
ENDIF
SBLON
G90
IF(_ZSFI[34]==0)
_TEIL=1
ELSE
_TEIL=_ZSFI[34]
ENDIF
CONTDCON(_KT,0)
G291
CALL $P_PATH[$P_STACK-1]<<$P_PROG[$P_STACK-1] BLOCK "N"<<$C_P TO "N"<<$C_Q
G290
EXECUTE(_ERR)
IF _ERR==1 GOTOF _FEHL4
FOR _II= 1 TO _KT[0,5]
_KT1[_II,0]=(_KT[_II,0] MOD 10)+1 _KT1[_II,1]=(_KT[_II,0] MOD 100 DIV 10)+1
_KT1[_II,2]=(_KT[_II,0] MOD 1000 DIV 100)+1 _KT1[_II,3]=(_KT[_II,0] MOD 10000 DIV 1000)+1
_KT1[_II,4]=(_KT[_II,0] MOD 100000 DIV 10000)+1 _KT1[_II,5]=_KT[_II,0] DIV 100000 MOD 10
ENDFOR
CASE(_G40) OF 3 GOTOF _KG42 2 GOTOF _KG41 1 GOTOF _KG40 DEFAULT GOTOF _KG40
_KG42: G42 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _KG4X
_KG41: G41 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _KG4X
_KG40: G40 G91 AX[_XX]=0 AX[_ZZ]=0
_KG4X:
IF(_G91==0)
G90
ENDIF
_COUN = 1
WHILE (_COUN <= _TEIL)
IF (_TEIL==1)
_TEILX = 0
_TEILZ = 0
ELSE
IF $C_U >= 0
_TEILX = ((_ZSFI[32]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ELSE
_TEILX = ((-1*_ZSFI[32]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ENDIF
IF $C_W >= 0
_TEILZ = ((_ZSFI[33]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ELSE
_TEILZ = ((-1*_ZSFI[33]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ENDIF
ENDIF
_ATRX = _TEILX + ($C_U/_PLAN)
_ATRZ = _TEILZ + $C_W
_ZPX=_SPX + (_TEILX*_PLAN) + $C_U
_ZPZ=_SPZ + _TEILZ + $C_W
SBLON
G0 AX[_XX]=_ZPX AX[_ZZ]=_ZPZ
SBLOF
SBLOF
IF (_CYCFROK==1)
_OLDFR=$P_CYCFRAME
$P_CYCFRAME=_OLDFR:CTRANS(_XX,_ATRX,_ZZ,_ATRZ)
ELSE
ATRANS X=_ATRX Z=_ATRZ
ENDIF
G64
SBLON
FOR _II= 1 TO _KT[0,5]
_GG01=_KT1[_II,0] _GG13=_KT1[_II,1] _GG14=_KT1[_II,2] _GG15=_KT1[_II,3] _GG10=_KT1[_II,4]
IF _KT1[_II,5]==1
IF _GG01>2
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
G09 AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] I=AC(_KT[_II,4]*_PLAN) K=AC(_KT[_II,3]) F=_FCF
ELSE
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
G09 AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] F=_FCF
ENDIF
ELSE
IF _GG01>2
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] I=AC(_KT[_II,4]*_PLAN) K=AC(_KT[_II,3]) F=_FCF
ELSE
G[1]=_GG01 G[13]=_GG13 G[14]=_GG14 G[15]=_GG15 G[10]=_GG10
AX[_XX]=_KT[_II,2]*_PLAN AX[_ZZ]=_KT[_II,1] F=_FCF
ENDIF
ENDIF
ENDFOR
SBLOF
IF (_CYCFROK==1)
$P_CYCFRAME=_OLDFR
ELSE
ATRANS X=(_ATRX*(-1)) Z=(_ATRZ*(-1))
ENDIF
_COUN = _COUN + 1
IF (_TEIL==1)
_TEILX = 0
_TEILZ = 0
ELSE
_TEILX = ((_ZSFI[32]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
_TEILZ = ((_ZSFI[33]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
IF $C_U >= 0
_TEILX = ((_ZSFI[32]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ELSE
_TEILX = ((-1*_ZSFI[32]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ENDIF
IF $C_W >= 0
_TEILZ = ((_ZSFI[33]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ELSE
_TEILZ = ((-1*_ZSFI[33]/_FMUL)/(_TEIL-1))*(_TEIL-_COUN)
ENDIF
ENDIF
_ZPX=_SPX + (_TEILX*_PLAN) + $C_U
_ZPZ=_SPZ + _TEILZ + $C_W
SBLON
G90
IF (_COUN>_TEIL)
G0 G40 AX[_XX]=_SPX AX[_ZZ]=_SPZ
ELSE
G0 AX[_XX]=_ZPX AX[_ZZ]=_ZPZ
ENDIF
SBLOF
ENDWHILE
SBLON
G0 AX[_XX]=_SPX AX[_ZZ]=_SPZ
SBLOF
CASE(_G40) OF 3 GOTOF _GG42 2 GOTOF _GG41 1 GOTOF _GG40 DEFAULT GOTOF _GG40
_GG42: G42 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG41: G41 G91 AX[_XX]=0 AX[_ZZ]=0
GOTOF _GG4X
_GG40: G40 G91 AX[_XX]=0 AX[_ZZ]=0
_GG4X:
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET1
_FEHL1: STOPRE
N337301 SETAL(61800)
RET
_FEHL2: STOPRE
N337302 SETAL(61003)
RET
_FEHL4: STOPRE
N337304 SETAL(61606)
RET
_FEHL5: STOPRE
N337305 SETAL(61805)
RET
_FEHL6: STOPRE
N337306 SETAL(61801)
RET
_FEHL8: STOPRE
N337308 SETAL(61811)
RET
_FEHL9: STOPRE
N337309 SETAL(61812)
RET
_FEHL20:STOPRE
N337320 SETAL(61016)
RET
_RET1:
RET("N"<<$C_Q,1)
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE374T_SPF
PROC CYCLE374T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.012 ;DATE: 2020-08-27
;ISO-T deep hole drilling and recessing (G74/G75)
DEF AXIS _XX,_ZZ
DEF INT _ABC,_DIA,_FCX_P,_FCZ_P,_FCU_P,_FCW_P,_G40,_G74,_ZYK,_I,_FCK
DEF REAL _DPR,_FAK1,_FCF,_FCQ,_FMUL,_SPD,_SPL,_WID,_EPD,_EPL,_FCP,_BP1,_ABH
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE374T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE374T_MPF")
IF NOT (($C_P_PROG>0)OR($C_Q_PROG>0)OR($C_U_PROG>0)OR($C_W_PROG>0))
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
IF $C_G==74
_TEMP_LINE=_TEMP_LINE<<"G74 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G75 "
ENDIF
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
IF $C_G==74
_TEMP_LINE=_TEMP_LINE<<"G76 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G77 "
ENDIF
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
_G40=$P_GG[07]
IF(_G40<>1)GOTOF _FEHL10
IF($C_G==74)
_ZYK=74
ELSE
_ZYK=75
ENDIF
IF($C_X_PROG>0)OR($C_U_PROG>0)OR($C_Z_PROG>0)OR($C_W_PROG>0)
_G74=0
ELSE
_G74=1
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF(_G74==1)
IF($C_R_PROG>0)
_ZSFI[29]=$C_R*_FMUL
ELSE
GOTOF _FEHL9
ENDIF
GOTOF _RET
ENDIF
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
G18
_ZZ=$P_AXN1 _XX=$P_AXN2
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL8
IF($C_C_PROG>0)OR ($C_H_PROG>0)GOTOF _FEHL8
IF($C_G==74)
_ZYK=74
IF($C_Q_PROG>0)
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
_FCQ=ABS($C_Q)/_FMUL
ELSE
_FCQ=ABS($C_Q)
ENDIF
ELSE
_FCQ=0
ENDIF
IF($C_P_PROG>0)
_FCP=ABS($C_P)/_FMUL
ELSE
_FCP=0
ENDIF
ELSE
_ZYK=75
IF($C_P_PROG>0)
_FCQ=ABS($C_P)/_FMUL
ELSE
_FCP=0
ENDIF
IF($C_Q_PROG>0)
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
_FCP=ABS($C_Q)/_FMUL
ELSE
_FCP=ABS($C_Q)
ENDIF
ELSE
_FCP=0
ENDIF
ENDIF
IF(_FCQ==0)GOTOF _FEHL4
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($C_F_PROG>0)
_FCF=$C_F
ELSE
_FCF=$P_F
ENDIF
IF(_FCF<=0)GOTOF _FEHL2
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
_SPD=$P_EP[_XX]*_FAK1 _SPL=$P_EP[_ZZ]*_FAK1
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG
IF(_ZYK==74)
IF(_ABC==1)
IF(_FCZ_P>0)
_DPR=$C_Z-_SPL
ELSE
IF(_FCW_P>0)
_DPR=$C_W
ELSE
GOTOF _FEHL7
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_DPR=$C_Z-_SPL
ELSE
_DPR=$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_DPR=$C_W
ELSE
GOTOF _FEHL7
ENDIF
ENDIF
ENDIF
_EPL=_SPL+_DPR
IF(_ABC==1)
IF(_FCX_P>0)
_WID=$C_X-_SPD
ELSE
IF(_FCU_P>0)
_WID=$C_U
ELSE
_WID=0
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_WID=$C_X-_SPD
ELSE
_WID=$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_WID=$C_U
ELSE
_WID=0
ENDIF
ENDIF
ENDIF
_EPD=_SPD+_WID
ELSE
IF(_ABC==1)
IF(_FCX_P>0)
_DPR=$C_X-_SPD
ELSE
IF(_FCU_P>0)
_DPR=$C_U
ELSE
GOTOF _FEHL7
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_DPR=$C_X-_SPD
ELSE
_DPR=$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_DPR=$C_U
ELSE
GOTOF _FEHL7
ENDIF
ENDIF
ENDIF
_EPD=_SPD+_DPR
IF(_ABC==1)
IF(_FCZ_P>0)
_WID=$C_Z-_SPL
ELSE
IF(_FCW_P>0)
_WID=$C_W
ELSE
_WID=0
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_WID=$C_Z-_SPL
ELSE
_WID=$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_WID=$C_W
ELSE
_WID=0
ENDIF
ENDIF
ENDIF
_EPL=_SPL+_WID
ENDIF
IF($C_R_PROG>0)
IF(_WID==0)
_ABH=$C_R
ELSE
IF(_WID>0)
_ABH=ABS($C_R)*(-1)
ELSE
_ABH=ABS($C_R)
ENDIF
ENDIF
ELSE
_ABH=0
ENDIF
IF(_WID==0)
_FCK=0
ELSE
IF(_FCP==0)GOTOF _FEHL4
IF(_ZYK==74)
_FCK=(ABS(_WID/(_FCP*_DIA)))+0.499999
ELSE
_FCK=(ABS(_WID/_FCP))+0.499999
ENDIF
ENDIF
FOR _I=0 TO _FCK
CYCLE218(1)
IF(_ZYK==74)
IF(_WID>=0)
_BP1=_SPD+(_I*_FCP*_DIA)
IF(_BP1>_EPD)
_BP1=_EPD
ENDIF
ELSE
_BP1=_SPD-(_I*_FCP*_DIA)
IF(_BP1<_EPD)
_BP1=_EPD
ENDIF
ENDIF
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_FCF
N20 CYCLE375T(_SPL,_SPL,0,_EPL,0,0,_FCQ,0,0,0,1,0,1,0,(_ZSFI[29]/_FMUL),0,0,(_ABH*_DIA))
SBLOF
ELSE
IF(_WID>=0)
_BP1=_SPL+(_I*_FCP)
IF(_BP1>_EPL)
_BP1=_EPL
ENDIF
ELSE
_BP1=_SPL-(_I*_FCP)
IF(_BP1<_EPL)
_BP1=_EPL
ENDIF
ENDIF
SBLON
N30 G00 G90 AX[_ZZ]=AC(_BP1) F=_FCF
N40 CYCLE375T(_SPD,_SPD,0,_EPD,0,0,(_FCQ*_DIA),0,0,0,1,0,2,0,(_ZSFI[29]*_DIA/_FMUL),0,0,_ABH)
SBLOF
ENDIF
ENDFOR
IF(_ZYK==74)
SBLON
N50 G00 G90 AX[_XX]=AC(_SPD)
SBLOF
ELSE
SBLON
N60 G00 G90 AX[_ZZ]=AC(_SPL)
SBLOF
ENDIF
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N337401 SETAL(61800)
RET
_FEHL2: STOPRE
N337402 SETAL(61003)
RET
_FEHL4: STOPRE
N337404 SETAL(61610)
RET
_FEHL5: STOPRE
N337405 SETAL(61805)
RET
_FEHL6: STOPRE
N337406 SETAL(61801)
RET
_FEHL7: STOPRE
N337407 SETAL(61603)
RET
_FEHL8: STOPRE
N337408 SETAL(61811)
RET
_FEHL9: STOPRE
N337409 SETAL(61812)
RET
_FEHL10:
N337410 SETAL(61815)
STOPRE
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE375T_SPF
PROC CYCLE375T(REAL RTP,REAL RFP,REAL SDIS,REAL DP,REAL DPR,REAL FDEP,REAL FDPR,REAL DAM,REAL DTB,REAL DTS,REAL FRF,INT VARI,INT _AXN,REAL _MDEP,REAL _VRT,REAL _DTD,REAL _DIS1,REAL _ABH1) SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.011 ;DATE: 2022-04-19
;ISO-T deep hole drilling and recessing
DEF AXIS _Z,_X
DEF INT HH6,HH7
DEF REAL FAK,HH1,HH2,HH3,HH4,HH5,HH8,_HH9,VHA,HMF,HZ,_FAK1
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE375T_MPF"
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE375T_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,"CYCLE375T("<<RTP<<","<<RFP<<","<<SDIS<<","<<DP<<","<<DPR<<","<<FDEP<<","<<FDPR<<","<<DAM<<","<<DTB<<","<<DTS<<","<<FRF<<","<<VARI<<","<<_AXN<<","<<_MDEP<<","<<_VRT<<","<<_DTD<<","<<_DIS1<<","<<_ABH1<<")")
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
HH2=FDEP HH3=FRF HH4=$P_F HH6=0 FAK=1 HZ=1
IF($P_GG[13]==1)OR($P_GG[13]==3)
FAK=$MN_SCALING_VALUE_INCH
ENDIF
CASE _AXN OF 1 GOTOF _AX1 2 GOTOF _AX2 DEFAULT GOTOF _AX3
_AX1:_Z=$P_AXN1 _X=$P_AXN2
GOTOF _AX
_AX2:_Z=$P_AXN2 _X=$P_AXN1
GOTOF _AX
_AX3:GOTOF FEHL4
_Z=$P_AXN3
_AX:
FRF=ABS(FRF) FDPR=ABS(FDPR) DPR=ABS(DPR) SDIS=ABS(SDIS)
HMF=$P_ACTFRAME[_Z,SC]
IF(DPR==0)GOTOF _MA1
IF(RTP==RFP)GOTOF FEHL1
HH2=RFP-((RTP-RFP)/ABS(RTP-RFP)*DPR)
IF(DP==0)GOTOF _MA0
IF(DP==HH2)GOTOF _MA1
N10 MELDUNG(1)
_MA0:DP=HH2
_MA1:IF(RFP==DP)GOTOF _MAE
HH1=(RFP-DP)/ABS(RFP-DP)
IF(FRF<=1)AND(FRF>0.001)GOTOF _MA3
IF(FRF<0.001)GOTOF _MA2
FRF=1
GOTOF _MA3
_MA2:FRF=0.001
_MA3:
IF(FDPR==0)GOTOF _MA4A
HH2=RFP-HH1*FDPR
IF(FDEP==0)GOTOF _MA4
IF(FDEP==HH2)GOTOF _MA4A
N15 MELDUNG(8)
_MA4:FDEP=HH2
_MA4A:FDPR=ABS(RFP-FDEP)
IF(FDPR==0)GOTOF _MM4B
HH2=(RFP-FDEP)/FDPR
IF(HH2<>HH1)GOTOF FEHL2
_MM4B:HH2=FDEP
IF((HH2-DP)*HH1<0)
HH2=DP
FDEP=DP
FDPR=ABS(RFP-DP)
ENDIF
_HH9=FDPR
IF(_DTD==0)
_DTD=DTB
ENDIF
IF(_VRT<=0)
_VRT=0
ENDIF
HH7=1
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
_MA5:
IF(RFP+SDIS*HH1<>$P_EP[_Z]*_FAK1)
SBLON
N1 G0 G64 G90 AX[_Z]=RFP+SDIS*HH1
SBLOF
ENDIF
HH8=FDPR
N2 _MA5A:G90 G1 F=HH3*HH4 AX[_Z]=HH2
HH3=1
IF(NOT $P_ISTEST)
IF(HH2<>DP)
IF ABS(DTB)>=0.0001
IF(DTB>=0)
N5 G4 F=DTB
ELSE
N5 G4 S=-DTB
ENDIF
ENDIF
ELSE
IF ABS(_DTD)>=0.0001
IF(_DTD>=0)
N5 G4 F=_DTD
ELSE
N5 G4 S=-_DTD
ENDIF
ENDIF
ENDIF
ENDIF
IF(HH2==DP)GOTOF _MA8
IF(DAM==0)
DAM=-1
_MDEP=FDPR
ENDIF
IF(DAM>0)GOTOF _MMD
HH8=-HH8*DAM
IF(HH8>=_MDEP)GOTOF _MMD1
HH8=_MDEP
_MMD1:
HH5=HH2-HH1*HH8
IF((HH5-DP)*HH1>=0)GOTOF _MMD2
HH5=DP
GOTOF _MA6
_MMD2:
IF((HH5-DP)*HH1>=_MDEP)GOTOF _MA6
HH5=HH2-(HH2-DP)/2
GOTOF _MA6
_MMD:
_HH9=_HH9-DAM
IF(_HH9<DAM)
_HH9=DAM
ENDIF
IF(ABS(HH2-DP)-_HH9>=DAM)
IF(ABS(HH2-DP)>2*DAM)
HH5=HH2-_HH9*HH1
ELSE
IF(ABS(HH2-DP)>DAM)
HH5=HH2-ABS(HH2-DP)/2*HH1
ELSE
HH5=DP
ENDIF
ENDIF
ELSE
IF(ABS(HH2-DP)>_HH9)
IF(ABS(HH2-DP)>2*DAM)
HH5=DP+DAM*HH1
ELSE
HH5=HH2-ABS(HH2-DP)/2*HH1
ENDIF
ELSE
HH5=DP
ENDIF
ENDIF
_MA6:IF (VARI<0)OR(VARI>1)AND(VARI<10)OR(VARI>11) GOTOF FEHL4
IF((VARI MOD 10)==0)GOTOF _MA_SPB
N4 G90 G0 AX[_Z]=RFP+SDIS*HH1
IF(NOT $P_ISTEST)
IF ABS(DTS)>=0.0001
IF(DTS>=0)
N5 G4 F=DTS
ELSE
N5 G4 S=-DTS
ENDIF
ENDIF
ENDIF
IF(ABS(RFP-HH2)*FAK*HMF<=30)
VHA=0.6
ELSE
VHA=ABS(RFP-HH2)*FAK*HMF/50
IF(VHA>7)
VHA=7
ENDIF
ENDIF
VHA=VHA/FAK/HMF
IF (_DIS1>0)
VHA=_DIS1
ENDIF
N6 G90 AX[_Z]=HH2+VHA*HH1
GOTOF _MA7
_MA_SPB:
IF(_VRT>=0)GOTOF _MA61
N7 G0 G91 AX[_Z]=HH1*HZ/FAK/HMF
G1
GOTOF _MA62
_MA61:
N7 G0 G91 AX[_Z]=HH1*_VRT/HMF
G1
_MA62:
_MA7:HH2=HH5
GOTOB _MA5A
_MA8:
SBLON
IF(_ABH1<>0)
G1 G91 AX[_X]=_ABH1 F=HH4
ENDIF
IF((VARI DIV 10)==1)
N8 G1 G90 AX[_Z]=RFP+SDIS*HH1 F=HH4*2
ENDIF
N9 G0 G90 AX[_Z]=RTP
N80 F=HH4
SBLOF
_MAE:MSG("")
RET
FEHL1: STOPRE
N337501 SETAL(61101)
RET
FEHL2: STOPRE
N337502 SETAL(61107)
RET
FEHL4: STOPRE
N337504 SETAL(61002)
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE376T_SPF
PROC CYCLE376T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.95.00.00.001 ;DATE: 2020-10-16
;ISO-T thread cutting (G78/G76)
DEF AXIS _XX,_ZZ
DEF INT _ABC=2,_BA=0,_DIA,_FCX_P,_FCZ_P,_FCU_P,_FCW_P,_FP1,_G40,_G76,_G78,_G91,_NRC,_FNID,_FWSW,_ZYK
DEF REAL _APX,_AAPX,_APZ,_AVZ,_FAFF,_AFW,_EPX,_EPZ,_FAK1,_FAL,_FCR,_FCUT,_FMUL,_FROP,_FROPX,_PP1,_PP2,_SPX,_SPZ,_TDEP,_TTDEP,_TW2,_XAUSL,_ZPX,_ZPX1,_ZPZ,_ZRX,_NRCR,_G76LDIST,_SWVS
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE376T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE376T_MPF")
IF((($C_G==78)AND($C_G_PROG==1))OR(($C_G==76)AND($C_X_PROG==0)AND($C_U_PROG==0)AND($C_Z_PROG==0)AND($C_W_PROG==0)))
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF $MN_MM_EXTERN_GCODE_SYSTEM == 0
_TEMP_LINE=_TEMP_LINE<<"G"<<$C_G<<" "
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 1
IF $C_G==78
_TEMP_LINE=_TEMP_LINE<<"G92 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G76 "
ENDIF
ENDIF
IF $MN_MM_EXTERN_GCODE_SYSTEM == 2
IF $C_G==78
_TEMP_LINE=_TEMP_LINE<<"G21 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G78 "
ENDIF
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF(_ABC==1)
IF($C_X_PROG==1)AND($C_U_PROG==1)GOTOF _FEHL5
IF($C_Z_PROG==1)AND($C_W_PROG==1)GOTOF _FEHL5
ENDIF
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL8
IF($C_C_PROG>0)OR ($C_H_PROG>0)GOTOF _FEHL8
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF($C_G==78)
_ZYK=78
IF($C_G_PROG==1)
_G78=1
ELSE
_G78=0
ENDIF
ELSE
_ZYK=76
ENDIF
IF(_ZYK==76)
IF($C_X_PROG>0)OR($C_U_PROG>0)OR($C_Z_PROG>0)OR($C_W_PROG>0)
_G76=0
ELSE
_G76=1
ENDIF
IF(_G76==1)
IF($C_F_PROG>0)OR ($C_S_PROG>0)OR ($C_T_PROG>0)GOTOF _FEHL4
IF($C_P_PROG>0)
_FP1=ABS($C_P)
_FNID=(_FP1 MOD 1000000) DIV 10000
_FAFF=(_FP1 MOD 10000) DIV 100
_FWSW=(_FP1 MOD 100)
IF(_FNID<0)OR(_FNID>=100)GOTOF _FEHL4
_ZSFI[24]=_FNID
_ZSFI[26]=_FAFF
_ZSFI[25]=_FWSW
ENDIF
IF($C_Q_PROG>0)
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
IF(ROUND($C_Q)<>$C_Q) GOTOF _FEHL44
_ZSFI[27]=$C_Q
ELSE
_ZSFI[27]=$C_Q*_FMUL
ENDIF
ENDIF
IF($C_R_PROG>0)
_ZSFI[28]=$C_R*_FMUL
ENDIF
ENDIF
IF(_G76==1)GOTOF _RET
ENDIF
_G40=$P_GG[07]
IF(_G40<>1)GOTOF _FEHL10
G18
_ZZ=$P_AXN1 _XX=$P_AXN2
_SPX=$P_EP[_XX]*_FAK1 _SPZ=$P_EP[_ZZ]*_FAK1
IF((_ZYK==76)AND(_G76==0)) OR ((_ZYK==78)AND(_G78==1))
_FCX_P=0 _FCU_P=0 _FCZ_P=0 _FCW_P=0
IF($C_U_PROG==3)
_FCU_P=3
ELSE
_FCX_P=$C_X_PROG
ENDIF
IF($C_W_PROG==3)
_FCW_P=3
ELSE
_FCZ_P=$C_Z_PROG
ENDIF
IF(_FCX_P==0)AND(_FCU_P==0)GOTOF _FEHL4
IF(_FCZ_P==0)AND(_FCW_P==0)GOTOF _FEHL4
_ZFPR[30]=_SPX _ZFPR[31]=_SPZ
ENDIF
IF(_ABC==1)
IF(_FCX_P>0)
_ZFPR[27]=$C_X
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_ZFPR[30]+$C_U
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_ZFPR[27]=$C_X
ELSE
_ZFPR[27]=_ZFPR[30]+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_ZFPR[27]=_ZFPR[30]+$C_U
ENDIF
ENDIF
ENDIF
_EPX=_ZFPR[27]
_EPX=_EPX*2/_DIA
IF(_ABC==1)
IF(_FCZ_P>0)
_ZFPR[28]=$C_Z
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_ZFPR[31]+$C_W
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_ZFPR[28]=$C_Z
ELSE
_ZFPR[28]=_ZFPR[31]+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_ZFPR[28]=_ZFPR[31]+$C_W
ENDIF
ENDIF
ENDIF
_EPZ=_ZFPR[28]
IF(_ZYK==78)
IF($C_R_PROG>0)
_ZFPR[29]=$C_R
ELSE
IF(_G78==1)
_ZFPR[29]=0
ENDIF
ENDIF
_FCR=_ZFPR[29]
_APX=(_ZFPR[30]*2/_DIA)+(_FCR*2)
_AAPX=(_ZFPR[30]*2/_DIA)
ELSE
_AAPX=_EPX
IF($C_R_PROG>0)
_APX=_EPX+($C_R*2)
_ZFPR[29]=$C_R
ELSE
_APX=_EPX
_ZFPR[29]=0
ENDIF
ENDIF
_APZ=_ZFPR[31]
IF(_ZYK==76)
_TDEP=ABS($C_P/_FMUL)
ELSE
_TDEP=((_ZFPR[30]*2/_DIA)-_EPX)
_EPX=_EPX+_TDEP
_TDEP=_TDEP/2
ENDIF
IF(_TDEP==0)GOTOF _FEHL4
IF(_ZYK==76)
IF(_ZSFI[25]<0)OR(_ZSFI[25]>=121)GOTOF _FEHL9
_FWSW=_ZSFI[25]/2
ELSE
_FWSW=0
ENDIF
IF(_ZYK==76)
_FAL=_ZSFI[28]/_FMUL
ELSE
_FAL=0
ENDIF
_TW2=TAN(_ZSFI[25]/2)
IF(_ZYK==76)
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
IF(ROUND($C_Q)<>$C_Q) GOTOF _FEHL44
_FCUT=($C_Q/_FMUL)
ELSE
_FCUT=$C_Q
ENDIF
IF(_FCUT==0)GOTOF _FEHL4
_NRCR=POT((_TDEP-_FAL)/_FCUT)
IF(_NRCR==0)
_NRCR=1
ENDIF
IF(_NRCR-TRUNC(_NRCR)<>0)
_NRCR=ROUND(_NRCR+0.5)
ENDIF
ELSE
_NRCR=1
ENDIF
_NRC=_NRCR
IF(_ZYK==76)
IF(_ZSFI[24]>=0)
_FNID=_ZSFI[24]
ELSE
_FNID=0
ENDIF
ELSE
_FNID=0
ENDIF
IF(_ZYK==78)
IF($C_F_PROG>0)
_ZFPR[24]=$C_F
ELSE
IF(_G78==1)
_ZFPR[24]=$P_F
ENDIF
ENDIF
_PP1=_ZFPR[24]
ELSE
_PP1=$C_F
ENDIF
IF(_PP1<=0)GOTOF _FEHL2
IF(_ZYK==76)
_ZRX=_EPX-(_ZFPR[30]*2/_DIA)
IF(_ZRX<0)
_BA=3
ELSE
_BA=4
ENDIF
ELSE
IF(_TDEP>=0)
_BA=3
ELSE
_BA=4
_TDEP=ABS(_TDEP)
ENDIF
ENDIF
IF(_ZSFI[26]<0)OR(_ZSFI[26]>=128)GOTOF _FEHL9
_FROP=_ZSFI[26]/10*_PP1
IF((_APZ-_EPZ)==0)
_FROPX=0
ELSE
_FROPX=(_APX-_EPX)/(_APZ-_EPZ)*_FROP*(-1)
ENDIF
_XAUSL=0
_AAPX=_ZFPR[30]*2/_DIA
IF(_APZ>_EPZ)
IF(_BA==3)
_ZPX=_EPX+(_FROP*2)-_FROPX
IF(_ZPX>(_AAPX+(_TDEP*2)))
_XAUSL=(_ZPX-(_AAPX+(_TDEP*2)))/2
_ZPX=(_AAPX+(_TDEP*2))
ENDIF
ELSE
_ZPX=_EPX-(_FROP*2)-_FROPX
IF(_ZPX<(_AAPX-(_TDEP*2)))
_XAUSL=((_AAPX-(_TDEP*2))-_ZPX)/2
_ZPX=(_AAPX-(_TDEP*2))
ENDIF
ENDIF
ELSE
IF(_BA==3)
_ZPX=_EPX+(_FROP*2)+_FROPX
IF(_ZPX>(_AAPX+(_TDEP*2)))
_XAUSL=(_ZPX-(_AAPX+(_TDEP*2)))/2
_ZPX=(_AAPX+(_TDEP*2))
ENDIF
ELSE
_ZPX=_EPX-(_FROP*2)+_FROPX
IF(_ZPX<(_AAPX-(_TDEP*2)))
_XAUSL=((_AAPX-(_TDEP*2))-_ZPX)/2
_ZPX=(_AAPX-(_TDEP*2))
ENDIF
ENDIF
ENDIF
IF(_APZ>_EPZ)
_ZPZ=_EPZ+_FROP
ELSE
_ZPZ=_EPZ-_FROP
ENDIF
IF(_APZ>_EPZ)
_ZPX1=_EPX-_FROPX
ELSE
_ZPX1=_EPX+_FROPX
ENDIF
_AVZ=_TDEP*_TW2
IF(_ZYK==76)
IF(_APZ>_EPZ)
_APZ=_APZ-_AVZ
ELSE
_APZ=_APZ+_AVZ
ENDIF
ENDIF
IF(_ZYK==76)
IF(_BA==3)
_TTDEP=_TDEP*2
ELSE
_TTDEP=_TDEP*(-2)
ENDIF
ELSE
_TTDEP=0
ENDIF
IF(_APZ>_EPZ)
_EPZ=_EPZ+_XAUSL
ELSE
_EPZ=_EPZ-_XAUSL
ENDIF
IF(_ZYK==76)
_G76LDIST = 2 *_TDEP
IF(_BA==3)
IF((_APX+6*_TDEP)>(_ZFPR[30]*2/_DIA))
_G76LDIST=((_ZFPR[30]*2/_DIA)-(_APX+2*_TDEP))/2
ENDIF
IF(((_ZPX+6*_TDEP)>(_ZFPR[30]*2/_DIA))AND((_ZPX+6*_TDEP)>(_APX+6*_TDEP)))
_G76LDIST=((_ZFPR[30]*2/_DIA)-(_ZPX+2*_TDEP))/2
ENDIF
ELSE
IF((_ZPX-6*_TDEP)<(_ZFPR[30]*2/_DIA))
_G76LDIST=ABS((_ZFPR[30]*2/_DIA)-(_ZPX-2*_TDEP))/2
ENDIF
IF(((_APX-6*_TDEP)<(_ZFPR[30]*2/_DIA))AND((_APX-6*_TDEP)<(_ZPX-6*_TDEP)))
_G76LDIST=ABS((_ZFPR[30]*2/_DIA)-(_APX-2*_TDEP))/2
ENDIF
ENDIF
IF(_G76LDIST==0)
_G76LDIST = 0.000000001
ENDIF
IF(_G76LDIST<0)
GOTOF _FEHL7
ENDIF
ELSE
_G76LDIST = 0.000000001
ENDIF
IF(_ZSFI[38]==1)
_BA=_BA+10
ENDIF
IF(_ZYK==76)
_BA=_BA+2000
ELSE
_BA=_BA+1000
ENDIF
IF(_ZYK==78)
IF($C_Q_PROG>0)
IF($C_Q<0) GOTOF _FEHL44
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
IF(ROUND($C_Q)<>$C_Q) GOTOF _FEHL44
_ZFPR[35]=($C_Q/_FMUL) MOD 360.0
ELSE
_ZFPR[35]=$C_Q MOD 360.0
ENDIF
ELSE
IF(_G78==1)
_ZFPR[35]=0
ENDIF
ENDIF
_SWVS=_ZFPR[35]
ELSE
_SWVS=0
ENDIF
G90
CYCLE218(1)
IF (_TDEP<_FAL) GOTOF _FEHL11
SBLON
N376 CYCLE398(_APZ,(_APX+_TTDEP),_ZPZ,(_ZPX1+_TTDEP),_ZPZ,(_ZPX1+_TTDEP),_EPZ,(_ZPX+_TTDEP),0,0,_TDEP,_FAL,_FWSW,_SWVS,_NRC,_FNID,_PP1,_PP1,_PP1,_BA,1,_G76LDIST)
SBLOF
IF(_ZYK==76)
SBLON
G0 G90 AX[_XX]=_ZFPR[30] AX[_ZZ]=_ZFPR[31]
SBLOF
ENDIF
IF(_G91==1)
G91
ENDIF
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N337601 SETAL(61800)
RET
_FEHL2: STOPRE
N337602 SETAL(61001)
RET
_FEHL4: STOPRE
N337604 SETAL(61812)
RET
_FEHL44: STOPRE
N337644 SETAL(61812)
RET
_FEHL5: STOPRE
N337605 SETAL(61805)
RET
_FEHL6: STOPRE
N337606 SETAL(61801)
RET
_FEHL7: STOPRE
N337607 SETAL(61607)
RET
_FEHL8: STOPRE
N337608 SETAL(61811)
RET
_FEHL9: STOPRE
N337609 SETAL(61813)
RET
_FEHL10:
N337610 SETAL(61815)
STOPRE
RET
_FEHL11:
SETAL(61010)
STOPRE
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE381M_SPF
PROC CYCLE381M SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.95.00.00.010 ;DATE: 2021-03-10
;ISO-M drilling (G81/G82/G85/G86/G88/G89)
DEF AXIS _XX,_YY,_ZZ
DEF INT _FCX_P,_FCY_P,_FCZ_P,_FCU_P,_FCV_P,_FCW_P,_FCA_P,_FCB_P,_FCC_P,_G98,_G90,_FIRST,_I,_FCK,_FCK0,_PLAN
DEF INT _AXNUM,_AXE,_NAAX,_MODAX[6],_II,_NOMODANZ,_MODANZ,_PAR1,_TRC,_SD5
DEF REAL _FAAP,_FCX,_FCY,_FCZ,_FCR,_INIZ,_FAK1,_BP1,_BP2
DEF REAL _FCNN[6]
DEF BOOL _AXFOUND=0
DEF STRING[6] _NAMEAX="DEFGHI"
DEF STRING[300] _TRAVSTR
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE381M_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE381M_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"G"<<(76+$P_EXTGG[9])<<" "
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
_TRC=$P_EXTGG[7]
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($SCS_ISO_M_DRILLING_AXIS_IS_Z==1)
G17
ENDIF
_PLAN=$P_GG[6]
_XX=$P_AXN1 _YY=$P_AXN2 _ZZ=$P_AXN3
_ZFPI[0]=76+$P_EXTGG[9]
IF($C_G_PROG==1)
_FIRST=1
_INIZ=$P_EP[_ZZ]*_FAK1
_ZFPR[0]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[0]
ENDIF
IF(_ZFPI[0]==82)OR(_ZFPI[0]==88)OR(_ZFPI[0]==89)
IF($C_P_PROG>0)
IF($C_M_PROG>0)
IF($C_M==98) GOTOF _IGNDWT
ENDIF
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_ZFPR[5]=$C_P/1000
ELSE
_ZFPR[5]=$C_P/10000
ENDIF
ELSE
IF(_FIRST==1)
_ZFPR[5]=0
ENDIF
ENDIF
ELSE
_ZFPR[5]=0
ENDIF
_IGNDWT:
IF($C_F_PROG>0)
_ZFPR[4]=$C_F
ELSE
_ZFPR[4]=$P_F
ENDIF
IF(_ZFPR[4]==0)GOTOF _FEHL2
IF(_FIRST==1)
_ZFPI[1]=$P_SDIR[$AC_MSNUM]
ENDIF
IF($C_R_PROG>0)
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+$C_R
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[1]
ENDIF
ENDIF
_ZFPR[1]=_FCR
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCY_P=$C_Y_PROG _FCZ_P=$C_Z_PROG
_FCA_P=$C_A_PROG _FCB_P=$C_B_PROG _FCC_P=$C_C_PROG
_FCU_P=$C_U_PROG _FCV_P=$C_V_PROG _FCW_P=$C_W_PROG
IF(_FIRST==1)
CYCLE218(1)
ENDIF
FOR _I=1 TO _FCK
IF ($P_EXTGG[17]==2)
IF($MCS_ISO_M_ENABLE_POLAR_COORD==0) GOTOF _FEHL5
_FAAP=$P_AP
CASE _PLAN OF 3 GOTOF _MG19P 2 GOTOF _MG18P DEFAULT GOTOF _MG17P
_MG19P:
IF (_FCZ_P==3)
_FCZ=_FAAP+$C_Z
IF (_FCZ>=360)
_FCZ=_FCZ MOD 360
ENDIF
ELSE
IF (_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_FAAP
ENDIF
ENDIF
IF (_FCY_P==3)
_FCY=$C_Y
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==1)
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==0)
IF (_FCZ_P==0)
ELSE
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPEP
_MG18P:
IF (_FCX_P==3)
_FCX=_FAAP+$C_X
IF (_FCX>=360)
_FCX=_FCX MOD 360
ENDIF
ELSE
IF (_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_FAAP
ENDIF
ENDIF
IF (_FCZ_P==3)
_FCZ=$C_Z
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==1)
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==0)
IF (_FCX_P==0)
ELSE
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPEP
_MG17P:
IF (_FCY_P==3)
_FCY=_FAAP+$C_Y
IF (_FCY>=360)
_FCY=_FCY MOD 360
ENDIF
ELSE
IF (_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=_FAAP
ENDIF
ENDIF
IF (_FCX_P==3)
_FCX=$C_X
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==1)
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==0)
IF (_FCY_P==0)
ELSE
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPEP:
ELSE ;keine Polarkoordinaten
CASE _PLAN OF 3 GOTOF _MG19 2 GOTOF _MG18 DEFAULT GOTOF _MG17
_MG19:
IF(_FCY_P==0)
_FCY=$P_EP[_XX]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_XX]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P==0)
_FCZ=$P_EP[_YY]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_YY]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPE
_MG18:
IF(_FCZ_P==0)
_FCZ=$P_EP[_XX]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_XX]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P==0)
_FCX=$P_EP[_YY]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_YY]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPE
_MG17:
IF(_FCX_P==0)
_FCX=$P_EP[_XX]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P==0)
_FCY=$P_EP[_YY]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_YY]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPE:
ENDIF
_G98=$P_EXTGG[10]
IF(_G98==1)
_ZFPR[3]=_INIZ
ELSE
IF (_ZFPR[0]<_ZFPR[2])
_ZFPR[3]=_ZFPR[1]-ABS(_ZSFR[0])
ELSE
_ZFPR[3]=_ZFPR[1]+ABS(_ZSFR[0])
ENDIF
ENDIF
_NAAX=0
IF(_FCA_P>0)
_NAMEAX[_NAAX]="A" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCA_P==0)
_FCNN[_NAAX]=$P_EP[A]*_FAK1
ELSE
IF(_FCA_P==1)
_FCNN[_NAAX]=$C_A
ELSE
_FCNN[_NAAX]=$P_EP[A]*_FAK1+$C_A
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF(_FCB_P>0)
_NAMEAX[_NAAX]="B" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCB_P==0)
_FCNN[_NAAX]=$P_EP[B]*_FAK1
ELSE
IF(_FCB_P==1)
_FCNN[_NAAX]=$C_B
ELSE
_FCNN[_NAAX]=$P_EP[B]*_FAK1+$C_B
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF(_FCC_P>0)
_NAMEAX[_NAAX]="C" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCC_P==0)
_FCNN[_NAAX]=$P_EP[C]*_FAK1
ELSE
IF(_FCC_P==1)
_FCNN[_NAAX]=$C_C
ELSE
_FCNN[_NAAX]=$P_EP[C]*_FAK1+$C_C
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF(_FCU_P>0)
_NAMEAX[_NAAX]="U" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCU_P==0)
_FCNN[_NAAX]=$P_EP[U]*_FAK1
ELSE
IF(_FCU_P==1)
_FCNN[_NAAX]=$C_U
ELSE
_FCNN[_NAAX]=$P_EP[U]*_FAK1+$C_U
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF(_FCV_P>0)
_NAMEAX[_NAAX]="V" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCV_P==0)
_FCNN[_NAAX]=$P_EP[V]*_FAK1
ELSE
IF(_FCV_P==1)
_FCNN[_NAAX]=$C_V
ELSE
_FCNN[_NAAX]=$P_EP[V]*_FAK1+$C_V
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF(_FCW_P>0)
_NAMEAX[_NAAX]="W" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCW_P==0)
_FCNN[_NAAX]=$P_EP[W]*_FAK1
ELSE
IF(_FCW_P==1)
_FCNN[_NAAX]=$C_W
ELSE
_FCNN[_NAAX]=$P_EP[W]*_FAK1+$C_W
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF((_NAAX>6)OR(_NAAX<0)) GOTOF _FEHL7
_PAR1=_FCX_P+_FCY_P+_FCZ_P+_FCA_P+_FCB_P+_FCC_P+_FCU_P+_FCV_P+_FCW_P
IF(_PAR1==0)GOTOF _KBOHR
SBLOF
IF $MCS_ISO_SIMULTAN_AXES_START==0
SBLON
IF ($P_EXTGG[17]==2)
G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]
ELSE
G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]
ENDIF
_II=0
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
AX[AXNAME(_NAMEAX[_II])]=AC(_FCNN[_II]) F=_ZFPR[4]
ELSE
AX[AXNAME(_NAMEAX[_II])]=DC(_FCNN[_II]) F=_ZFPR[4]
ENDIF
_II=_II+1
ENDWHILE
SBLOF
ELSE
_II=0 _MODANZ=0 _NOMODANZ=0 _TRAVSTR=""
IF ($P_EXTGG[17]==2)
_TRAVSTR="G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]"
ELSE
_TRAVSTR="G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]"
ENDIF
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=AC(" << _FCNN[_II] << ")"
ELSE
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=DC(" << _FCNN[_II] << ")"
ENDIF
_II=_II+1
ENDWHILE
SBLON
EXECSTRING(_TRAVSTR)
SBLOF
ENDIF
IF(_FCK0==1)GOTOF _KBOHR
CASE _ZFPI[0] OF 81 GOTOF _C82 82 GOTOF _C82 85 GOTOF _C85 86 GOTOF _C86 88 GOTOF _C88 89 GOTOF _C85 DEFAULT GOTOF _KBOHR
_C82:
CYCLE82 (_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5])
GOTOF _KBOHR
_C85:
CYCLE85 (_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5],_ZFPR[4],_ZFPR[4])
GOTOF _KBOHR
_C86:
_SD5=_ZSD[5]
IF(_ZSD[5]<>1)
_ZSD[5]=1
ENDIF
CYCLE88 (_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5],_ZFPI[1])
_ZSD[5]=_SD5
GOTOF _KBOHR
_C88:
_SD5=_ZSD[5]
IF(_ZSD[5]<>1)
_ZSD[5]=1
ENDIF
CYCLE88 (_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5],_ZFPI[1])
_ZSD[5]=_SD5
M=_ZFPI[1]
_KBOHR:
_FIRST=0
ENDFOR
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N308101 SETAL(61800)
RET
_FEHL2: STOPRE
N308102 SETAL(61003)
RET
_FEHL4: STOPRE
N308104 SETAL(61808)
RET
_FEHL5: STOPRE
N308105 SETAL(61814)
RET
_FEHL7: STOPRE
N308107 SETAL(61803)
RET
_RET:
IF (_TRC==2)
G41
ENDIF
IF (_TRC==3)
G42
ENDIF
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE383M_SPF
PROC CYCLE383M SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V06.20.00.00.004 ;DATE: 2021-11-22
;ISO-M drilling (G73/G83)
DEF AXIS _XX,_YY,_ZZ
DEF INT _VARI,_FCX_P,_FCY_P,_FCZ_P,_FCU_P,_FCV_P,_FCW_P,_FCA_P,_FCB_P,_FCC_P
DEF INT _G98,_G90,_FIRST,_I,_FCK,_FCK0,_PLAN,_PAR1,_TRC
DEF INT _AXNUM,_AXE,_NAAX,_MODAX[6],_II,_NOMODANZ,_MODANZ
DEF REAL _FAAP,_FDEP,_FDPR,_DAM,_VRT,_FCX,_FCY,_FCZ,_FCR,_INIZ,_FAK1,_BP1,_BP2
DEF REAL _SCAL,_FCNN[6]
DEF BOOL _AXFOUND=0
DEF STRING[6] _NAMEAX="DEFGHI"
DEF STRING[300] _TRAVSTR
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE383M_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE383M_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF($P_EXTGG[10]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[9]==1)
_TEMP_LINE=_TEMP_LINE<<"G73 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G83 "
ENDIF
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
_TRC=$P_EXTGG[7]
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($SCS_ISO_M_DRILLING_AXIS_IS_Z==1)
G17
ENDIF
_PLAN=$P_GG[6]
_XX=$P_AXN1 _YY=$P_AXN2 _ZZ=$P_AXN3
IF($P_EXTGG[9]==1)
_VARI=0 _ZFPI[0]=73 _DAM=-1 _VRT=_ZSFR[1]
ELSE
_VARI=1 _ZFPI[0]=83 _DAM=0 _VRT=0
ENDIF
IF($C_G_PROG==1)
_FIRST=1
_INIZ=$P_EP[_ZZ]*_FAK1
_ZFPR[0]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[0]
ENDIF
IF($C_F_PROG>0)
_ZFPR[4]=$C_F
ELSE
_ZFPR[4]=$P_F
ENDIF
IF(_ZFPR[4]==0)GOTOF _FEHL2
IF($C_R_PROG>0)
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+$C_R
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[1]
ENDIF
ENDIF
_ZFPR[1]=_FCR
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCY_P=$C_Y_PROG _FCZ_P=$C_Z_PROG
_FCA_P=$C_A_PROG _FCB_P=$C_B_PROG _FCC_P=$C_C_PROG
_FCU_P=$C_U_PROG _FCV_P=$C_V_PROG _FCW_P=$C_W_PROG
FOR _I=1 TO _FCK
IF ($P_EXTGG[17]==2)
IF($MCS_ISO_M_ENABLE_POLAR_COORD==0) GOTOF _FEHL5
_FAAP=$P_AP
CASE _PLAN OF 3 GOTOF _MG19P 2 GOTOF _MG18P DEFAULT GOTOF _MG17P
_MG19P:
IF (_FCZ_P==3)
_FCZ=_FAAP+$C_Z
IF (_FCZ>=360)
_FCZ=_FCZ MOD 360
ENDIF
ELSE
IF (_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_FAAP
ENDIF
ENDIF
IF (_FCY_P==3)
_FCY=$C_Y
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==1)
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==0)
IF (_FCZ_P==0)
ELSE
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPEP
_MG18P:
IF (_FCX_P==3)
_FCX=_FAAP+$C_X
IF (_FCX>=360)
_FCX=_FCX MOD 360
ENDIF
ELSE
IF (_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_FAAP
ENDIF
ENDIF
IF (_FCZ_P==3)
_FCZ=$C_Z
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==1)
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==0)
IF (_FCX_P==0)
ELSE
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPEP
_MG17P:
IF (_FCY_P==3)
_FCY=_FAAP+$C_Y
IF (_FCY>=360)
_FCY=_FCY MOD 360
ENDIF
ELSE
IF (_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=_FAAP
ENDIF
ENDIF
IF (_FCX_P==3)
_FCX=$C_X
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==1)
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==0)
IF (_FCY_P==0)
ELSE
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPEP:
ELSE ;keine Polarkoordinaten
CASE _PLAN OF 3 GOTOF _MG19 2 GOTOF _MG18 DEFAULT GOTOF _MG17
_MG19:
IF(_FCY_P==0)
_FCY=$P_EP[_XX]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_XX]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P==0)
_FCZ=$P_EP[_YY]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_YY]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPE
_MG18:
IF(_FCZ_P==0)
_FCZ=$P_EP[_XX]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_XX]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P==0)
_FCX=$P_EP[_YY]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_YY]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPE
_MG17:
IF(_FCX_P==0)
_FCX=$P_EP[_XX]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P==0)
_FCY=$P_EP[_YY]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_YY]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPE:
ENDIF
IF($C_Q_PROG>0)
IF($C_Q<0)GOTOF _FEHL4
_FDPR=$C_Q
_FDEP=0
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FDPR=_ZFPR[6]
_FDEP=_ZFPR[7]
ENDIF
_ZFPR[6]=_FDPR _ZFPR[7]=_FDEP
_G98=$P_EXTGG[10]
IF(_G98==1)
_ZFPR[3]=_INIZ
ELSE
IF (_ZFPR[0]<_ZFPR[2])
_ZFPR[3]=_ZFPR[1]-ABS(_ZSFR[0])
ELSE
_ZFPR[3]=_ZFPR[1]+ABS(_ZSFR[0])
ENDIF
ENDIF
_NAAX=0
IF($C_A_PROG>0)
_NAMEAX[_NAAX]="A" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCA_P==0)
_FCNN[_NAAX]=$P_EP[A]*_FAK1
ELSE
IF(_FCA_P==1)
_FCNN[_NAAX]=$C_A
ELSE
_FCNN[_NAAX]=$P_EP[A]*_FAK1+$C_A
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_B_PROG>0)
_NAMEAX[_NAAX]="B" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCB_P==0)
_FCNN[_NAAX]=$P_EP[B]*_FAK1
ELSE
IF(_FCB_P==1)
_FCNN[_NAAX]=$C_B
ELSE
_FCNN[_NAAX]=$P_EP[B]*_FAK1+$C_B
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_C_PROG>0)
_NAMEAX[_NAAX]="C" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCC_P==0)
_FCNN[_NAAX]=$P_EP[C]*_FAK1
ELSE
IF(_FCC_P==1)
_FCNN[_NAAX]=$C_C
ELSE
_FCNN[_NAAX]=$P_EP[C]*_FAK1+$C_C
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_U_PROG>0)
_NAMEAX[_NAAX]="U" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCU_P==0)
_FCNN[_NAAX]=$P_EP[U]*_FAK1
ELSE
IF(_FCU_P==1)
_FCNN[_NAAX]=$C_U
ELSE
_FCNN[_NAAX]=$P_EP[U]*_FAK1+$C_U
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_V_PROG>0)
_NAMEAX[_NAAX]="V" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCV_P==0)
_FCNN[_NAAX]=$P_EP[V]*_FAK1
ELSE
IF(_FCV_P==1)
_FCNN[_NAAX]=$C_V
ELSE
_FCNN[_NAAX]=$P_EP[V]*_FAK1+$C_V
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_W_PROG>0)
_NAMEAX[_NAAX]="W" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCW_P==0)
_FCNN[_NAAX]=$P_EP[W]*_FAK1
ELSE
IF(_FCW_P==1)
_FCNN[_NAAX]=$C_W
ELSE
_FCNN[_NAAX]=$P_EP[W]*_FAK1+$C_W
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF((_NAAX>6)OR(_NAAX<0)) GOTOF _FEHL7
IF(_FIRST==1)
CYCLE218(1)
ENDIF
_PAR1=_FCX_P+_FCY_P+_FCZ_P+_FCA_P+_FCB_P+_FCC_P+_FCU_P+_FCV_P+_FCW_P
IF(_PAR1==0)GOTOF _KBOHR
SBLOF
IF $MCS_ISO_SIMULTAN_AXES_START==0
SBLON
IF ($P_EXTGG[17]==2)
G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]
ELSE
G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]
ENDIF
_II=0
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
AX[AXNAME(_NAMEAX[_II])]=AC(_FCNN[_II]) F=_ZFPR[4]
ELSE
AX[AXNAME(_NAMEAX[_II])]=DC(_FCNN[_II]) F=_ZFPR[4]
ENDIF
_II=_II+1
ENDWHILE
SBLOF
ELSE
_II=0 _MODANZ=0 _NOMODANZ=0 _TRAVSTR=""
IF ($P_EXTGG[17]==2)
_TRAVSTR="G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]"
ELSE
_TRAVSTR="G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]"
ENDIF
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=AC(" << _FCNN[_II] << ")"
ELSE
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=DC(" << _FCNN[_II] << ")"
ENDIF
_II=_II+1
ENDWHILE
SBLON
EXECSTRING(_TRAVSTR)
SBLOF
ENDIF
N200 _SCAL=$P_PFRAME[Z,SC]
IF(_SCAL<>1)
IF(_FIRST==1)
_ZFPR[6]=_ZFPR[6]/_SCAL
ENDIF
ENDIF
IF(_FCK0==1)GOTOF _KBOHR
CYCLE83(_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[7],_ZFPR[6],_DAM,0,0,1,_VARI,3,0,_VRT,0,_ZSFR[10])
_KBOHR:
_FIRST=0
ENDFOR
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N308301 SETAL(61800)
RET
_FEHL2: STOPRE
N308302 SETAL(61003)
RET
_FEHL4: STOPRE
N308304 SETAL(61808)
RET
_FEHL5: STOPRE
N308305 SETAL(61814)
RET
_FEHL6: STOPRE
N308306 SETAL(61101)
RET
_FEHL7: STOPRE
N308307 SETAL(61803)
RET
_RET:
IF (_TRC==2)
G41
ENDIF
IF (_TRC==3)
G42
ENDIF
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE383T_SPF
PROC CYCLE383T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.011 ;DATE: 2022-04-19
;ISO-T deep hole drilling (G83/G87)
DEF AXIS _XX,_ZZ
DEF INT _VARI,_FCX_P,_FCZ_P,_FCU_P,_FCW_P,_FCC_P,_FCH_P,_G98,_FIRST,_I,_FCK,_FCK0,_ABC,_RFE=1,_BT,_FCC,_DIA,S_MCODE
DEF REAL _FDPR,_DAM,_VRT,_FCX,_FCZ,_FCU,_FCW,_FCP,_FCR,_FMUL,_INIZ,_FAK1,_BP1,_FCCPOS
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE383T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE383T_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF $MN_MM_EXTERN_GCODE_SYSTEM==1
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
IF($P_EXTGG[11]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[10]==2)
_TEMP_LINE=_TEMP_LINE<<"G83 "
ENDIF
IF($P_EXTGG[10]==3)
_TEMP_LINE=_TEMP_LINE<<"G87 "
ENDIF
IF($P_EXTGG[10]==8)
_TEMP_LINE=_TEMP_LINE<<"G83.5 "
ENDIF
IF($P_EXTGG[10]==9)
_TEMP_LINE=_TEMP_LINE<<"G83.6 "
ENDIF
IF($P_EXTGG[10]==10)
_TEMP_LINE=_TEMP_LINE<<"G87.5 "
ENDIF
IF($P_EXTGG[10]==11)
_TEMP_LINE=_TEMP_LINE<<"G87.6 "
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_C_PROG>0)AND($C_H_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL9
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
CASE($P_EXTGG[10]) OF 2 GOTOF _GG83 5 GOTOF _GG87 8 GOTOF _GG83_5 9 GOTOF _GG83_6 10 GOTOF _GG87_5 11 GOTOF _GG87_6 DEFAULT GOTOF _FEHL7
_GG83: _ZFPI[20]=83
GOTOF _END_GG10
_GG87: _ZFPI[20]=87
GOTOF _END_GG10
_GG83_5: _ZFPI[20]=835
GOTOF _END_GG10
_GG83_6: _ZFPI[20]=836
GOTOF _END_GG10
_GG87_5: _ZFPI[20]=875
GOTOF _END_GG10
_GG87_6: _ZFPI[20]=876
_END_GG10:
_XX=$P_AXN2 _ZZ=$P_AXN1
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF (_ZFPI[20]==83) OR (_ZFPI[20]==87)
IF $MCS_ISO_T_DEEPHOLE_DRILL_MODE==0
_VARI=0 _DAM=-1 _VRT=_ZSFR[21]
ELSE
_VARI=1 _DAM=0 _VRT=0
ENDIF
ENDIF
IF ((_ZFPI[20]==835) OR (_ZFPI[20]==836))
IF _ZFPI[20]==835
_VARI=0 _DAM=-1 _VRT=_ZSFR[21]
ELSE
_VARI=1 _DAM=0 _VRT=0
ENDIF
ENDIF
IF ((_ZFPI[20]==875) OR (_ZFPI[20]==876))
IF _ZFPI[20]==875
_VARI=0 _DAM=-1 _VRT=_ZSFR[21]
ELSE
_VARI=1 _DAM=0 _VRT=0
ENDIF
ENDIF
IF($C_G_PROG==1)
_FIRST=1
IF((_ZFPI[20]==83) OR (_ZFPI[20]==835) OR (_ZFPI[20]==836))
_INIZ=$P_EP[_ZZ]*_FAK1
ELSE
_INIZ=$P_EP[_XX]*_FAK1
ENDIF
_ZFPR[20]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[20]
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
IF(_FIRST==1)
IF($C_Q_PROG>0)
IF($C_Q<0)GOTOF _FEHL4
IF($MN_EXTERN_FLOATINGPOINT_PROG==1)
IF(ROUND($C_Q)<>$C_Q) GOTOF _FEHL44
_FDPR=$C_Q/_FMUL
ELSE
_FDPR=$C_Q
ENDIF
_ZFPR[32]=_FDPR
_BT=0
_ZFPI[23]=_BT
ELSE
_BT=1
_ZFPI[23]=_BT
ENDIF
ELSE
_BT=_ZFPI[23]
_FDPR=_ZFPR[32]
ENDIF
IF($C_P_PROG>0)
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_FCP=$C_P/1000
ELSE
_FCP=$C_P/10000
ENDIF
_ZFPR[25]=_FCP
IF(($SCS_ISO_T_DWELL_TIME_UNIT==1)AND(_BT==0))
_ZFPR[25]=-_FCP
ENDIF
ELSE
IF(_FIRST==1)
_ZFPR[25]=0
ENDIF
ENDIF
IF($C_F_PROG>0)
_ZFPR[24]=$C_F
ELSE
_ZFPR[24]=$P_F
ENDIF
IF(_ZFPR[24]<=0)GOTOF _FEHL2
IF(_FIRST==1)
_ZFPI[21]=$P_SDIR[$AC_MSNUM]
ENDIF
IF(($P_GG[29]==2)AND((_ZFPI[20]==87)OR(_ZFPI[20]==875)OR(_ZFPI[20]==876)))
_DIA=2
ELSE
_DIA=1
ENDIF
IF($C_R_PROG>0)
IF(_ABC==1)
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
_FCR=$C_R
ENDIF
ELSE
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
IF(_RFE==2)
_FCR=$C_R
ELSE
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+($C_R*_DIA)
ENDIF
ENDIF
ENDIF
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[21]
ENDIF
ENDIF
_ZFPR[21]=_FCR
IF(_ABC==1)
_G98=1
ELSE
_G98=$P_EXTGG[11]
ENDIF
IF(_G98==1)
_ZFPR[23]=_INIZ
ELSE
_ZFPR[23]=_ZFPR[21]
ENDIF
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG _FCC_P=$C_C_PROG _FCH_P=$C_H_PROG
FOR _I=1 TO _FCK
IF(_ABC==1)
IF(_FCC_P>0)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ELSE
IF(_FCC_P>0)
IF(_FCC_P==1)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_C
ENDIF
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ENDIF
CASE _ZFPI[20] OF 87 GOTOF _MG19 875 GOTOF _MG19 876 GOTOF _MG19 83 GOTOF _MG17 835 GOTOF _MG17 836 GOTOF _MG17 DEFAULT GOTOF _KBO
_MG19:
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCZ
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_ZFPR[21]+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCX
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
GOTOF _MBPE
_MG17:
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCX
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_ZFPR[21]+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCZ
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
_MBPE:
IF ($C_M_PROG>0)
S_MCODE=$C_M
M=S_MCODE
ENDIF
IF(_FCK0==1)GOTOF _KBO
CYCLE218(1)
CASE _ZFPI[20] OF 83 GOTOF _C83 87 GOTOF _C87 835 GOTOF _C835 836 GOTOF _C836 875 GOTOF _C875 876 GOTOF _C876 DEFAULT GOTOF _KBO
_C83:
IF(_BT==0)
SBLON
N20 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,1,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N30 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,1,0,0,_ZFPR[25],0)
SBLOF
ENDIF
GOTOF _KBO
_C87:
IF(_BT==0)
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,2,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,2,0,0,_ZFPR[25],0)
SBLOF
ENDIF
GOTOF _KBO
_C835:
IF(_BT==0)
SBLON
N20 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,1,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N30 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,1,0,0,_ZFPR[25],0)
SBLOF
ENDIF
GOTOF _KBO
_C836:
IF(_BT==0)
SBLON
N20 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,1,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N30 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,1,0,0,_ZFPR[25],0)
SBLOF
ENDIF
GOTOF _KBO
_C875:
IF(_BT==0)
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,2,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,2,0,0,_ZFPR[25],0)
SBLOF
ENDIF
GOTOF _KBO
_C876:
IF(_BT==0)
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,0,_FDPR,_DAM,0,0,1,_VARI,2,0,_VRT,_ZFPR[25],0)
SBLOF
ELSE
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,0,2,0,0,_ZFPR[25],0)
SBLOF
ENDIF
_KBO:
_FIRST=0
IF (S_MCODE>0)
M=S_MCODE+1
ENDIF
IF ABS(_ZSFR[22])>=0.0001
N50 G4 F=_ZSFR[22]
ENDIF
IF(_G98==1)
IF((_ZFPI[20]==83) OR (_ZFPI[20]==835) OR (_ZFPI[20]==836))
SBLON
N60 G00 G90 AX[_ZZ]=AC(_ZFPR[23])
SBLOF
ENDIF
IF((_ZFPI[20]==87) OR (_ZFPI[20]==875) OR (_ZFPI[20]==876))
SBLON
N60 G00 G90 AX[_XX]=AC(_ZFPR[23])
SBLOF
ENDIF
ENDIF
ENDFOR
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N338301 SETAL(61800)
RET
_FEHL2: STOPRE
N338302 SETAL(61003)
RET
_FEHL4: STOPRE
N338304 SETAL(61808)
RET
_FEHL5: STOPRE
N338305 SETAL(61805)
RET
_FEHL6: STOPRE
N338306 SETAL(61801)
RET
_FEHL7: STOPRE
N338307 SETAL(61810)
RET
_FEHL8: STOPRE
N338308 SETAL(61809)
RET
_FEHL9: STOPRE
N338309 SETAL(61811)
RET
_FEHL44: STOPRE
N338344 SETAL(61812)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE384M_SPF
PROC CYCLE384M SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.011 ;DATE: 2022-04-13
;ISO-M tapping (G74/G84)
DEF AXIS _XX,_YY,_ZZ
DEF INT _VARI,_FCX_P,_FCY_P,_FCZ_P,_FCU_P,_FCV_P,_FCW_P,_FCA_P,_FCB_P,_FCC_P
DEF INT _G98,_G90,_FIRST,_I,_FCK,_FCK0,_PLAN,_PAR1,_TRC
DEF INT _AXNUM,_AXE,_NAAX,_MODAX[6],_II,_NOMODANZ,_MODANZ
DEF REAL _FAAP,_PIT,_SST,_SST1,_DAM,_VRT,_FCX,_FCY,_FCZ,_FCR,_RSD,_INIZ,_FAK1,_BP1,_BP2
DEF REAL _SCAL=1,_FCNN[6]
DEF BOOL _AXFOUND=0
DEF STRING[6] _NAMEAX="DEFGHI"
DEF STRING[300] _TRAVSTR
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE384M_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE384M_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF($P_EXTGG[10]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[9]==2)
_TEMP_LINE=_TEMP_LINE<<"G74 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G84 "
ENDIF
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
_TRC=$P_EXTGG[7]
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($SCS_ISO_M_DRILLING_AXIS_IS_Z==1)
G17
ENDIF
_PLAN=$P_GG[6]
_XX=$P_AXN1 _YY=$P_AXN2 _ZZ=$P_AXN3
IF($P_EXTGG[9]==2)
_ZFPI[0]=74 _ZFPI[1]=5
ELSE
_ZFPI[0]=84 _ZFPI[1]=5
ENDIF
IF($C_G_PROG==1)
_FIRST=1
_INIZ=$P_EP[_ZZ]*_FAK1
_ZFPR[0]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[0]
ENDIF
IF($C_P_PROG>0)
IF($C_M_PROG>0)
IF($C_M==98) GOTOF _IGNDWT
ENDIF
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_ZFPR[5]=$C_P/1000
ELSE
_ZFPR[5]=$C_P/10000
ENDIF
ELSE
IF(_FIRST==1)
_ZFPR[5]=0
ENDIF
ENDIF
_IGNDWT:
IF($C_S_PROG>0)
_SST=$C_S
ELSE
IF(_FIRST==1)
_SST=$P_S[$AC_MSNUM]
ELSE
_SST=_ZFPR[9]
ENDIF
ENDIF
_ZFPR[9]=_SST
IF($SCS_ISO_M_RETRACTION_FACTOR<1)OR($SCS_ISO_M_RETRACTION_FACTOR>200)
_SST1=_ZFPR[9]
ELSE
_SST1=_ZFPR[9]*$SCS_ISO_M_RETRACTION_FACTOR/100
ENDIF
IF($C_F_PROG>0)
_ZFPR[4]=$C_F
ELSE
_ZFPR[4]=$P_F
ENDIF
IF(_ZFPR[4]==0)GOTOF _FEHL2
_PIT=_ZFPR[4]
IF(_ZFPI[0]==74)
_PIT=-_ZFPR[4]
ENDIF
IF($P_EXTGG[5]==1)
_PIT=_ZFPR[4]/_ZFPR[9]
IF(_ZFPI[0]==74)
_PIT=-_ZFPR[4]/_ZFPR[9]
ENDIF
ENDIF
IF($C_R_PROG>0)
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+$C_R
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[1]
ENDIF
ENDIF
_ZFPR[1]=_FCR
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCY_P=$C_Y_PROG _FCZ_P=$C_Z_PROG
_FCA_P=$C_A_PROG _FCB_P=$C_B_PROG _FCC_P=$C_C_PROG
_FCU_P=$C_U_PROG _FCV_P=$C_V_PROG _FCW_P=$C_W_PROG
FOR _I=1 TO _FCK
IF ($P_EXTGG[17]==2)
IF($MCS_ISO_M_ENABLE_POLAR_COORD==0) GOTOF _FEHL5
_FAAP=$P_AP
CASE _PLAN OF 3 GOTOF _MG19P 2 GOTOF _MG18P DEFAULT GOTOF _MG17P
_MG19P:
IF (_FCZ_P==3)
_FCZ=_FAAP+$C_Z
IF (_FCZ>=360)
_FCZ=_FCZ MOD 360
ENDIF
ELSE
IF (_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_FAAP
ENDIF
ENDIF
IF (_FCY_P==3)
_FCY=$C_Y
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==1)
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==0)
IF (_FCZ_P==0)
ELSE
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPEP
_MG18P:
IF (_FCX_P==3)
_FCX=_FAAP+$C_X
IF (_FCX>=360)
_FCX=_FCX MOD 360
ENDIF
ELSE
IF (_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_FAAP
ENDIF
ENDIF
IF (_FCZ_P==3)
_FCZ=$C_Z
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==1)
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==0)
IF (_FCX_P==0)
ELSE
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPEP
_MG17P:
IF (_FCY_P==3)
_FCY=_FAAP+$C_Y
IF (_FCY>=360)
_FCY=_FCY MOD 360
ENDIF
ELSE
IF (_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=_FAAP
ENDIF
ENDIF
IF (_FCX_P==3)
_FCX=$C_X
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==1)
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==0)
IF (_FCY_P==0)
ELSE
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPEP:
ELSE ;keine Polarkoordinaten
CASE _PLAN OF 3 GOTOF _MG19 2 GOTOF _MG18 DEFAULT GOTOF _MG17
_MG19:
IF(_FCY_P==0)
_FCY=$P_EP[_XX]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_XX]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P==0)
_FCZ=$P_EP[_YY]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_YY]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPE
_MG18:
IF(_FCZ_P==0)
_FCZ=$P_EP[_XX]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_XX]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P==0)
_FCX=$P_EP[_YY]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_YY]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPE
_MG17:
IF(_FCX_P==0)
_FCX=$P_EP[_XX]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P==0)
_FCY=$P_EP[_YY]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_YY]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPE:
ENDIF
IF($C_Q_PROG>0)
IF($C_Q<0)
GOTOF _FEHL4
ELSE
_DAM=ABS($C_Q)
ENDIF
ENDIF
_ZFPR[11]=_DAM
_G98=$P_EXTGG[10]
IF (_ZFPR[0]<_ZFPR[2])
_RSD=_ZFPR[1]-ABS(_ZSFR[0])
ELSE
_RSD=_ZFPR[1]+ABS(_ZSFR[0])
ENDIF
IF(_G98==1)
_ZFPR[3]=_INIZ
ELSE
_ZFPR[3]=_RSD
ENDIF
_NAAX=0
IF($C_A_PROG>0)
_NAMEAX[_NAAX]="A" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCA_P==0)
_FCNN[_NAAX]=$P_EP[A]*_FAK1
ELSE
IF(_FCA_P==1)
_FCNN[_NAAX]=$C_A
ELSE
_FCNN[_NAAX]=$P_EP[A]*_FAK1+$C_A
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_B_PROG>0)
_NAMEAX[_NAAX]="B" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCB_P==0)
_FCNN[_NAAX]=$P_EP[B]*_FAK1
ELSE
IF(_FCB_P==1)
_FCNN[_NAAX]=$C_B
ELSE
_FCNN[_NAAX]=$P_EP[B]*_FAK1+$C_B
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_C_PROG>0)
_NAMEAX[_NAAX]="C" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCC_P==0)
_FCNN[_NAAX]=$P_EP[C]*_FAK1
ELSE
IF(_FCC_P==1)
_FCNN[_NAAX]=$C_C
ELSE
_FCNN[_NAAX]=$P_EP[C]*_FAK1+$C_C
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_U_PROG>0)
_NAMEAX[_NAAX]="U" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCU_P==0)
_FCNN[_NAAX]=$P_EP[U]*_FAK1
ELSE
IF(_FCU_P==1)
_FCNN[_NAAX]=$C_U
ELSE
_FCNN[_NAAX]=$P_EP[U]*_FAK1+$C_U
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_V_PROG>0)
_NAMEAX[_NAAX]="V" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCV_P==0)
_FCNN[_NAAX]=$P_EP[V]*_FAK1
ELSE
IF(_FCV_P==1)
_FCNN[_NAAX]=$C_V
ELSE
_FCNN[_NAAX]=$P_EP[V]*_FAK1+$C_V
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_W_PROG>0)
_NAMEAX[_NAAX]="W" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCW_P==0)
_FCNN[_NAAX]=$P_EP[W]*_FAK1
ELSE
IF(_FCW_P==1)
_FCNN[_NAAX]=$C_W
ELSE
_FCNN[_NAAX]=$P_EP[W]*_FAK1+$C_W
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF((_NAAX>6)OR(_NAAX<0)) GOTOF _FEHL7
IF(_FIRST==1)
CYCLE218(1)
ENDIF
_PAR1=_FCX_P+_FCY_P+_FCZ_P+_FCA_P+_FCB_P+_FCC_P+_FCU_P+_FCV_P+_FCW_P
IF(_PAR1==0)GOTOF _KBOHR
SBLOF
IF $MCS_ISO_SIMULTAN_AXES_START==0
SBLON
IF ($P_EXTGG[17]==2)
G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]
ELSE
G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]
ENDIF
_II=0
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
AX[AXNAME(_NAMEAX[_II])]=AC(_FCNN[_II]) F=_ZFPR[4]
ELSE
AX[AXNAME(_NAMEAX[_II])]=DC(_FCNN[_II]) F=_ZFPR[4]
ENDIF
_II=_II+1
ENDWHILE
SBLOF
ELSE
_II=0 _MODANZ=0 _NOMODANZ=0 _TRAVSTR=""
IF ($P_EXTGG[17]==2)
_TRAVSTR="G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]"
ELSE
_TRAVSTR="G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]"
ENDIF
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=AC(" << _FCNN[_II] << ")"
ELSE
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=DC(" << _FCNN[_II] << ")"
ENDIF
_II=_II+1
ENDWHILE
SBLON
EXECSTRING(_TRAVSTR)
SBLOF
ENDIF
N200 _SCAL=$P_PFRAME[Z,SC]
IF(_SCAL<>1)
_PIT=_PIT/_SCAL
IF(_FIRST==1)
_ZFPR[11]=_ZFPR[11]/_SCAL
ENDIF
ENDIF
IF(_FCK0==1)GOTOF _KBOHR
IF($SCS_ISO_M_DRILLING_TYPE==0)
_VARI=0
ELSE
IF($SCS_ISO_M_DRILLING_TYPE==1) OR ($SCS_ISO_M_DRILLING_TYPE>3) GOTOF _RET
IF($SCS_ISO_M_DRILLING_TYPE==2)
_VARI=1
ELSE
_VARI=2
ENDIF
ENDIF
IF(_ZFPR[11]==0)
_VARI=0
ENDIF
IF(_ZFPR[1]<_ZFPR[2]) GOTOF _FEHL6
IF(($P_DRYRUN==1)AND($MCS_ISO_ENABLE_DRYRUN==1)) GOTOF _NOTHREADCUTTING
CYCLE3841(_RSD,_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5],_ZFPI[1],0,_PIT,0,_ZFPR[9],_SST1,0,_VARI,_DAM,_ZSFR[1])
_NOTHREADCUTTING:
IF ABS(_ZFPR[5])>0.0001
G4 F=_ZFPR[5]
ENDIF
SBLON
G00 G64 AX[_ZZ]=AC(_ZFPR[3])
SBLOF
_KBOHR:
_FIRST=0
ENDFOR
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N308401 SETAL(61800)
RET
_FEHL2: STOPRE
N308402 SETAL(61003)
RET
_FEHL4: STOPRE
N308404 SETAL(61808)
RET
_FEHL5: STOPRE
N308405 SETAL(61814)
RET
_FEHL6: STOPRE
N308406 SETAL(61101)
RET
_FEHL7: STOPRE
N308407 SETAL(61803)
RET
_RET:
IF (_TRC==2)
G41
ENDIF
IF (_TRC==3)
G42
ENDIF
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE384T_SPF
PROC CYCLE384T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.012 ;DATE: 2022-04-21
;ISO-T tapping (G84/G88)
DEF AXIS _XX,_ZZ
DEF INT _FCX_P,_FCZ_P,_FCU_P,_FCW_P,_FCC_P,_FCH_P,_G98,_FIRST,_I,_FCK,_FCK0,_ABC,_RFE=1,_FCC,_DIA
DEF REAL _PIT,_SST,_SST1,_FCX,_FCZ,_FCU,_FCW,_FCR,_INIZ,_FAK1,_BP1,_FCCPOS
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE384T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE384T_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF $MN_MM_EXTERN_GCODE_SYSTEM==1
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
IF($P_EXTGG[11]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[10]==3)
_TEMP_LINE=_TEMP_LINE<<"G84 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G88 "
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_C_PROG>0)AND($C_H_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL9
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF($P_EXTGG[10]==3)
_ZFPI[20]=84
ELSE
_ZFPI[20]=88
ENDIF
_XX=$P_AXN2 _ZZ=$P_AXN1
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF (($P_GG[13]==1) OR ($P_GG[13]==3))
_ZFPI[25]=3
ELSE
_ZFPI[25]=0
ENDIF
IF($C_G_PROG==1)
_FIRST=1
IF(_ZFPI[20]==84)
_INIZ=$P_EP[_ZZ]*_FAK1
ELSE
_INIZ=$P_EP[_XX]*_FAK1
ENDIF
_ZFPR[20]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[20]
ENDIF
IF($C_P_PROG>0)
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_ZFPR[25]=$C_P/1000
ELSE
_ZFPR[25]=$C_P/10000
ENDIF
ELSE
IF(_FIRST==1)
_ZFPR[25]=0
ENDIF
ENDIF
IF(_FIRST==1)
_ZFPI[21]=$P_SDIR[$AC_MSNUM]
ENDIF
IF($C_S_PROG>0)
_SST=$C_S
ELSE
IF(_FIRST==1)
_SST=$P_S[$AC_MSNUM]
ELSE
_SST=_ZFPR[26]
ENDIF
ENDIF
_ZFPR[26]=_SST
IF($SCS_ISO_T_RETRACTION_FACTOR<1)OR($SCS_ISO_T_RETRACTION_FACTOR>200)
_SST1=_ZFPR[26]
ELSE
_SST1=_ZFPR[26]*$SCS_ISO_T_RETRACTION_FACTOR/100
ENDIF
IF($C_F_PROG>0)
_ZFPR[24]=$C_F
ELSE
_ZFPR[24]=$P_F
ENDIF
IF(_ZFPR[24]<=0)GOTOF _FEHL2
_PIT=_ZFPR[24]
IF($P_EXTGG[5]==1)
_PIT=_ZFPR[24]/_ZFPR[26]
ENDIF
IF(($P_GG[29]==2)AND(_ZFPI[20]==88))
_DIA=2
ELSE
_DIA=1
ENDIF
IF($C_R_PROG>0)
IF(_ABC==1)
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
_FCR=$C_R
ENDIF
ELSE
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
IF(_RFE==2)
_FCR=$C_R
ELSE
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+($C_R*_DIA)
ENDIF
ENDIF
ENDIF
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[21]
ENDIF
ENDIF
_ZFPR[21]=_FCR
IF(_ABC==1)
_G98=1
ELSE
_G98=$P_EXTGG[11]
ENDIF
IF(_G98==1)
_ZFPR[23]=_INIZ
ELSE
_ZFPR[23]=_ZFPR[21]
ENDIF
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG _FCC_P=$C_C_PROG _FCH_P=$C_H_PROG
FOR _I=1 TO _FCK
IF(_ABC==1)
IF(_FCC_P>0)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ELSE
IF(_FCC_P>0)
IF(_FCC_P==1)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_C
ENDIF
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ENDIF
CASE _ZFPI[20] OF 88 GOTOF _MG19 84 GOTOF _MG17 DEFAULT GOTOF _KBO
_MG19:
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCZ
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_ZFPR[21]+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCX
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
GOTOF _MBPE
_MG17:
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCX
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_ZFPR[21]+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCZ
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
_MBPE:
IF(_FCK0==1)GOTOF _KBO
CYCLE218(1)
CASE _ZFPI[20] OF 84 GOTOF _C84 88 GOTOF _C88 DEFAULT GOTOF _KBO
_C84:
SBLON
N20 CYCLE84(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[25],_ZFPI[21],0,_PIT,0,_ZFPR[26],_SST1,1,_ZFPI[25],,1000)
SBLOF
GOTOF _KBO
_C88:
SBLON
N30 CYCLE84(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[25],_ZFPI[21],0,_PIT,0,_ZFPR[26],_SST1,2,_ZFPI[25],,1000)
SBLOF
_KBO:
_FIRST=0
IF ABS(_ZSFR[22])>=0.0001
N50 G4 F=_ZSFR[22]
ENDIF
IF(_G98==1)
IF(_ZFPI[20]==84)
SBLON
N60 G00 G90 AX[_ZZ]=AC(_ZFPR[23])
SBLOF
ENDIF
IF(_ZFPI[20]==88)
SBLON
N60 G00 G90 AX[_XX]=AC(_ZFPR[23])
SBLOF
ENDIF
ENDIF
ENDFOR
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N338401 SETAL(61800)
RET
_FEHL2: STOPRE
N338402 SETAL(61003)
RET
_FEHL4: STOPRE
N338404 SETAL(61808)
RET
_FEHL5: STOPRE
N338405 SETAL(61805)
RET
_FEHL6: STOPRE
N338406 SETAL(61801)
RET
_FEHL7: STOPRE
N338407 SETAL(61810)
RET
_FEHL8: STOPRE
N338408 SETAL(61809)
RET
_FEHL9: STOPRE
N338409 SETAL(61811)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE385T_SPF
PROC CYCLE385T SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.011 ;DATE: 2022-04-19
;ISO-T drilling (G85/G89)
DEF AXIS _XX,_ZZ
DEF INT _VARI,_FCX_P,_FCZ_P,_FCU_P,_FCW_P,_FCC_P,_FCH_P,_G98,_FIRST,_I,_FCK,_FCK0,_ABC,_RFE=1,_FCC,_DIA
DEF REAL _DAM,_VRT,_FCX,_FCZ,_FCU,_FCW,_FCP,_FCR,_INIZ,_FAK1,_BP1,_FCCPOS
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE385T_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE385T_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF $MN_MM_EXTERN_GCODE_SYSTEM==1
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
IF($P_EXTGG[11]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[10]==4)
_TEMP_LINE=_TEMP_LINE<<"G85 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G89 "
ENDIF
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
IF($C_X_PROG>0)AND($C_U_PROG>0)GOTOF _FEHL5
IF($C_Z_PROG>0)AND($C_W_PROG>0)GOTOF _FEHL5
IF($C_C_PROG>0)AND($C_H_PROG>0)GOTOF _FEHL5
IF($C_Y_PROG>0)OR ($C_V_PROG>0)GOTOF _FEHL9
CASE($MN_MM_EXTERN_GCODE_SYSTEM) OF 0 GOTOF _BCOD 1 GOTOF _ACOD 2 GOTOF _CCOD DEFAULT GOTOF _FEHL6
_ACOD: _ABC=1
GOTOF _ECOD
_BCOD: _ABC=2
GOTOF _ECOD
_CCOD: _ABC=3
_ECOD:
IF($P_EXTGG[10]==4)
_ZFPI[20]=85
ELSE
_ZFPI[20]=89
ENDIF
_XX=$P_AXN2 _ZZ=$P_AXN1
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF $MCS_ISO_T_DEEPHOLE_DRILL_MODE==0
_VARI=0 _DAM=-1 _VRT=_ZSFR[21]
ELSE
_VARI=1 _DAM=0 _VRT=0
ENDIF
IF($C_G_PROG==1)
_FIRST=1
IF(_ZFPI[20]==85)
_INIZ=$P_EP[_ZZ]*_FAK1
ELSE
_INIZ=$P_EP[_XX]*_FAK1
ENDIF
_ZFPR[20]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[20]
ENDIF
IF($C_P_PROG>0)
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_FCP=$C_P/1000
ELSE
_FCP=$C_P/10000
ENDIF
_ZFPR[25]=_FCP
ELSE
IF(_FIRST==1)
_ZFPR[25]=0
ENDIF
ENDIF
IF($C_F_PROG>0)
_ZFPR[24]=$C_F
ELSE
_ZFPR[24]=$P_F
ENDIF
IF(_ZFPR[24]<=0)GOTOF _FEHL2
IF(_FIRST==1)
_ZFPI[21]=$P_SDIR[$AC_MSNUM]
ENDIF
IF(($P_GG[29]==2)AND(_ZFPI[20]==89))
_DIA=2
ELSE
_DIA=1
ENDIF
IF($C_R_PROG>0)
IF(_ABC==1)
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
_FCR=$C_R
ENDIF
ELSE
IF(_RFE==1)
_FCR=_INIZ+($C_R*_DIA)
ELSE
IF(_RFE==2)
_FCR=$C_R
ELSE
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+($C_R*_DIA)
ENDIF
ENDIF
ENDIF
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[21]
ENDIF
ENDIF
_ZFPR[21]=_FCR
IF(_ABC==1)
_G98=1
ELSE
_G98=$P_EXTGG[11]
ENDIF
IF(_G98==1)
_ZFPR[23]=_INIZ
ELSE
_ZFPR[23]=_ZFPR[21]
ENDIF
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCZ_P=$C_Z_PROG _FCU_P=$C_U_PROG _FCW_P=$C_W_PROG _FCC_P=$C_C_PROG _FCH_P=$C_H_PROG
FOR _I=1 TO _FCK
IF(_ABC==1)
IF(_FCC_P>0)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ELSE
IF(_FCC_P>0)
IF(_FCC_P==1)
_FCC=1
_FCCPOS=$C_C
ELSE
_FCC=0
_FCCPOS=$C_C
ENDIF
ELSE
_FCC=0
_FCCPOS=$C_H
ENDIF
ENDIF
CASE _ZFPI[20] OF 89 GOTOF _MG19 85 GOTOF _MG17 DEFAULT GOTOF _KBO
_MG19:
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=$P_EP[_ZZ]*_FAK1+$C_W
ELSE
_FCZ=$P_EP[_ZZ]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCZ
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_ZFPR[21]+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=_ZFPR[21]+$C_U
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCX=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCX
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_ZZ]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
GOTOF _MBPE
_MG17:
IF(_ABC==1)
IF(_FCX_P>0)
_FCX=$C_X
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ELSE
IF(_FCX_P>0)
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ELSE
IF(_FCU_P>0)
_FCX=$P_EP[_XX]*_FAK1+$C_U
ELSE
_FCX=$P_EP[_XX]*_FAK1
ENDIF
ENDIF
ENDIF
_BP1=_FCX
IF(_ABC==1)
IF(_FCZ_P>0)
_FCZ=$C_Z
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ELSE
IF(_FCZ_P>0)
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_ZFPR[21]+$C_Z
ENDIF
ELSE
IF(_FCW_P>0)
_FCZ=_ZFPR[21]+$C_W
ELSE
IF(_FIRST==1)GOTOF _FEHL4
_FCZ=_ZFPR[22]
ENDIF
ENDIF
ENDIF
_ZFPR[22]=_FCZ
IF(_FCX_P+_FCU_P+_FCZ_P+_FCW_P+_FCC_P+_FCH_P+$C_R_PROG==0)GOTOF _KBO
IF ($C_C_PROG>0) OR ($C_H_PROG>0)
IF(_FCC==1)
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=AC(_FCCPOS)
SBLOF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24] C=IC(_FCCPOS)
SBLOF
ENDIF
ELSE
SBLON
N10 G00 G90 AX[_XX]=AC(_BP1) F=_ZFPR[24]
SBLOF
ENDIF
_MBPE:
IF(_FCK0==1)GOTOF _KBO
CYCLE218(1)
CASE _ZFPI[20] OF 85 GOTOF _C85 89 GOTOF _C89 DEFAULT GOTOF _KBO
_C85:
SBLON
N30 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,10,1,0,0,_ZFPR[25],0,0)
SBLOF
GOTOF _KBO
_C89:
SBLON
N40 CYCLE375T(_ZFPR[21],_ZFPR[21],_ZSFR[20],_ZFPR[22],0,_ZFPR[22],0,0,0,0,1,10,2,0,0,_ZFPR[25],0,0)
SBLOF
_KBO:
_FIRST=0
IF ABS(_ZSFR[22])>=0.0001
N50 G4 F=_ZSFR[22]
ENDIF
IF(_G98==1)
IF(_ZFPI[20]==85)
SBLON
N60 G00 G90 AX[_ZZ]=AC(_ZFPR[23])
SBLOF
ENDIF
IF(_ZFPI[20]==89)
SBLON
N60 G00 G90 AX[_XX]=AC(_ZFPR[23])
SBLOF
ENDIF
ENDIF
ENDFOR
IF(_ABC==1)
G90
ENDIF
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N338501 SETAL(61800)
RET
_FEHL2: STOPRE
N338502 SETAL(61003)
RET
_FEHL4: STOPRE
N338504 SETAL(61808)
RET
_FEHL5: STOPRE
N338505 SETAL(61805)
RET
_FEHL6: STOPRE
N338506 SETAL(61801)
RET
_FEHL7: STOPRE
N338507 SETAL(61810)
RET
_FEHL8: STOPRE
N338508 SETAL(61809)
RET
_FEHL9: STOPRE
N338509 SETAL(61811)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE387M_SPF
PROC CYCLE387M SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO-M drilling (G76/G87)
DEF AXIS _XX,_YY,_ZZ
DEF INT _FCX_P,_FCY_P,_FCZ_P,_FCU_P,_FCV_P,_FCW_P,_FCA_P,_FCB_P,_FCC_P
DEF INT _G98,_G90,_FIRST,_I,_FCK,_FCK0,_PLAN,_PAR1,_TRC
DEF INT _AXNUM,_AXE,_NAAX,_MODAX[6],_II,_NOMODANZ,_MODANZ
DEF REAL _FAAP,_RPA,_POSS,_FCX,_FCY,_FCZ,_FCR,_INIZ,_FAK1,_BP1,_BP2
DEF REAL _FCNN[6]
DEF BOOL _AXFOUND=0
DEF STRING[6] _NAMEAX="DEFGHI"
DEF STRING[300] _TRAVSTR
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE387M_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE387M_MPF")
IF($C_G_PROG==1)
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
IF($P_EXTGG[10]==1)
WRITE(_TEMP,_TEMP_FILE,"G98")
ELSE
WRITE(_TEMP,_TEMP_FILE,"G99")
ENDIF
ENDIF
_TEMP_LINE=""
IF $C_G_PROG<>0
IF($P_EXTGG[9]==3)
_TEMP_LINE=_TEMP_LINE<<"G76 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G87 "
ENDIF
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_M_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"M"<<$C_M<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
$AC_PARAM[1]=0
$A_OUT[1]=0
STOPRE
IF($MN_EXTERN_INTERRUPT_BITS_M96) B_AND 'B1000'
DISABLE(1)
ID=1 WHEN $A_IN[1]==1 DO $AC_PARAM[1]=1
ENDIF
ENDIF
ENDIF
_AXNUM=$ON_NUM_AXES_IN_SYSTEM+$ON_NUM_ADD_AXES_IN_SYSTEM
_TRC=$P_EXTGG[7]
IF($MN_SCALING_SYSTEM_IS_METRIC==1)
IF($MCS_ISO_SCALING_SYSTEM<>1)
CYCLE301
ENDIF
ELSE
IF($MCS_ISO_SCALING_SYSTEM<>2)
CYCLE301
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF($SCS_ISO_M_DRILLING_AXIS_IS_Z==1)
G17
ENDIF
_PLAN=$P_GG[6]
_XX=$P_AXN1 _YY=$P_AXN2 _ZZ=$P_AXN3
IF($P_EXTGG[9]==3)
_ZFPI[0]=76
ELSE
_ZFPI[0]=87
ENDIF
IF($C_G_PROG==1)
_FIRST=1
_INIZ=$P_EP[_ZZ]*_FAK1
_ZFPR[0]=_INIZ
ELSE
_FIRST=0
_INIZ=_ZFPR[0]
ENDIF
IF($C_P_PROG>0)
IF($C_M_PROG>0)
IF($C_M==98) GOTOF _IGNDWT
ENDIF
IF($MN_EXTERN_INCREMENT_SYSTEM==0)
_ZFPR[5]=$C_P/1000
ELSE
_ZFPR[5]=$C_P/10000
ENDIF
ELSE
IF(_FIRST==1)
_ZFPR[5]=0
ENDIF
ENDIF
_IGNDWT:
IF($C_F_PROG>0)
_ZFPR[4]=$C_F
ELSE
_ZFPR[4]=$P_F
ENDIF
IF(_ZFPR[4]==0)GOTOF _FEHL2
IF(_FIRST==1)
_ZFPI[1]=$P_SDIR[$AC_MSNUM]
ENDIF
_POSS=(_ZSFR[2]+360-$P_ACTFRAME[_ZZ,RT])MOD 360
IF($C_Q_PROG>0)
_RPA=ABS($C_Q)
CASE $SCS_ISO_M_RETRACTION_DIR OF 0 GOTOF _RD01 1 GOTOF _RD00 2 GOTOF _RD01 3 GOTOF _RD10 4 GOTOF _RD11 DEFAULT GOTOF _FEHL9
_RD00:
_ZFPR[8]=_RPA/$P_ACTFRAME[_XX,SC]
_ZFPR[11]=0
GOTOF _RDXX
_RD01:
_ZFPR[8]=-_RPA/$P_ACTFRAME[_XX,SC]
_ZFPR[11]=0
GOTOF _RDXX
_RD10:
_ZFPR[8]=0
_ZFPR[11]=_RPA/$P_ACTFRAME[_YY,SC]
GOTOF _RDXX
_RD11:
_ZFPR[8]=0
_ZFPR[11]=-_RPA/$P_ACTFRAME[_YY,SC]
_RDXX:
ELSE
IF(_FIRST==1)
_ZFPR[8]=0 _ZFPR[11]=0
ENDIF
ENDIF
IF($C_R_PROG>0)
IF($C_R_PROG==1)
_FCR=$C_R
ELSE
_FCR=_INIZ+$C_R
ENDIF
ELSE
IF(_FIRST==1)
_FCR=_INIZ
ELSE
_FCR=_ZFPR[1]
ENDIF
ENDIF
_ZFPR[1]=_FCR
_I=1 _FCK0=0
IF($C_K_PROG==0)
_FCK=1
ELSE
_FCK=$C_K[0]
IF(_FCK==0)
_FCK=1 _FCK0=1
ELSE
IF(_FCK<0)
_FCK=1
ENDIF
ENDIF
ENDIF
_FCX_P=$C_X_PROG _FCY_P=$C_Y_PROG _FCZ_P=$C_Z_PROG
_FCA_P=$C_A_PROG _FCB_P=$C_B_PROG _FCC_P=$C_C_PROG
_FCU_P=$C_U_PROG _FCV_P=$C_V_PROG _FCW_P=$C_W_PROG
FOR _I=1 TO _FCK
IF ($P_EXTGG[17]==2)
IF($MCS_ISO_M_ENABLE_POLAR_COORD==0) GOTOF _FEHL5
_FAAP=$P_AP
CASE _PLAN OF 3 GOTOF _MG19P 2 GOTOF _MG18P DEFAULT GOTOF _MG17P
_MG19P:
IF (_FCZ_P==3)
_FCZ=_FAAP+$C_Z
IF (_FCZ>=360)
_FCZ=_FCZ MOD 360
ENDIF
ELSE
IF (_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=_FAAP
ENDIF
ENDIF
IF (_FCY_P==3)
_FCY=$C_Y
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==1)
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCY_P==0)
IF (_FCZ_P==0)
ELSE
_FCY=$C_Y
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPEP
_MG18P:
IF (_FCX_P==3)
_FCX=_FAAP+$C_X
IF (_FCX>=360)
_FCX=_FCX MOD 360
ENDIF
ELSE
IF (_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=_FAAP
ENDIF
ENDIF
IF (_FCZ_P==3)
_FCZ=$C_Z
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==1)
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCZ_P==0)
IF (_FCX_P==0)
ELSE
_FCZ=$C_Z
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPEP
_MG17P:
IF (_FCY_P==3)
_FCY=_FAAP+$C_Y
IF (_FCY>=360)
_FCY=_FCY MOD 360
ENDIF
ELSE
IF (_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=_FAAP
ENDIF
ENDIF
IF (_FCX_P==3)
_FCX=$C_X
G110 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==1)
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
IF (_FCX_P==0)
IF (_FCY_P==0)
ELSE
_FCX=$C_X
G111 AX[_XX]=0 AX[_YY]=0
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPEP:
ELSE ;keine Polarkoordinaten
CASE _PLAN OF 3 GOTOF _MG19 2 GOTOF _MG18 DEFAULT GOTOF _MG17
_MG19:
IF(_FCY_P==0)
_FCY=$P_EP[_XX]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_XX]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P==0)
_FCZ=$P_EP[_YY]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_YY]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P>0)
_ZFPR[10]=$C_X
IF(_FCX_P==1)
_FCX=$C_X _ZFPI[2]=1
ELSE
_FCX=_ZFPR[1]+$C_X _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCX=_ZFPR[2]
ELSE
_FCX=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCY _BP2=_FCZ _ZFPR[2]=_FCX
GOTOF _MBPE
_MG18:
IF(_FCZ_P==0)
_FCZ=$P_EP[_XX]*_FAK1
ELSE
IF(_FCZ_P==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_XX]*_FAK1+$C_Z
ENDIF
ENDIF
IF(_FCX_P==0)
_FCX=$P_EP[_YY]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_YY]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P>0)
_ZFPR[10]=$C_Y
IF(_FCY_P==1)
_FCY=$C_Y _ZFPI[2]=1
ELSE
_FCY=_ZFPR[1]+$C_Y _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCY=_ZFPR[2]
ELSE
_FCY=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCZ _BP2=_FCX _ZFPR[2]=_FCY
GOTOF _MBPE
_MG17:
IF(_FCX_P==0)
_FCX=$P_EP[_XX]*_FAK1
ELSE
IF(_FCX_P==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_XX]*_FAK1+$C_X
ENDIF
ENDIF
IF(_FCY_P==0)
_FCY=$P_EP[_YY]*_FAK1
ELSE
IF(_FCY_P==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_YY]*_FAK1+$C_Y
ENDIF
ENDIF
IF(_FCZ_P>0)
_ZFPR[10]=$C_Z
IF(_FCZ_P==1)
_FCZ=$C_Z _ZFPI[2]=1
ELSE
_FCZ=_ZFPR[1]+$C_Z _ZFPI[2]=3
ENDIF
ELSE
IF(_FIRST==1)GOTOF _FEHL4
IF (_ZFPI[2]==1)
_FCZ=_ZFPR[2]
ELSE
_FCZ=_ZFPR[1]+_ZFPR[10]
ENDIF
ENDIF
_BP1=_FCX _BP2=_FCY _ZFPR[2]=_FCZ
_MBPE:
ENDIF
_G98=$P_EXTGG[10]
IF (_ZFPI[0]==87) ;bei G87 kein Unterschied zwischen G98/G99
_ZFPR[3]=_INIZ
ELSE
IF(_G98==1)
_ZFPR[3]=_INIZ
ELSE
IF (_ZFPR[0]<_ZFPR[2])
_ZFPR[3]=_ZFPR[1]-ABS(_ZSFR[0])
ELSE
_ZFPR[3]=_ZFPR[1]+ABS(_ZSFR[0])
ENDIF
ENDIF
ENDIF
_NAAX=0
IF($C_A_PROG>0)
_NAMEAX[_NAAX]="A" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCA_P==0)
_FCNN[_NAAX]=$P_EP[A]*_FAK1
ELSE
IF(_FCA_P==1)
_FCNN[_NAAX]=$C_A
ELSE
_FCNN[_NAAX]=$P_EP[A]*_FAK1+$C_A
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_B_PROG>0)
_NAMEAX[_NAAX]="B" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCB_P==0)
_FCNN[_NAAX]=$P_EP[B]*_FAK1
ELSE
IF(_FCB_P==1)
_FCNN[_NAAX]=$C_B
ELSE
_FCNN[_NAAX]=$P_EP[B]*_FAK1+$C_B
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_C_PROG>0)
_NAMEAX[_NAAX]="C" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCC_P==0)
_FCNN[_NAAX]=$P_EP[C]*_FAK1
ELSE
IF(_FCC_P==1)
_FCNN[_NAAX]=$C_C
ELSE
_FCNN[_NAAX]=$P_EP[C]*_FAK1+$C_C
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_U_PROG>0)
_NAMEAX[_NAAX]="U" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCU_P==0)
_FCNN[_NAAX]=$P_EP[U]*_FAK1
ELSE
IF(_FCU_P==1)
_FCNN[_NAAX]=$C_U
ELSE
_FCNN[_NAAX]=$P_EP[U]*_FAK1+$C_U
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_V_PROG>0)
_NAMEAX[_NAAX]="V" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCV_P==0)
_FCNN[_NAAX]=$P_EP[V]*_FAK1
ELSE
IF(_FCV_P==1)
_FCNN[_NAAX]=$C_V
ELSE
_FCNN[_NAAX]=$P_EP[V]*_FAK1+$C_V
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF($C_W_PROG>0)
_NAMEAX[_NAAX]="W" _AXE=0 _AXFOUND=0
WHILE (_AXE<_AXNUM)
IF ($MC_AXCONF_CHANAX_NAME_TAB[_AXE]==_NAMEAX[_NAAX])
_AXFOUND=1
IF ($MC_AXCONF_MACHAX_USED[_AXE]>0)
IF (($MA_IS_ROT_AX[AXNAME(_NAMEAX[_NAAX])]==1)AND($MA_ROT_IS_MODULO[AXNAME(_NAMEAX[_NAAX])]==1))
_MODAX[_NAAX]=1
ELSE
_MODAX[_NAAX]=0
ENDIF
ELSE
GOTOF _FEHL7
ENDIF
ELSE
ENDIF
_AXE=_AXE+1
ENDWHILE
IF (_AXFOUND==0) GOTOF _FEHL7
IF(_FCW_P==0)
_FCNN[_NAAX]=$P_EP[W]*_FAK1
ELSE
IF(_FCW_P==1)
_FCNN[_NAAX]=$C_W
ELSE
_FCNN[_NAAX]=$P_EP[W]*_FAK1+$C_W
ENDIF
ENDIF
_NAAX=_NAAX+1
ENDIF
IF((_NAAX>6)OR(_NAAX<0)) GOTOF _FEHL7
IF(_FIRST==1)
CYCLE218(1)
ENDIF
_PAR1=_FCX_P+_FCY_P+_FCZ_P+_FCA_P+_FCB_P+_FCC_P+_FCU_P+_FCV_P+_FCW_P
IF(_PAR1==0)GOTOF _KBOHR
SBLOF
IF $MCS_ISO_SIMULTAN_AXES_START==0
SBLON
IF ($P_EXTGG[17]==2)
G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]
ELSE
G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]
ENDIF
_II=0
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
AX[AXNAME(_NAMEAX[_II])]=AC(_FCNN[_II]) F=_ZFPR[4]
ELSE
AX[AXNAME(_NAMEAX[_II])]=DC(_FCNN[_II]) F=_ZFPR[4]
ENDIF
_II=_II+1
ENDWHILE
SBLOF
ELSE
_II=0 _MODANZ=0 _NOMODANZ=0 _TRAVSTR=""
IF ($P_EXTGG[17]==2)
_TRAVSTR="G00 G40 RP=_BP1 AP=_BP2 F=_ZFPR[4]"
ELSE
_TRAVSTR="G00 G40 AX[_XX]=AC(_BP1) AX[_YY]=AC(_BP2) F=_ZFPR[4]"
ENDIF
WHILE(_II<_NAAX)
IF(_MODAX[_II]==0)
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=AC(" << _FCNN[_II] << ")"
ELSE
_TRAVSTR = _TRAVSTR << " " << _NAMEAX[_II] << "=DC(" << _FCNN[_II] << ")"
ENDIF
_II=_II+1
ENDWHILE
SBLON
EXECSTRING(_TRAVSTR)
SBLOF
ENDIF
IF(_FCK0==1)GOTOF _KBOHR
IF(_ZFPI[0])==76
IF(_ZFPR[1]<_ZFPR[2]) GOTOF _FEHL6
ELSE
IF(_ZFPR[2]<_ZFPR[1]) GOTOF _FEHL6
ENDIF
CASE _ZFPI[0] OF 76 GOTOF _C76 87 GOTOF _C87 DEFAULT GOTOF _KBOHR
_C76:
CYCLE86(_ZFPR[3],_ZFPR[1],_ZSFR[0],_ZFPR[2],0,_ZFPR[5],_ZFPI[1],_ZFPR[8],_ZFPR[11],0,_POSS)
GOTOF _KBOHR
_C87:
CYCLE861(_ZFPR[3],_ZFPR[1],0,_ZFPR[2],0,_ZFPR[5],_ZFPI[1],_ZFPR[8],_ZFPR[11],0,_POSS)
_KBOHR: M=_ZFPI[1]
_FIRST=0
ENDFOR
IF $MCS_ISO_ENABLE_INTERRUPTS==1
IF $MN_EXTERN_INTERRUPT_BITS_M96 B_AND 'B1'
ENABLE(1)
IF $AC_PARAM[1]==1
$A_OUT[1]=0
$A_OUT[1]=1
ENDIF
ENDIF
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N308701 SETAL(61800)
RET
_FEHL2: STOPRE
N308702 SETAL(61003)
RET
_FEHL4: STOPRE
N308704 SETAL(61808)
RET
_FEHL5: STOPRE
N308705 SETAL(61814)
RET
_FEHL6: STOPRE
N308706 SETAL(61101)
RET
_FEHL7: STOPRE
N308707 SETAL(61803)
RET
_FEHL9: STOPRE
N308709 SETAL(61813)
RET
_RET:
IF (_TRC==2)
G41
ENDIF
IF (_TRC==3)
G42
ENDIF
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE395_SPF
PROC CYCLE395(STRING[140] NPP,REAL MID,REAL FALZ,REAL FALX,REAL FAL,REAL FF1,REAL FF2,REAL FF3,INT VARI,REAL DT,REAL DAM,REAL _VRT,INT _GMODE,INT _DMODE) SAVE DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.24.00.00.002 ;DATE: 2024-02-27
;ISO-T roughing
N10 DEF AXIS _ZA,_SA
N11 DEF REAL _KT[201,11]
N12 DEF INT _KTL=200,_ZRF=1,_SRF=1,IA=1,LP,SLR,AKE,AZI,ZLE,FMX,ZMX,ZUA,ZUE,ZHN,_NS,_LS,ZFE,IH1,IH2,IH3,IH4=2,IH5=0,IH6,IH7,IH8,II,PLAN,_MK[16],_PTABA=0,_PTABE,_VR,_LSNEU
N13 DEF INT _ZMXN,_MERKIH1=1,_MSPL=20,_IH1,_II,_MERK_CDON,_IS_CYCFR,_ZZSD[15],_DMODE1,_DMODE4,_TYP,_GG10,_GG29,_GG7=1,_ZSD13I
N131 DEF INT _NCVCYCFR=480200,_HS=1,_VVARI,_G91,_TYPI,_IH1F=0,_TYPIS=0,_TESTVARI
N14 DEF INT _ARTIS[16]
N15 DEF REAL TAK[6]=(0,0,1,1,0),ATT,HH1,HH2,HH3,HH4,HH5,HH6,ZT[4,11],ZSP[4],HEA[6],SEC[2],LSP[3,2],SM[2],SAB[7],_DB,_ATTAB,_EPS=0.001
N151 DEF REAL _WSEC[2],_HMISO,_TYPIV
N16 DEF REAL _MERKSP[20,6],_MERKWZR,_NZP[2],_DH,_RE_TR[2],_FAK1,_VRT_R
N17 DEF STRING[32] _SLA,_SLE
N18 DEF STRING[100] _PNAME
N19 DEF STRING[250] _SERR
N20 DEF BOOL FLAG
N21 DEF CHAR BTA="L"
N22 DEF FRAME _OLDFR
DEF INT _TEMP,_LOG_ON
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE395_MPF"
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE395_MPF")
_LOG_ON=1
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
IF (($MN_MM_EXTERN_CNC_SYSTEM==5)AND($P_ISO3_DNO>0)AND($P_ISO3_DNO<99))
WRITE(_TEMP,_TEMP_FILE,";ISO 3.2")
WRITE(_TEMP,_TEMP_FILE,";Toolnumber="<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$P_ISO3_DNO="<<$P_ISO3_DNO<<"   ; active D number")
WRITE(_TEMP,_TEMP_FILE,";$TC_ISO_R["<<$P_ISO3_DNO<<"]="<<$TC_ISO_R[$P_ISO3_DNO]<<"     ; TOOL-RADIUS")
WRITE(_TEMP,_TEMP_FILE,";$TC_ISO_RW["<<$P_ISO3_DNO<<"]="<<$TC_ISO_RW[$P_ISO3_DNO]<<"     ; TOOL-RADIUS-WEAR")
WRITE(_TEMP,_TEMP_FILE,";$TC_ISO_Q["<<$P_ISO3_DNO<<"]="<<$TC_ISO_Q[$P_ISO3_DNO]<<"     ; EDGE-POSITION")
ELSE
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
ENDIF
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,"_ZSD[0]="<<_ZSD[0]<<"  ; Bewertung MID")
WRITE(_TEMP,_TEMP_FILE,"CYCLE395("<<"'"'"<<NPP<<"'"'"<<","<<MID<<","<<FALZ<<","<<FALX<<","<<FAL<<","<<FF1<<","<<FF2<<","<<FF3<<","<<VARI<<","<<DT<<","<<DAM<<","<<_VRT<<","<<_GMODE<<","<<_DMODE<<")")
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF ($SCS_ISO_T_FUNCTION_MASK B_AND 'B10')
_ZSD13I=1
ENDIF
IF (_ZSD13I==1)
IF VARI MOD 1000 < 100
VARI=VARI+200
_MK[10]=2
ENDIF
ENDIF
IH1=VARI DIV 1000
IF IH1>2 GOTOF FEHL6
IF IH1==1
_MK[9]=1 VARI=VARI MOD 100
ENDIF
IF IH1==2
_MK[9]=2 VARI=VARI MOD 100
ENDIF
IF (VARI==0)OR(VARI>12) GOTOF FEHL6
_VVARI=VARI
IF (($MC_MM_SYSTEM_FRAME_MASK B_AND 'B100000') AND ($AN_NCK_VERSION>=480300))
_IS_CYCFR=1
ENDIF
IF(_HS==0)
N10 IF $P_TOOL==0
IF $P_SIM==0
GOTOF FEHL1
ELSE
T0
ENDIF
ENDIF
ENDIF
N11 ATT=$P_TOOLR
N12 IF $P_TOOLNO<>0
IF (($MN_MM_EXTERN_CNC_SYSTEM==5)AND($P_ISO3_DNO>0)AND($P_ISO3_DNO<99))
SBLOF
_MK[4]=$TC_ISO_Q[$P_ISO3_DNO]
SBLON
ELSE
_MK[4]=$P_ADT[2]
SBLON
ENDIF
ENDIF
IF _VRT==0
IF ($P_GG[13]==2) OR ($P_GG[13]==4)
_VRT=1
ELSE
_VRT=1/$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
_ZA=$P_AXN2 _SA=$P_AXN1 ZT[0,2]=11 ZT[1,2]=11 IH1=(VARI-1) MOD 4 II=VARI-IH1 SM[0]=FALZ+FAL SM[1]=FALX+FAL LP=VARI MOD 2 VARI=II _PTABE=_KTL
_GG10=$P_GG[10]
IF _GG10<2
_GG10=2
ENDIF
_GG29=$P_GG[29]
IF(($P_GG[29]==1) OR ($P_GG[29]==4))
PLAN=1
ELSE
PLAN=2
DIAMON
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF LP GOTOF _MAX1
_ZA=$P_AXN1 _SA=$P_AXN2 BTA="P" SM[0]=FALX+FAL SM[1]=FALZ+FAL
_MAX1:IF IH1<2 GOTOF _M1
IA=-1 BTA="G"
IF LP GOTOF _M1
BTA="N"
_M1:_DMODE4=_DMODE _DEC4
IF ((_DMODE4<0) OR (_DMODE4>1)) GOTOF _FEHL8
IF (((NPP<>"") AND (_DMODE4==1)) OR ((NPP=="") AND (_DMODE4==0))) GOTOF _FEHL10
IF (_DMODE4==1) GOTOF _CONTNEW62
IH2=STRLEN(NPP) IH1=0
FOR II=0 TO IH2
IF SUBSTR(NPP,II,1)==":"
IF IH1<>0
GOTOF _M5201
ENDIF
IH1=II
ENDIF
ENDFOR
_M5201:
IF IH1==0 GOTOF _M5202
IF (IH1<>0) AND (II==STRLEN(NPP))
_SLA=SUBSTR(NPP,0,IH1) _SLE=SUBSTR(NPP,IH1+1,IH2-IH1-1)
ELSE
_PNAME=SUBSTR(NPP,0,IH1)
_SLA=SUBSTR(NPP,IH1+1,II-IH1-1)
_SLE=SUBSTR(NPP,II+1,STRLEN(NPP)-II-1)
ENDIF
_M5202: GOTOF _ENDCONTNEW
_CONTNEW62:
IF ISVAR("_SC_LAST_CONT")
IF (_SC_LAST_CONT>1) OR (_SC_FIRST_CONT<>1)
GOTOF _FEHL16
ELSE
IF (STRLEN(_SC_CONT_NAME[_SC_FIRST_CONT-1])>100)
_SERR=<<_SC_CONT_NAME[_SC_FIRST_CONT-1]
GOTOF _FEHL21
ENDIF
_PNAME=_SC_CONT_NAME[_SC_FIRST_CONT-1]
_SLA=_SC_CONT_LAB1[_SC_FIRST_CONT-1]
_SLE=_SC_CONT_LAB2[_SC_FIRST_CONT-1]
ENDIF
ELSE
ENDIF
_ENDCONTNEW:
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF $MN_SCALING_SYSTEM_IS_METRIC
IF $P_GG[13]==1
TAK[3]=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF $P_GG[13]==2
TAK[3]=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
IF ($P_GG[13]==1) OR ($P_GG[13]==3)
_EPS=0.000025
ENDIF
_MERK_CDON=$P_GG[23]
CDOF
IF _SC_TOOL_VALI[0]<>0
_ARTIS[0]=_SC_TOOL_VALI[0] _ARTIS[1]=_SC_TOOL_VALI[1] _ARTIS[2]=_SC_TOOL_VALI[2] _ARTIS[3]=_SC_TOOL_VALI[3] _ARTIS[4]=_SC_TOOL_VALI[4] _ARTIS[5]=_SC_TOOL_VALI[5] _ARTIS[6]=_SC_TOOL_VALI[6]
_ARTIS[7]=_SC_TOOL_ON_OFF[0] _ARTIS[8]=_SC_TOOL_ON_OFF[1]
IF (_ARTIS[0] MOD 10 <>1 )
GOTOF _FEHL15
ENDIF
_II=_ARTIS[0] DIV 10
IF ((_II MOD 10 > 3) OR (_II MOD 10 < 1))
GOTOF _FEHL15
ELSE
_ARTIS[11]=_II MOD 10
IF (_ARTIS[3]<>0)
_ARTIS[13]=_ARTIS[1]
ENDIF
IF (_ARTIS[6]<>0)
_ARTIS[14]=_ARTIS[4]
ENDIF
ENDIF
_II=_II DIV 10
IF ((_II MOD 10 > 2) OR (_II MOD 10 < 0))
GOTOF _FEHL15
ELSE
_ARTIS[12]=_II MOD 10
ENDIF
ENDIF
SBLOF
IF(($AN_NCK_VERSION>=_NCVCYCFR)AND(($MC_MM_SYSTEM_FRAME_MASK B_AND 'B100000')<>'B100000')) GOTOF _FEHL20
SBLON
_PTABE=_KTL
_TESTVARI=_VVARI
_ISONOCHMAL:
VARI=_VVARI
_ZA=$P_AXN2 _SA=$P_AXN1 ZT[0,2]=11 ZT[1,2]=11 ZT[2,2]=11 ZT[3,2]=11 IH1=(VARI-1) MOD 4 II=VARI-IH1 SM[0]=FALZ+FAL SM[1]=FALX+FAL LP=VARI MOD 2 VARI=II
N15 _KT[0,0]=REP(0)
IF LP GOTOF _MAX1
_ZA=$P_AXN1 _SA=$P_AXN2 BTA="P" SM[0]=FALX+FAL SM[1]=FALZ+FAL
_MAX1:IF IH1<2 GOTOF _M1
IA=-1 BTA="G"
IF LP GOTOF _M1
BTA="N"
_M1:
IF LP==1
IF $C_U>=0
IF $C_W>=0
_MK[15]=2
ELSE
_MK[15]=1
ENDIF
ELSE
IF $C_W>=0
_MK[15]=3
ELSE
_MK[15]=4
ENDIF
ENDIF
IF (_LOG_ON==1)
WRITE(_TEMP,_TEMP_FILE,";Aufruf G71")
ENDIF
ELSE
IF $C_U>=0
IF $C_W>=0
_MK[15]=3
ELSE
_MK[15]=4
ENDIF
ELSE
IF $C_W>=0
_MK[15]=2
ELSE
_MK[15]=1
ENDIF
ENDIF
IF (_LOG_ON==1)
WRITE(_TEMP,_TEMP_FILE,";Aufruf G72")
ENDIF
ENDIF
IF (_LOG_ON==1)
WRITE(_TEMP,_TEMP_FILE,";Kontur im Quadrant: "<<_MK[15])
WRITE(_TEMP,_TEMP_FILE,";U="<<$C_U<<" W="<<$C_W)
IF (ISVAR("$SCS_ISO_T_FUNCTION_MASK"))
WRITE(_TEMP,_TEMP_FILE,";SD55819 $SCS_ISO_T_FUNCTION_MASK="<<$SCS_ISO_T_FUNCTION_MASK)
WRITE(_TEMP,_TEMP_FILE,";Bit0 ==> 0: mit Resteckenschnitt 1: ohne Resteckenschnitt")
WRITE(_TEMP,_TEMP_FILE,";Bit1 ==> 0: Schruppen G41/G42, 1: Schruppen G40")
ELSE
WRITE(_TEMP,_TEMP_FILE,";SD55819 $SCS_ISO_T_FUNCTION_MASK nicht vorhanden")
WRITE(_TEMP,_TEMP_FILE,";_ZSFI[35]="<<_ZSFI[35]<<" 0: Schruppen G41/G42, 1: G40")
WRITE(_TEMP,_TEMP_FILE,";_ZSFI[36]="<<_ZSFI[36]<<" 0: mit Resteckenschnitt, 1: ohne")
ENDIF
WRITE(_TEMP,_TEMP_FILE,";_ZSD13I="<<_ZSD13I<<" internes Abbild von SD55819 Bit1 bzw. _ZSFI[35]")
ENDIF
_TYPI=1
G[29]=_GG29
N2 CONTPRON(_KT,BTA,IH2,1)
IF _MK[9]>0
N195 G291
ENDIF
N20 CALL _PNAME BLOCK _SLA TO _SLE
IF _MK[9]>0
N196 G290
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF((_VVARI==1)OR(_VVARI==3))
G01 G90 AX[_ZA]=_ZFPR[33]
ELSE
G01 G90 AX[_ZA]=_ZFPR[34]
ENDIF
IF(_G91==1)
G91
ENDIF
N21 EXECUTE(II)
G290
IF II==1 GOTOF FEHL4
IF $P_GG[29]==3
N22 DIAMON
ENDIF
IF ABS(_KT[0,(3+LP)]-_KT[0,(5+LP)]) < _EPS GOTOF FEHL51
IF _KT[0,(3+LP)]>_KT[0,(5+LP)]
IF LP==1
_TESTVARI=1
ELSE
_TESTVARI=2
ENDIF
ELSE
IF LP==1
_TESTVARI=3
ELSE
_TESTVARI=4
ENDIF
ENDIF
IF _TESTVARI <> _VVARI
IF ABS(SM[1])<_EPS
_VVARI=_TESTVARI
GOTOB _ISONOCHMAL
ELSE
GOTOF FEHL52
ENDIF
ENDIF
HH1=_KT[0,0] HH2=_KT[0,5+LP]-_KT[HH1,3+LP] HH3=_KT[0,6-LP]-_KT[HH1,4-LP]
IF LP==1
IF _MK[15]==1
IF NOT((HH2<=0) AND (HH3<0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
IF _MK[15]==2
IF NOT((HH2<=0) AND (HH3>0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
IF _MK[15]==3
IF NOT((HH2>=0) AND (HH3>0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ELSE
IF NOT((HH2>=0) AND (HH3<0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
ELSE
IF _MK[15]==1
IF NOT((HH2>=0) AND (HH3<0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
IF _MK[15]==2
IF NOT((HH2<=0) AND (HH3<0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
IF _MK[15]==3
IF NOT((HH2<=0) AND (HH3>0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ELSE
IF NOT((HH2>=0) AND (HH3>0))
GOTOF FEHL3
ELSE
GOTOF _AUSWE2
ENDIF
ENDIF
ENDIF
_AUSWE2:
IF(((_KT[0,2] MOD 10)==0)AND(_HS==1)AND(_MK[9]==1)AND(_KT[0,4]<>_KT[0,6])AND(_KT[0,3]<>_KT[0,5]))
_TYPIS=1
ENDIF
IF(((_KT[0,2] MOD 10)<>0)AND(_HS==1)AND(_MK[9]==1))
_TYPI=2
_KT[0,0]=REP(0)
IF((_VVARI==1)OR(_VVARI==3))
IF((_VVARI==1)OR(_VVARI==2))
G0 G91 AX[_ZA]=(3*_EPS)
ELSE
G0 G91 AX[_ZA]=-(3*_EPS)
ENDIF
ELSE
IF((_VVARI==1)OR(_VVARI==2))
G0 G91 AX[_ZA]=(3*_EPS)
ELSE
G0 G91 AX[_ZA]=-(3*_EPS)
ENDIF
ENDIF
G[29]=_GG29
N2 CONTPRON(_KT,BTA,IH2,1)
IF((_VVARI==1)OR(_VVARI==3))
IF((_VVARI==1)OR(_VVARI==2))
G0 G91 AX[_ZA]=-(3*_EPS)
ELSE
G0 G91 AX[_ZA]=(3*_EPS)
ENDIF
ELSE
IF((_VVARI==1)OR(_VVARI==2))
G0 G91 AX[_ZA]=-(3*_EPS)
ELSE
G0 G91 AX[_ZA]=(3*_EPS)
ENDIF
ENDIF
IF(_G91==0)
G90
ENDIF
IF _MK[9]>0
N195 G291
ENDIF
N20 CALL _PNAME BLOCK _SLA TO _SLE
IF _MK[9]>0
N196 G290
ENDIF
IF($P_GG[14]==2)
_G91=1
ELSE
_G91=0
ENDIF
IF((_VVARI==1)OR(_VVARI==3))
G01 G90 AX[_ZA]=_ZFPR[33]
ELSE
G01 G90 AX[_ZA]=_ZFPR[34]
ENDIF
IF(_G91==1)
G91
ENDIF
N21 EXECUTE(II)
IF II==1 GOTOF FEHL4
ENDIF
SBLON
IF $P_GG[29]==3
N22 DIAMON
ENDIF
HH1=_KT[0,5+LP] HH2=_KT[_PTABE,1] HH2=_KT[HH2,3+LP] HH3=HH2-HH1
IF ABS(HH3)<_EPS
ZLE=_KT[0,0] AKE=_KT[0,1] _KT[0,1]=1 _KT[ZLE,1]=0 _PTABA=0 _VR=0
_MK[0]=_KT[AKE+1,0]
GOTOF _AUSWE
ELSE
IF (HH3*IA>0)
ZLE=_KT[0,0] AKE=_KT[0,1] _KT[0,1]=1 _KT[ZLE,1]=0 _PTABA=0 _VR=0
_MK[0]=_KT[AKE+1,0]
GOTOF _AUSWE
ELSE
ZLE=_PTABE-1 AKE=_PTABE-_KT[_PTABE,0] _PTABA=_KT[_PTABE,1] _VR=1 _MK[0]=_KT[0,1]+1 _MK[0]=_KT[_MK[0],1]
_SZLE:
IF _KT[ZLE,1]==0
GOTOF _AUSWE
ENDIF
ZLE=_KT[ZLE,1]
GOTOB _SZLE
GOTOF _AUSWE
ENDIF
ENDIF
_AUSWE:
IF((_TYPIS==1)AND(_VR==1)) GOTOF FEHL3
IH1=$P_GG[13] IH1=IH1 MOD 2
IF IH1==1
ZT[0,2]=1 ZT[1,2]=1 ZT[2,2]=1 ZT[3,2]=1
ENDIF
HH6=1/$MN_INT_INCR_PER_MM
IF ($MN_INT_INCR_PER_MM==1000)
HH6=0.0001
ENDIF
_SUCHEPS:
IF NOT _VR
II=1
ELSE
II=_PTABA
ENDIF
_NEXT_II:
IF (ABS(_KT[II,5+LP]-_KT[II,3+LP])<HH6)
IH7=_KT[II,1]
_KT[II,5+LP]=_KT[II,3+LP] _KT[IH7,3+LP]=_KT[II,5+LP]
ENDIF
IF (ABS(_KT[II,5+LP]-_KT[II,3+LP])<_EPS) AND (NOT (_KT[II,3+LP]==_KT[II,5+LP]))
_EPS=_EPS/10
GOTOB _SUCHEPS
ENDIF
II=_KT[II,1]
IF NOT (II==ZLE) GOTOB _NEXT_II
_MAX3:ZFE=ZLE HH1=_KT[0,4-LP]
IF NOT _VR
HH2=_KT[0,6-LP] HH3=_KT[ZLE,6-LP]
ELSE
HH2=_KT[_PTABA,4-LP] HH3=_KT[ZLE,6-LP]
ENDIF
IF $P_SUBPAR[13]
IF ((_GMODE _DEC1 >1) OR (_GMODE <0))
GOTOF _FEHL17
ENDIF
_ZZSD[0]=_GMODE _DEC1
ELSE
IF (_ZSD[0]<>-1)
_ZZSD[0]=_ZSD[0]
ENDIF
ENDIF
IF _ZZSD[0]==0 GOTOF _MY30
IF NOT(($MC_DIAMETER_AX_DEF=="") OR ($MC_DIAMETER_AX_DEF==" "))
IF _ZA==AXNAME($MC_DIAMETER_AX_DEF)
MID=MID*PLAN/_ZZSD[0]
ENDIF
ENDIF
_MY30:IF ((HH1-HH2)*(HH1-HH3)<0) AND ((_KT[0,3+LP]-_KT[0,5+LP])*(_KT[0,3+LP]-_KT[ZLE,5+LP])<0) GOTOF FEHL5
IF PLAN==1 GOTOF _MQ3
IF NOT(($MC_DIAMETER_AX_DEF=="") OR ($MC_DIAMETER_AX_DEF==" "))
IF _ZA==AXNAME($MC_DIAMETER_AX_DEF)
MID=MID/2 SM[1]=SM[1]/2 _ZRF=PLAN
GOTOF _MQ3
ENDIF
ENDIF
IF NOT(($MC_DIAMETER_AX_DEF=="") OR ($MC_DIAMETER_AX_DEF==" "))
IF _SA==AXNAME($MC_DIAMETER_AX_DEF)
SM[0]=SM[0]/2 _SRF=PLAN
ENDIF
ENDIF
N30 _MQ3:ATT=ATT*TAK[3] HH4=1/$P_ACTFRAME[_ZA,SC] HH5=1/$P_ACTFRAME[_SA,SC]
IF NOT((HH2-HH3)==0)
SLR=(HH2-HH3)/ABS(HH2-HH3)
ELSE
SLR=1
ENDIF
SAB[LP]=_VRT*IA*HH4 SAB[1-LP]=_VRT*SLR*HH5
SAB[2+LP]=IA*ATT*HH4+SAB[LP] SAB[3-LP]=SLR*ATT*HH5+SAB[1-LP] SAB[4]=2*IA*ATT*HH4
_MERKWZR=ATT
IF(_TYPIS==0)
ZSP[1-LP]=HH2+SLR*HH5*(_VRT+2*ATT) ZSP[LP]=_KT[ZLE,5+LP]+SAB[2+LP]
_TYPIV=0
ELSE
IF(LP==1)
HH6=ATAN2(ABS(_KT[0,4]-_KT[0,6]),ABS(_KT[0,3]-_KT[0,5]))
HH6=SQRT(ABS(POT(ATT/SIN((180-HH6)/2))-POT(ATT)))+ATT
ZSP[1-LP]=_KT[0,4-LP]+(SLR*HH5*(_VRT+HH6)) ZSP[LP]=_KT[ZLE,5+LP]+SAB[2+LP]
_TYPIV=(SLR*HH5*(_VRT+HH6))
ELSE
HH6=ATAN2(ABS(_KT[0,3]-_KT[0,5]),ABS(_KT[0,4]-_KT[0,6]))
HH6=SQRT(ABS(POT(ATT/SIN((180-HH6)/2))-POT(ATT)))+ATT
ZSP[1-LP]=_KT[0,4-LP]+(SLR*HH5*(_VRT+HH6)) ZSP[LP]=_KT[ZLE,5+LP]+SAB[2+LP]
_TYPIV=(SLR*HH5*(_VRT+HH6))
ENDIF
ENDIF
ZSP[3-LP]=HH2+SLR*HH5*(_VRT) ZSP[2+LP]=_KT[ZLE,5+LP]+SAB[LP]
SM[0]=SM[0]*SLR*_SRF SM[1]=SM[1]*IA*_ZRF _MK[5]=42
IF LP AND(IA*SLR>0)OR(LP==0)AND(IA*SLR<0) GOTOF _YA3
_MK[5]=41
_YA3:
IF ((VARI==5) AND (_VR==1))
_MK[13]=1
ZLE=_KT[0,0] AKE=_KT[0,1] _KT[0,1]=1 _KT[ZLE,1]=0 _PTABA=0 _VR=0
_MK[0]=_KT[AKE+1,0]
IF _MK[5]==41
_MK[5]=42
ELSE
_MK[5]=41
ENDIF
ENDIF
IF _ZSD13I==0
_GG7=_MK[5]-39
ELSE
_GG7=1
ENDIF
_MBX3:ZT[0,4-LP]=ZSP[1-LP] ZT[0,6-LP]=HH3-SLR*10 ZMX=ZLE II=_PTABA
_DB=2*SLR*ATT+2*SM[0] _DH=ABS(SM[1])
IF _MK[0]==0 GOTOF _MAX4
_MCX3:FMX=_KT[II,7] II=_KT[II,1]
IF FMX==0 GOTOB _MCX3 IF FMX>0 GOTOF _MDX3
FMX=ABS(FMX)
GOTOF _MEX3
_MDX3:FMX=_KT[II,0]
_MEX3:II=1 HH3=FMX ZMX=FMX HH4=_KT[ZLE,5+LP] HH1=ABS(HH4-_KT[FMX,3+LP])
IF II==_MK[0] GOTOF _MAX4
_MFX3:HH3=ABS(_KT[HH3,7]) HH3=ABS(_KT[HH3,7]) HH2=ABS(HH4-_KT[HH3,3+LP]) II=II+1
IF HH2>=HH1 GOTOF _MHX3 IF HH2>=_EPS GOTOF _MXG3
ZFE=HH3
GOTOF _MAX4
_MXG3:ZMX=HH3 HH1=HH2
_MHX3:IF II<_MK[0] GOTOB _MFX3
_MAX4:HH1=0 II=_PTABA IH1=IA*SLR IH2=1 HH4=0
IF _VR==0
II=_KT[II,1]
ENDIF
N40 IF $P_TOOLNO==0 GOTOF _MBX4
IF (($MN_MM_EXTERN_CNC_SYSTEM==5)AND($P_ISO3_DNO>0)AND($P_ISO3_DNO<99)) GOTOF _MBX4
IF _TYPI==2
II=_KT[II,1]
ENDIF
HH1=$P_AD[24]
SBLOF
IF ($AN_NCK_VERSION>=430100)
HH1=$P_ADT[24]
ENDIF
SBLON
IF _MK[13]==1
HH1=0
ENDIF
_MBX4:HH2=_KT[II,8] HH3=_KT[II,7] HH5=(90-HH2)*IH1
IH6=_KT[II,2]
IF ( (IH6 MOD 10)==0 )
_KT[II,2]=_KT[II,2]+1
ENDIF
IF ( (IH6 MOD 10)>1)
IF SQRT((_KT[II,3]-_KT[II,5])*(_KT[II,3]-_KT[II,5])+(_KT[II,4]-_KT[II,6])*(_KT[II,4]-_KT[II,6]))<=0.0015
IF IH6==2
_KT[II,2]=_KT[II,2]-1
ELSE
_KT[II,2]=_KT[II,2]-2
ENDIF
ENDIF
ENDIF
IF (((IH6 MOD 10)>1) AND ((VARI<5) OR (VARI>8)))
IF ABS( _KT[II,3+LP]-_KT[II,5+LP] ) < _EPS
IH6=_KT[II,0]
IF ((_KT[IH6,8]<90)AND(_KT[II,8]>90)AND(_KT[IH6,2]==_KT[II,2]))
_KT[IH6,5+LP]=_KT[II,5+LP] _KT[II,3+LP]=_KT[II,5+LP]
IH6=_KT[II,2] _KT[II,2]=( IH6 DIV 10) * 10 + 1
ENDIF
ENDIF
ENDIF
IF ((ABS( _KT[II,3+LP]-_KT[II,5+LP] )<_EPS) AND ((_KT[II,3+LP]-_KT[II,5+LP])*IA>0))
IH6=_KT[II,0]
IF ( (_KT[II,2]==_KT[IH6,2]) AND (_KT[II,9]==_KT[IH6,9]) AND (_KT[II,10]==_KT[IH6,10]) )
_KT[IH6,5]=_KT[II,5] _KT[IH6,6]=_KT[II,6]
_KT[IH6,1]=_KT[II,1]
IH6=_KT[II,1] _KT[IH6,0]=_KT[II,0]
ENDIF
ENDIF
IF (HH3<0) AND NOT (HH3==-1111)
IH7=ABS(HH3) IH8=_KT[IH7,7]
IF ABS(_KT[IH7,3+LP]-_KT[IH8,3+LP])<=0.0015
_MK[0]=_MK[0]-1
_KT[II,7]=_KT[IH8,7] _KT[IH7,7]=0 _KT[IH8,7]=0 _KT[IH7,8]=0
IF IH7==FMX
FMX=ABS(_KT[II,7])
ENDIF
ENDIF
ENDIF
IF (_MK[0]==0) OR (ABS(HH1)<_EPS) GOTOF _A4
IF IH1>=0 GOTOF _MCX4
HH2=180-HH2
_MCX4:IF HH3<=0 GOTOF _MDX4
IH2=1
GOTOF _MEX4
_MDX4:IF HH3==0 GOTOF _MEX4
IH2=0
_MEX4:IF (HH2>90)OR(HH1==0)OR(HH2==0) GOTOF _MXG4
IF HH2==90
IF (_KT[II,3+LP]-_KT[II,5+LP])*IA>0
IF ((_KT[II,2]==1) OR (_KT[II,2]==11) OR (_KT[II,2]==0) OR (_KT[II,2]==10) OR (_KT[II,2]==21) OR (_KT[II,2]==20) OR (_KT[II,2]==31) OR (_KT[II,2]==30))
GOTOF FEHL2
ENDIF
ENDIF
GOTOF _MXG4
ENDIF
IF HH1-HH2<=0 GOTOF FEHL2
_MXG4:IF IH2==1 GOTOF _A4 IF (HH5<=0)OR(HH5>=90) GOTOF _A4 IF HH4>=HH5 GOTOF _A4
HH4=HH5
_A4:
IF ((_KT[II,2] MOD 10 < 2) AND (_KT[II,3+LP]==_KT[II,5+LP]))
IH6=_KT[II,1]
IF ((_KT[IH6,2] MOD 10 < 2) AND (_KT[IH6,3+LP]==_KT[IH6,5+LP]) AND (_KT[II,5+LP]==_KT[IH6,5+LP]))
IH6=II II=_KT[II,1] _KT[IH6,1]=_KT[II,1] _KT[IH6,6-LP]=_KT[II,6-LP]
ENDIF
ENDIF
II=_KT[II,1]
IF II<>ZLE GOTOB _MBX4
IH6=0
IF (_KT[II,2]==0) OR (_KT[II,2]==10) OR (_KT[II,2]==20) OR (_KT[II,2]==30)
_KT[II,2]=_KT[II,2]+1
ENDIF
IF VARI==5
IF HH4==0
GOTOF _MXX4
ENDIF
IF SM[1]==0
GOTOF _MXX4
ENDIF
IF HH4>=45
GOTOF FEHL3
ENDIF
ENDIF
_MXX4:
IF (ABS( _KT[ZLE,3+LP]-_KT[ZLE,5+LP])<=SAB[2+LP])
_II=_KT[ZLE,0]
IF (ABS(_KT[_II,3+LP]-_KT[_II,5+LP])<_EPS)
IF (ABS(_KT[_II,4-LP]-_KT[_II,6-LP])>2*ABS(SAB[3-LP]))
_MK[11]=1
ENDIF
ENDIF
ENDIF
_MAX5:IF VARI==5 GOTOF _MAX7
IF MID==0
GOTOF _FEHL19
ENDIF
ZT[1,3+LP]=-9999 ZT[1,5+LP]=9999
SBLOF
IF ($AN_NCK_VERSION>=_NCVCYCFR)
_OLDFR=$P_CYCFRAME
N5 $P_CYCFRAME=_OLDFR:CTRANS(_ZA,SM[1],_SA,SM[0])
ELSE
N5 ATRANS AX[_ZA]=SM[1] AX[_SA]=SM[0]
ENDIF
SBLON
ATT=ZSP[LP]-SAB[2+LP] ZSP[LP]=ZSP[LP]*_ZRF ZSP[1-LP]=ZSP[1-LP]*_SRF ZSP[2+LP]=ZSP[2+LP]*_ZRF ZSP[3-LP]=ZSP[3-LP]*_SRF
IF _VR==0
HH1=ABS(ATT-_KT[_PTABA,5+LP])-ABS(SM[1])
ELSE
HH1=ABS(ATT-_KT[_PTABA,3+LP])-ABS(SM[1])
ENDIF
IF HH1<=_EPS GOTOF _MAX6
IF(_ZSFI[37]<>0)
_MK[7]=1 AZI=HH1/MID+0.499 TAK[0]=HH1/AZI IH1=0 _NS=ZLE
ELSE
_MK[7]=1 AZI=HH1/MID+0.499 IH1=0 _NS=ZLE _HMISO=HH1
IF(HH1>MID)
TAK[0]=MID
ELSE
TAK[0]=HH1
ENDIF
ENDIF
_MERKIH1=TRUNC(ABS(SAB[4])/IH4/TAK[0])
IF _MERKIH1>=_MSPL
_MERKIH1=_MSPL-1
ENDIF
IF ((_MERKIH1==0) OR (_MK[10]>0))
_MERKIH1=1
ENDIF
IF ZFE==ZLE GOTOF _MXX5
_NS=_KT[ZFE,0]
_MXX5:SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6] _MK[1]=1
IF(_TYPIS==0)
N50 G0 G90 G64 G[7]=_GG7 NORM F=FF1 AX[_ZA]=ZSP[LP] AX[_SA]=ZSP[1-LP]
ELSE
IF((_VVARI==1)OR(_VVARI==3))
IF(IA==1)
IF((_ZFPR[33]/_ZRF)<_KT[_KT[0,0],5+LP]) GOTOF FEHL5
ELSE
IF((_ZFPR[33]/_ZRF)>_KT[_KT[0,0],5+LP]) GOTOF FEHL5
ENDIF
ELSE
IF(IA==1)
IF((_ZFPR[34]/_ZRF)<_KT[_KT[0,0],5+LP]) GOTOF FEHL5
ELSE
IF((_ZFPR[34]/_ZRF)>_KT[_KT[0,0],5+LP]) GOTOF FEHL5
ENDIF
ENDIF
IF(LP==1)
ZT[2,4]=ZSP[LP]*TAK[3]/_ZRF ZT[2,6]=ZSP[LP]*TAK[3]/_ZRF ZT[2,3]=-9999. ZT[2,5]=9999.
ZT[3,4]=_KT[0,4]+(_KT[0,4]-_KT[0,6])*10 ZT[3,6]=_KT[0,6]-(_KT[0,4]-_KT[0,6])*10
ZT[3,3]=_KT[0,3]+(_KT[0,3]-_KT[0,5])*10 ZT[3,5]=_KT[0,5]-(_KT[0,3]-_KT[0,5])*10
FLAG=INTERSEC(ZT[2],ZT[3],_WSEC)
IF(FLAG==0) GOTOF FEHL7
ELSE
ZT[2,3]=ZSP[LP]*TAK[3]/_ZRF ZT[2,5]=ZSP[LP]*TAK[3]/_ZRF ZT[2,4]=-9999. ZT[2,6]=9999.
ZT[3,4]=_KT[0,4]+(_KT[0,4]-_KT[0,6])*10 ZT[3,6]=_KT[0,6]-(_KT[0,4]-_KT[0,6])*10
ZT[3,3]=_KT[0,3]+(_KT[0,3]-_KT[0,5])*10 ZT[3,5]=_KT[0,5]-(_KT[0,3]-_KT[0,5])*10
FLAG=INTERSEC(ZT[2],ZT[3],_WSEC)
IF(FLAG==0) GOTOF FEHL7
ENDIF
N50 G0 G90 G64 G[7]=_GG7 NORM F=FF1 AX[_ZA]=ZSP[LP] AX[_SA]=(_TYPIV+_WSEC[1-LP])*_SRF
ENDIF
_MBX5:_MK[1]=0 IH1=IH1+1
IF(_ZSFI[37]<>0)
ATT=ATT-TAK[0]*IA
ELSE
IF(_HMISO>TAK[0])
ATT=ATT-TAK[0]*IA
_HMISO=_HMISO-TAK[0]
ELSE
ATT=ATT-_HMISO*IA
_HMISO=0
ENDIF
ENDIF
IF (IH1==1)
LSP[1,0]=SEC[0] LSP[1,1]=SEC[1] _LS=_NS
_MERKSP[0,0]=SEC[0] _MERKSP[0,1]=SEC[1] _MERKSP[0,2]=_NS
IF _MK[10]==2
_MERKSP[1,0]=SEC[0] _MERKSP[1,1]=SEC[1] _MERKSP[1,2]=_NS
ENDIF
ENDIF
IF (IH1>=_MERKIH1)
IH3=(IH1-_MERKIH1) MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
ENDIF
IH3=IH1 MOD _MSPL
_MERKSP[IH3,0]=SEC[0] _MERKSP[IH3,1]=SEC[1] _MERKSP[IH3,2]=_NS
IF ((IH1==1)AND(_IH1F==0))
ATT=ATT-SM[1] _IH1F=1
ENDIF
IF IH1<=_MERKIH1
_ATTAB=_KT[ZLE,5+LP]
_MK[8]=1
ELSE
_ATTAB=LSP[1,LP]+SAB[4]
IF (_ATTAB-_KT[ZLE,5+LP])*IA>0
_ATTAB=_KT[ZLE,5+LP]
_MK[8]=1
ENDIF
IF (_ATTAB-_KT[ZLE,5+LP])*IA>0
_ATTAB=_KT[ZLE,5+LP]
_MK[8]=1
ENDIF
ENDIF
IF _VR==0
_NS=_KT[_PTABA,1]
ELSE
_NS=_PTABA
ENDIF
IF IH1<>AZI GOTOF _MCX5
IF _KT[_PTABA,7]>0 GOTOF _MCX5
IF _VR==0
_NS=_KT[_PTABA,1]
ELSE
_NS=_PTABA
ENDIF
SEC[0]=_KT[_NS,3] SEC[1]=_KT[_NS,4]
IF _KT[_NS,7]>0
_MK[1]=1 _NS=_KT[_NS,0]
ENDIF
GOTOF _MEX5
_MCX5:HH3=_KT[_NS,3+LP] HH4=_KT[_NS,5+LP]
IF IA==1
IF ((HH4-ATT)>0)AND((HH3-ATT)<0)
GOTOF _C5
ENDIF
IF (ABS(HH4-ATT)<_EPS) AND ((HH3-ATT)<0)
SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6] _MK[1]=1
IF _KT[_NS,7]>0
_NS=_KT[_NS,0]
ENDIF
GOTOF _MEX5
ENDIF
IF ((HH4-ATT)>0) AND (ABS(HH3-ATT)<_EPS)
SEC[0]=_KT[_NS,3] SEC[1]=_KT[_NS,4]
IF NOT((_VR==1)AND(IH1==AZI))
_MK[1]=1 _NS =_KT[_NS,0]
ENDIF
GOTOF _MEX5
ENDIF
ENDIF
IF IA==-1
IF ((HH4-ATT)<0)AND((HH3-ATT)>0)
GOTOF _C5
ENDIF
IF (ABS(HH4-ATT)<_EPS) AND ((HH3-ATT)>0)
SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6] _MK[1]=1
IF _KT[_NS,7]>0
_NS=_KT[_NS,0]
ENDIF
GOTOF _MEX5
ENDIF
IF ((HH4-ATT)<0) AND (ABS(HH3-ATT)<_EPS)
SEC[0]=_KT[_NS,3] SEC[1]=_KT[_NS,4]
IF NOT((_VR==1)AND(IH1==AZI))
_NS=_KT[_NS,0] _MK[1]=1
ENDIF
GOTOF _MEX5
ENDIF
ENDIF
_NS=_KT[_NS,1]
GOTOB _MCX5
_C5:ZT[0,3+LP]=ATT ZT[0,5+LP]=ATT SEC[0]=SEC[0] SEC[1]=SEC[1] FLAG=INTERSEC(_KT[_NS],ZT[0],SEC)
IF FLAG==0 GOTOF FEHL7
IF (((SEC[1-LP]-_KT[_NS,6-LP])*SLR<0) AND (ABS(SEC[1-LP]-_KT[_NS,6-LP])<_EPS) AND (ABS(SEC[LP]-_KT[_NS,5+LP])<_EPS) )
SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6]
ENDIF
_MEX5:
IF (NOT(IH1==1))
IF (_ATTAB-_KT[ZLE,5+LP])*IA>0
LSP[2,0]=_KT[ZLE,5] LSP[2,1]=_KT[ZLE,6] _LSNEU=ZLE
GOTOF _ENDLSNEU
ENDIF
_ENDLSNEU:
ENDIF
IF((_TYPI==1) OR (_HS==0))
IF(_TYPIS==0)
N511 G0 G90 AX[_ZA]=_ZRF*ATT
ELSE
IF(LP==1)
N512 G0 G90 AX[_ZA]=_ZRF*ATT AX[_SA]=ZSP[1-LP]+((_KT[0,5]-_KT[0,3])/(_KT[0,4]-_KT[0,6])*(_KT[0,4]-ATT)*_SRF)
ELSE
N512 G0 G90 AX[_ZA]=_ZRF*ATT AX[_SA]=ZSP[1-LP]+((_KT[0,6]-_KT[0,4])/(_KT[0,3]-_KT[0,5])*(_KT[0,3]-ATT)*_SRF)
ENDIF
ENDIF
ELSE
N51 G1 G90 AX[_ZA]=_ZRF*ATT
G0
ENDIF
_ME544:IF DAM==0 GOTOF _MXG5
HH1=ZSP[1-LP]/_SRF
_MFX5:IF ABS(HH1-SEC[1-LP])<=DAM GOTOF _MXG5
HH1=HH1-SLR*DAM
IF ABS(HH1-SEC[1-LP])<=ABS(SAB[3-LP]) GOTOF _MXG5
N52 G1 AX[_SA]=_SRF*HH1 AX[_ZA]=_ZRF*SEC[LP]
N53 G4 F=DT
GOTOB _MFX5
_MXG5:
IF (IH1==AZI) AND ( LP==1 )
_IH1=_KT[_PTABA,1] _II=_KT[_IH1,2] _II=_II MOD 10 HH1=_KT[_IH1,8] HH5=_MERKWZR
IF _II<2
IF (HH1==0) OR (HH1==90)
IF HH1==0
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ELSE
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ENDIF
ELSE
HH5=HH5/2
IF _KT[_IH1,7]<=0
SAB[5+LP]=-IA*HH5*ABS(SIN(HH1))
ELSE
SAB[5+LP]=IA*HH5*ABS(SIN(HH1))
ENDIF
SAB[6-LP]=SLR*HH5*ABS(COS(HH1))
ENDIF
ELSE
IF NOT(ABS(_KT[_IH1,3]-_KT[_IH1,9]))<_EPS
HH5=HH5/2
HH2=(_KT[_IH1,4]-_KT[_IH1,10])/(_KT[_IH1,3]-_KT[_IH1,9]) HH3=HH5*HH5/(1+HH2*HH2) HH4=SQRT(HH3)
IF _KT[_IH1,7]<=0
SAB[5+LP]=-IA*(HH4)
ELSE
SAB[5+LP]=IA*(HH4)
ENDIF
SAB[6-LP]=SLR*(ABS(HH2)*HH4)
ELSE
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ENDIF
ENDIF
IF NOT( _VR )
N541 G1 F=FF1 AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP]+SAB[5+LP]) AX[_SA]=_SRF*(_KT[_PTABA,6-LP]+SAB[6-LP])
ELSE
N541 G1 F=FF1 AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP]+SAB[5+LP]) AX[_SA]=_SRF*(_KT[_PTABA,4-LP]+SAB[6-LP])
ENDIF
ENDIF
N54 G1 AX[_SA]=_SRF*SEC[1-LP] AX[_ZA]=_ZRF*SEC[LP]
IF ABS(SEC[1-LP]-LSP[1,1-LP])>ABS(SAB[4])
IH5=IH5+1
ELSE
IH5=0
ENDIF
IF _MK[10]<>2
IF IH5>1
IH3=(IH1-1) MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
ENDIF
ELSE
IH3=IH1 MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
_ATTAB=LSP[1,LP]+SAB[4]
ENDIF
IF _MK[10]==1 GOTOF _M5301
IF _MK[1]==0 GOTOF _B5
_NS=_KT[_NS,1]
IF _KT[_NS,7]<=0 GOTOF _B5
_MK[1]=0 _NS=_KT[_NS,0]
_B5:HH4=_KT[_NS,3] HH5=_KT[_NS,4] _KT[_NS,3]=SEC[0] _KT[_NS,4]=SEC[1] HH1=_KT[_LS,5] HH2=_KT[_LS,6] _KT[_LS,5]=LSP[1,0] _KT[_LS,6]=LSP[1,1]
IH2=_NS
N501 IF SQRT((_KT[_NS,3]-_KT[_NS,5])*(_KT[_NS,3]-_KT[_NS,5])+(_KT[_NS,4]-_KT[_NS,6])*(_KT[_NS,4]-_KT[_NS,6]))>=_EPS GOTOF _MHX5
N55 G1 G90 AX[_ZA]=_ZRF*_KT[_NS,5+LP] AX[_SA]=_SRF*_KT[_NS,6-LP]
GOTOF _MJX5
_MHX5:IF DAM==0 GOTOF _MH5
IF ((_KT[IH2,2]>1)AND(_KT[IH2,2]<10) OR (_KT[IH2,2]>11)AND(_KT[IH2,2]<20) OR (_KT[IH2,2]>21)AND(_KT[IH2,2]<30) OR (_KT[IH2,2]>31)) GOTOF _MH5
IF ABS(_KT[IH2,8]>_EPS) GOTOF _MH5 IF ABS(_KT[IH2,4-LP]-_KT[IH2,6-LP])<=DAM GOTOF _MH5
HH3=_KT[IH2,4-LP]
_MF5:IF ABS(HH3-_KT[IH2,6-LP])<=DAM GOTOF _MG5
N552 G1 G91 AX[_SA]=_SRF*(-SLR*DAM)
N554 G4 F=DT
HH3=HH3-SLR*DAM
IF ABS(HH3-_KT[IH2,6-LP])<=ABS(SAB[3-LP]) GOTOF _MG5
GOTOB _MF5
_MG5:G1 G90 AX[_SA]=_SRF*_KT[IH2,6-LP]
GOTOF _MJX5
_MH5:_KT[IH2,3+LP]=_KT[IH2,3+LP]*_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]*_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]*_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]*_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]*_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]*_SRF
IF NOT((ABS(_KT[IH2,3]-_KT[IH2,5])<_EPS) AND (ABS(_KT[IH2,4]-_KT[IH2,6])<_EPS))
IF ABS($P_EP[_ZA]*TAK[3]-_KT[IH2,5+LP])<_EPS
TAK[5]=_KT[IH2,5+LP]/_ZRF
ENDIF
N510 EXECTAB(_KT[IH2])
ENDIF
_KT[IH2,3+LP]=_KT[IH2,3+LP]/_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]/_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]/_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]/_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]/_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]/_SRF
_MJX5:IF (_LS==IH2)OR(IH2==ZLE) GOTOF _MSX5
_MXM5:IF (IH2==1) AND (_KT[IH2,7]>0) GOTOF _MPP5
IH2=_KT[IH2,1]
IF _MK[10]==2 GOTOF _M5203
IF (IH5>1) AND (ABS(LSP[1,LP]-_KT[IH2,3+LP])<=ABS(TAK[0]))
ZT[1,4-LP]=_KT[IH2,4-LP]-SLR*_MERKWZR ZT[1,6-LP]=ZT[1,4-LP] IH3=IH2
_M5210:
IF _KT[IH3,7]>0
_KT[_LS,5]=HH1 _KT[_LS,6]=HH2 IH3=_KT[IH3,0] LSP[1,0]=_KT[IH3,5] LSP[1,1]=_KT[IH3,6] _LS=IH3 HH1=_KT[_LS,5] HH2=_KT[_LS,6]
IF (ABS(_KT[IH3,5+LP]-$P_EP[_ZA]*TAK[3]/_ZRF)<_EPS) AND (ABS(_KT[IH3,6-LP]-$P_EP[_SA]*TAK[3]/_SRF)<_EPS)
_LS=IH2 HH1=_KT[_LS,5] HH2=_KT[_LS,6]
GOTOF _MSX5
ENDIF
ELSE
IF ( (_KT[IH3,2] MOD 10 <= 1 ) OR ( (_KT[IH3,2] MOD 10 > 1 ) AND ( ( ABS(_KT[IH3,3]-_KT[IH3,5])>0.001) OR (ABS(_KT[IH3,4]-_KT[IH3,6])>0.001) )) )
FLAG=INTERSEC(_KT[IH3],ZT[1],_NZP)
ENDIF
IF FLAG==1
_KT[_LS,5]=HH1 _KT[_LS,6]=HH2 LSP[1,0]=_NZP[0] LSP[1,1]=_NZP[1] _LS=IH3
HH1=_KT[_LS,5] HH2=_KT[_LS,6] _KT[_LS,5]=LSP[1,0] _KT[_LS,6]=LSP[1,1]
ELSE
IF IH3==_LS
GOTOF _M5203
ENDIF
IH3=_KT[IH3,1]
IF IH3<>_LS
GOTOB _M5210
ENDIF
ENDIF
ENDIF
ENDIF
_M5203:
IF _KT[IH2,7]<=0 GOTOF _MKX5
_MPP5:
HH6=_KT[IH2,3+LP] IH2=ABS(_KT[IH2,1]) TAK[4]=1
_MPX5:IF ABS(_KT[IH2,3+LP]-HH6)<=_EPS GOTOF _MQ5
IF IH2==ZLE
IF ABS(_KT[IH2,5+LP]-HH6)<=_EPS
GOTOF _MKX5
ELSE
IF ($P_GG[13] MOD 2 == 1) AND (_MK[14]==0)
_EPS=0.001 _MK[14]=1
ENDIF
ENDIF
ENDIF
IH2=ABS(_KT[IH2,1])
GOTOB _MPX5
_MQ5:
IF DAM==0
N56 G1 G[10]=_GG10 G90 AX[_SA]=_SRF*_KT[IH2,4-LP] AX[_ZA]=_ZRF*_KT[IH2,3+LP]
GOTOF _M6203
ENDIF
HH3=$P_EP[_SA]/_SRF
_M6201:IF ABS(HH3-_KT[IH2,4-LP])<=DAM GOTOF _M6202
N552 G1 G91 AX[_SA]=_SRF*(-SLR*DAM)
N554 G4 F=DT
HH3=HH3-SLR*DAM
IF ABS(HH3-_KT[IH2,4-LP])<=ABS(SAB[3-LP]) GOTOF _M6202
GOTOB _M6201
_M6202:G1 G90 AX[_SA]=_SRF*_KT[IH2,4-LP]
_M6203:
TAK[5]=_KT[IH2,3+LP]
IF _KT[IH2,7]>0
IF ABS(_KT[IH2,3+LP]-_KT[IH2,5+LP]<_EPS)
IH2=_KT[IH2,1] IH2=_KT[IH2,1]
IF NOT((IH2==ZLE)OR(IH2==0))
GOTOB _MPX5
ENDIF
ELSE
IH2=_KT[IH2,1]
IF NOT(IH2==ZLE)
GOTOB _MPX5
ENDIF
ENDIF
ENDIF
N562 _MKX5:IF SQRT((_KT[IH2,3]-_KT[IH2,5])*(_KT[IH2,3]-_KT[IH2,5])+(_KT[IH2,4]-_KT[IH2,6])*(_KT[IH2,4]-_KT[IH2,6]))>=_EPS GOTOB _MHX5
N57 G1 G90 AX[_ZA]=_ZRF*_KT[IH2,5+LP] AX[_SA]=_SRF*_KT[IH2,6-LP]
ML5:IF (_LS<>IH2)AND(IH2<>ZLE) GOTOB _MXM5
_MSX5:_KT[_NS,3]=HH4 _KT[_NS,4]=HH5 _KT[_LS,5]=HH1 _KT[_LS,6]=HH2
IF _MK[1]==0 GOTOF _MTX5
_NS=_KT[_NS,0]
_MTX5:
_M5301:
IF (IA==-1) AND (IH1==1) AND (_MK[10]==2)
;1. Abheben bei Innen
IF NOT (AZI==1)
IF NOT(_ZSD13I)
N579 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4]-TAK[0]*IA)*_ZRF
ENDIF
ELSE
N5801 G1 G91 AX[_ZA]=_ZRF*SAB[4]
ENDIF
N5802 G0 G91 AX[_ZA]=_ZRF*SAB[LP] AX[_SA]=_SRF*SAB[1-LP]
G90
GOTOF _MY55
ENDIF
IF _MK[10]==1
IF NOT((IH1==AZI) AND (_MK[0]<>0))
N5801 G1 G91 AX[_ZA]=_ZRF*SAB[4]
N5802 G0 G91 AX[_ZA]=_ZRF*SAB[LP] AX[_SA]=_SRF*SAB[1-LP]
N5803 G90
ENDIF
GOTOF _MY55
ENDIF
IF ABS(LSP[1,LP]-_KT[ZLE,5+LP])<=_EPS
IF (ABS(SAB[4])>0)
IF (ABS(_KT[ZLE,3+LP]-_KT[ZLE,5+LP])<_EPS)
N577 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4])*_ZRF
GOTOF _MT55
ENDIF
IF (TAK[4]==1) AND ((TAK[5]-LSP[1,LP])*IA>=0)
N577 G1 G90 AX[_ZA]=(TAK[5]+SAB[4])*_ZRF
GOTOF _MT55
ENDIF
ENDIF
IF ABS(SAB[4])-ABS(TAK[0])>=0
IF ABS(SAB[4]/2)-ABS(TAK[0])<0
IF _ZSD13I==0
N578 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4]/2)*_ZRF
ENDIF
ELSE
IF NOT(_ZSD13I)
N579 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4]-TAK[0]*IA)*_ZRF
ENDIF
ENDIF
ENDIF
ENDIF
IF AZI==1
N5780 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4])*_ZRF
ENDIF
IF ((IH1==AZI) AND ( _MK[0]>0))
HEA[LP]=_KT[ZMX,3+LP] HEA[1-LP]=_KT[ZMX,4-LP]
IF ((ABS($P_EP[_ZA]/_ZRF-HEA[LP])<0.001) AND (ABS($P_EP[_SA]/_SRF-HEA[1-LP])<_EPS))
GOTOF _MAX6
ENDIF
ENDIF
IF (_ATTAB-LSP[1,LP])*IA>0
IF (IH1<>AZI) OR ((IH1==AZI) AND (_MK[0])==0)
IF _ZSD13I==0
IF _MK[8]==0
N580 G1 G90 AX[_ZA]=_ATTAB*_ZRF
ELSE
N580 G1 G91 AX[_ZA]=SAB[4]*_ZRF
G90
_MK[8]=0
ENDIF
ENDIF
ELSE
IF (LSP[1,1-LP]-_KT[ZMX,4-LP])*SLR<0
N581 G1 G90 AX[_ZA]=_ATTAB*_ZRF
ELSE
IF NOT($P_EP[_ZA]/_ZRF==_KT[FMX,3+LP])
_MK[12]=0
IF ABS(LSP[1,1-LP]-_KT[FMX,4-LP])<_MERKWZR
N5821 G0 G90 AX[_ZA]=(_KT[ZMX,3+LP]+SAB[LP])*_ZRF AX[_SA]=(_KT[FMX,4-LP]+SLR*_MERKWZR)*_SRF
ELSE
N5822 G0 G90 AX[_ZA]=(_KT[ZMX,3+LP]+SAB[LP])*_ZRF
ENDIF
ELSE
_MK[12]=1
ENDIF
GOTOF _MY55
ENDIF
ENDIF
ENDIF
_MT55:TAK[4]=0 TAK[5]=0
IF ABS($P_EP[_SA]*TAK[3]-ZSP[1-LP])>ABS(_SRF*SAB[3-LP])
IF ( (IH1==1) AND (_VRT<_MERKWZR) AND ( _MK[11]==1) )
N5851 G0 G91 AX[_ZA]=_ZRF*SAB[LP]*_MERKWZR/_VRT AX[_SA]=_SRF*SAB[1-LP]*_MERKWZR/_VRT
ELSE
N5852 G0 G91 AX[_ZA]=_ZRF*SAB[LP] AX[_SA]=_SRF*SAB[1-LP]
ENDIF
ELSE
N586 G0 G91 AX[_ZA]=_ZRF*SAB[2+LP]
N587 G0 G91 AX[_SA]=_SRF*SAB[3-LP]
ENDIF
_MY55:
IF(LP==1)
ZT[2,4]=$P_EP[_ZA]*TAK[3]/_ZRF ZT[2,6]=$P_EP[_ZA]*TAK[3]/_ZRF ZT[2,3]=-9999. ZT[2,5]=9999.
ZT[3,4]=_KT[0,4]+(_KT[0,4]-_KT[0,6])*10 ZT[3,6]=_KT[0,6]-(_KT[0,4]-_KT[0,6])*10
ZT[3,3]=_KT[0,3]+(_KT[0,3]-_KT[0,5])*10 ZT[3,5]=_KT[0,5]-(_KT[0,3]-_KT[0,5])*10
FLAG=INTERSEC(ZT[2],ZT[3],_WSEC)
IF(FLAG==0) GOTOF FEHL7
ELSE
ZT[2,3]=$P_EP[_ZA]*TAK[3]/_ZRF ZT[2,5]=$P_EP[_ZA]*TAK[3]/_ZRF ZT[2,4]=-9999. ZT[2,6]=9999.
ZT[3,4]=_KT[0,4]+(_KT[0,4]-_KT[0,6])*10 ZT[3,6]=_KT[0,6]-(_KT[0,4]-_KT[0,6])*10
ZT[3,3]=_KT[0,3]+(_KT[0,3]-_KT[0,5])*10 ZT[3,5]=_KT[0,5]-(_KT[0,3]-_KT[0,5])*10
FLAG=INTERSEC(ZT[2],ZT[3],_WSEC)
IF(FLAG==0) GOTOF FEHL7
ENDIF
IF IH1>=AZI
IF _MK[0]==0
IF ABS(SAB[4])>ABS($P_EP[_SA]*TAK[3]-ZSP[3-LP])
IF VARI==1
N590 G90 AX[_SA]=ZSP[3-LP] AX[_ZA]=$P_EP[_ZA]*TAK[3]+SAB[4]*_ZRF
ELSE
N590 G90 AX[_SA]=ZSP[1-LP] AX[_ZA]=$P_EP[_ZA]*TAK[3]+SAB[4]*_ZRF+SM[1]
ENDIF
ELSE
IF VARI==1
N591 G90 AX[_SA]=ZSP[3-LP]
ELSE
N591 G90 AX[_SA]=ZSP[1-LP]
ENDIF
IF ((_ARTIS[11]==3) AND (_ARTIS[12]<>1) AND (_ARTIS[10]==_ARTIS[5]))
M=QU(_ARTIS[8])
ENDIF
IF VARI==1
N591 G90 AX[_SA]=ZSP[3-LP]
ELSE
N591 G90 AX[_SA]=ZSP[1-LP]
ENDIF
ENDIF
ENDIF
GOTOF _MVX5
ELSE
IF ((_ARTIS[11]==3) AND (_ARTIS[12]<>1) AND (_ARTIS[10]==_ARTIS[5]))
M=QU(_ARTIS[8])
ENDIF
IF(_TYPIS==0)
N59 G90 AX[_SA]=ZSP[1-LP]
ELSE
N59 G90 AX[_SA]=(_TYPIV+_WSEC[1-LP])*_SRF
ENDIF
_MK[8]=0
GOTOB _MBX5
ENDIF
_MVX5:IF _MK[0]<>0 GOTOF _MAX6
IF VARI==1
N599 G0 G90 G40 AX[_ZA]=ZSP[2+LP]
ENDIF
_MK[0]=-1
IF _MERK_CDON==2
CDON
ENDIF
GOTOF _MAX7
_MAX6:ZMX=FMX ZT[1,3+LP]=-9999 ZT[1,5+LP]=9999
YA6:IF _MK[0]==0 GOTOF _MAX7
IF _MK[0]>1
_ZMXN=ABS(_KT[ZMX,7]) _ZMXN=ABS(_KT[_ZMXN,7])
ENDIF
_MBX6:HEA[LP]=_KT[ZMX,3+LP] HEA[1-LP]=_KT[ZMX,4-LP] ZHN=ZMX IH1=ABS(_KT[ZMX,7])
_MERKSP[0,0]=REP(0)
_MERKSP[0,5]=ZMX _MERKSP[0,3]=_KT[ZMX,3] _MERKSP[0,4]=_KT[ZMX,4]
LSP[0,0]=_KT[ZMX,3] LSP[0,1]=_KT[ZMX,4] TAK[1]=LSP[0,1-LP] ZUA=ZMX
SEC[LP]=_KT[IH1,3+LP] II=_KT[ZUA,1]
HH1=0 _MK[2]=1 _MK[3]=_KT[IH1,0] HEA[2+LP]=SEC[LP] HEA[3-LP]=_KT[_MK[3],6-LP]
_YXY6:IF ABS(_KT[_MK[3],3+LP]-_KT[_MK[3],5+LP])>=_EPS GOTOF _MCX6
HH1=ABS(_KT[_MK[3],4-LP]-HEA[3-LP]) _MK[3]=_KT[_MK[3],0] HEA[3-LP]=_KT[_MK[3],6-LP]
GOTOB _YXY6
_MCX6:
IF ABS(_KT[II,3+LP]-HEA[LP])<=_EPS
_NS=_KT[II,0]
GOTOF _MDX6
ENDIF
IF II==ZLE
_NS=II
GOTOF _MDX6
ENDIF
II=_KT[II,1]
GOTOB _MCX6
_MDX6:HH2=HEA[1-LP]
IF _MK[0]>1
ZT[0,3+LP]=_KT[_ZMXN,3+LP] ZT[0,5+LP]=ZT[0,3+LP]
FLAG=INTERSEC(_KT[ZUA],ZT[0],SEC)
HH3=ABS(SEC[1-LP]-_KT[_ZMXN,4-LP])
SEC[LP]=_KT[IH1,3+LP]
ENDIF
IF ABS(_DB)==0 GOTOF _YQD6 IF ABS(HH2-_KT[_NS,6-LP])<=ABS(_DB) GOTOF _MQ6 IF (0<HH1)AND(HH1>ABS(_DB)) GOTOF _YQD6
IF _MK[0]==1 GOTOF _M53161
IH1=ABS(_KT[ZUA,7]) IH1=ABS(_KT[IH1,7])
IF ABS(SEC[LP]-_KT[IH1,3+LP]) < _DH
HH1=ABS(HEA[LP]-_KT[IH1,3+LP])
GOTOF _M53160
ENDIF
_M53161:
_MK[2]=0 IH1=ZUA IH2=_NS
_AA60:IF ABS(_KT[IH2,8]>_EPS) GOTOF _AA6
IH2=_KT[IH2,0]
GOTOB _AA60
_AA6:HH2=_KT[IH2,3+LP] HH1=_KT[IH1,5+LP]
IF _MK[0]==1 GOTOF _AE6
IF _ZMXN>IH2
GOTOF _AE6
ELSE
IF (_KT[IH1,8]*_KT[_ZMXN,8]>0)
IF (HH3<=_DB)
_MK[2]=-1
GOTOF _AE6
ELSE
IH2=_ZMXN HH2=_KT[IH2,3+LP]
GOTOF _AE6
ENDIF
ENDIF
IH2=_ZMXN HH2=_KT[IH2,3+LP]
GOTOF _AE6
ENDIF
_MAB6:IF ABS(_KT[IH1,6-LP]-_KT[IH2,4-LP])<=ABS(_DB) GOTOF _AM6
IH1=_KT[IH1,1] IH2=_KT[IH2,0]
GOTOB _AA6
_AE6:IF ABS(HEA[LP]-HH2)>ABS(HEA[LP]-HH1) GOTOF _AH6
ZT[0,3+LP]=HH2 ZT[0,5+LP]=HH2 SEC[0]=SEC[0] SEC[1]=SEC[1] FLAG=INTERSEC(_KT[IH1],ZT[0],SEC)
IF FLAG==0 GOTOB _MAB6
IF ABS(SEC[1-LP]-_KT[IH2,4-LP])<=ABS(_DB) GOTOF _AM6
IH2=_KT[IH2,0]
GOTOB _AA6
_AH6:ZT[0,3+LP]=HH1 ZT[0,5+LP]=HH1 SEC[0]=SEC[0] SEC[1]=SEC[1] FLAG=INTERSEC(_KT[IH2],ZT[0],SEC)
IF FLAG==0 GOTOB _MAB6
IF ABS(SEC[1-LP]-_KT[IH1,6-LP])<=ABS(_DB) GOTOF _AM6
_AB6:HH1=_KT[IH1,3+LP]-_KT[IH1,5+LP] IH1=_KT[IH1,1]
IF NOT(HH1*(_KT[IH1,3+LP]-_KT[IH1,5+LP])<0) GOTOB _AA6
IH2=IH1 IH1=_KT[IH1,0]
_AM6:II=_KT[IH1,2] II=II MOD 10 _MK[6]=_KT[IH2,2] _MK[6]=_MK[6] MOD 10
IF II>1 GOTOF _K6 IF _MK[6]>1 GOTOF _GK6
_GG6:
IF NOT ( (_KT[IH1,8] ==90) )
HH1=TAN(_KT[IH1,8]) HH2=TAN(_KT[IH2,8]) HH3=_KT[IH1,3+LP]-HH1*_KT[IH1,4-LP] HH4=_KT[IH2,3+LP]-HH2*_KT[IH2,4-LP]
SEC[1-LP]=(HH4-HH3-HH2*_DB)/(HH1-HH2) SEC[LP]=HH1*SEC[1-LP]+HH3 HEA[4]=SEC[0] HEA[5]=SEC[1]
ELSE
HH2=TAN(_KT[IH2,8])
SEC[1-LP]=_KT[IH1,6-LP] SEC[LP]=_KT[IH1,5+LP]-HH2*_DB
ENDIF
GOTOF _YQD6
_GK6:HH1=TAN(_KT[IH1,8]) HH3=_KT[IH1,3+LP]-HH1*_KT[IH1,4-LP] HH2=_KT[IH2,5]-_KT[IH2,9] HH4=_KT[IH2,6]-_KT[IH2,10] HH5=HH2*HH2+HH4*HH4 HH3=HH3-_KT[IH2,9+LP] HH2=_DB+_KT[IH2,10-LP] HH4=HH1*HH1+1 SEC[0]=(HH3*HH1-HH2)/HH4
SEC[1]=(HH3*HH3+HH2*HH2-HH5)/HH4 HEA[4]=SEC[0] HEA[5]=SEC[1]
GOTOF _KK60
_K6:IF _MK[6]>1 GOTOF _KK6
_KG6:HH1=TAN(_KT[IH2,8]) HH3=_KT[IH2,3+LP]-HH1*_KT[IH2,4-LP] HH2=_KT[IH1,5]-_KT[IH1,9] HH4=_KT[IH1,6]-_KT[IH1,10] HH5=HH2*HH2+HH4*HH4 HH3=HH3-HH1*_DB-_KT[IH1,9+LP] HH4=HH1*HH1+1
HH2=_KT[IH1,10-LP] SEC[0]=(HH3*HH1-HH2)/HH4 SEC[1]=(HH3*HH3+HH2*HH2-HH5)/HH4 HEA[4]=SEC[0] HEA[5]=SEC[1]
GOTOF _KK60
_KK6:HH1=_KT[IH1,9]-_KT[IH1,3] HH2=_KT[IH1,10]-_KT[IH1,4] SEC[0]=HH1*HH1+HH2*HH2 HH1=_KT[IH2,9]-_KT[IH2,3] HH2=_KT[IH2,10]-_KT[IH2,4] SEC[1]=HH1*HH1+HH2*HH2 HH1=_KT[IH1,9+LP]-_KT[IH2,9+LP] HH1=HH1*HH1 HH5=_KT[IH1,10-LP] HH4=-HH5*HH5
HH3=_DB+_KT[IH2,10-LP] HH2=HH1+SEC[0]-SEC[1]+HH3*HH3+HH4 HH1=HH1*4 HH4=(HH4+SEC[0])*HH1 HH3=(-HH3+HH5)*2 SEC[0]=(HH2*HH3-HH1*HH5)/(HH3*HH3+HH1) SEC[1]=(HH2*HH2-HH4)/(HH3*HH3+HH1) HEA[4]=SEC[0] HEA[5]=SEC[1]
_KK60:HH4=-SEC[0] HH2=SEC[1] HH5=HH4*HH4-HH2
IF ABS(HH5)>0.0005 GOTOF _KK62
HH5=0
GOTOF _KK63
N601 _KK62:HH5=SQRT(ABS(HH5))
_KK63:HH2=HH4-HH5 HH4=HH4+HH5 ZT[1,4-LP]=HH4
IF (HH2-_KT[IH1,4-LP])*(HH2-_KT[IH1,6-LP])>0 GOTOF _KK61
ZT[1,4-LP]=HH2
_KK61:ZT[1,6-LP]=ZT[1,4-LP] SEC[0]=SEC[0] SEC[1]=SEC[1]
IF (_KT[IH1,8]==90) AND ((_KT[IH1,2]==0)OR(_KT[IH1,2]==1)OR(_KT[IH1,2]==10)OR(_KT[IH1,2]==11)OR(_KT[IH1,2]==20)OR(_KT[IH1,2]==21)OR(_KT[IH1,2]==30)OR(_KT[IH1,2]==31))
_KT[IH2,4-LP]=_KT[IH2,4-LP]+_DB _KT[IH2,6-LP]=_KT[IH2,6-LP]+_DB _KT[IH2,10-LP]=_KT[IH2,10-LP]+_DB
FLAG=INTERSEC(_KT[IH2],ZT[1],SEC)
_KT[IH2,4-LP]=_KT[IH2,4-LP]-_DB _KT[IH2,6-LP]=_KT[IH2,6-LP]-_DB _KT[IH2,10-LP]=_KT[IH2,10-LP]-_DB
IF FLAG==0
GOTOF FEHL72
ENDIF
ELSE
FLAG=INTERSEC(_KT[IH1],ZT[1],SEC)
IF FLAG==0
IF ABS(_KT[IH1,6-LP]-ZT[1,4-LP])<_EPS
SEC[0]=_KT[IH1,5] SEC[1]=_KT[IH1,6]
ELSE
GOTOF FEHL72
ENDIF
ENDIF
ENDIF
_YQD6:
IF _MK[2]==-1
IF (_KT[_ZMXN,3+LP]-SEC[LP])*IA>0
SEC[0]=_KT[_NS,3] SEC[1]=_KT[_NS,4] IH2=_NS
ENDIF
_MK[2]=0
ENDIF
HH1=ABS(HEA[LP]-SEC[LP])
_M53160: AZI=HH1/MID+0.499
IF AZI==0 GOTOF _MQ6
IF(_ZSFI[37]<>0)
TAK[0]=HH1/AZI ATT=HEA[LP] SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6] IH1=0 ZUE=ZUA
ELSE
ATT=HEA[LP] SEC[0]=_KT[_NS,5] SEC[1]=_KT[_NS,6] IH1=0 ZUE=ZUA _HMISO=HH1
IF(HH1>MID)
TAK[0]=MID
ELSE
TAK[0]=HH1
ENDIF
ENDIF
_MERKIH1=TRUNC(ABS(SAB[4])/IH4/TAK[0])
IF _MERKIH1>=_MSPL
_MERKIH1=_MSPL-1
ENDIF
IF ((_MERKIH1==0) OR (_MK[10]>0))
_MERKIH1=1
ENDIF
IF ($P_EP[_ZA]/_ZRF*TAK[3]-HEA[LP])*IA<0 GOTOF _YQE6
IF $P_GG[7]<>1
IF _mk[12]==0
N660 G0 G90 G[10]=_GG10 AX[_SA]=_SRF*(HEA[1-LP]-SM[0]*2+SLR*_MERKWZR)
ELSE
_mk[12]=0
ENDIF
IF NOT (($P_EP[_ZA]*TAK[3]/_ZRF-(HEA[LP]+IA*_MERKWZR+SAB[LP]))*IA<0)
N661 G0 AX[_ZA]=_ZRF*(HEA[LP]+IA*_MERKWZR+SAB[LP])
ENDIF
IF NOT (($P_EP[_ZA]*TAK[3]/_ZRF-(HEA[LP]+IA*_MERKWZR))*IA<0)
N662 G1 F=FF2 AX[_ZA]=_ZRF*(HEA[LP]+IA*_MERKWZR)
ENDIF
IF ((ABS($P_EP[_ZA]/_ZRF*TAK[3]-HEA[LP])>_EPS) OR (_HS==0))
N664 G1 F=FF2 AX[_ZA]=_ZRF*HEA[LP] RND=_MERKWZR
ENDIF
N666 AX[_SA]=_SRF*(HEA[1-LP]-SM[0]*2)
ELSE
N601 G0 G[7]=_GG7 G90 G[10]=_GG10 AX[_SA]=_SRF*(HEA[1-LP]-SM[0]*2)
IF _MK[7]==1
N604 G1 F=FF2 AX[_ZA]=_ZRF*HEA[LP]
ELSE
N603 G0 AX[_ZA]=_ZRF*(HEA[LP]+SAB[2+LP])
N604 G1 F=FF2 AX[_ZA]=_ZRF*HEA[LP]
ENDIF
ENDIF
GOTOF _YQF6
_YQE6:
IF $P_GG[7]<>1
N60 G0 G90 G[10]=_GG10 AX[_ZA]=_ZRF*(HEA[LP]+SAB[LP])
ELSE
N601 G0 G[7]=_GG7 G90 G[10]=_GG10 AX[_ZA]=_ZRF*(HEA[LP]+SAB[LP])
ENDIF
N61 AX[_SA]=_SRF*(HEA[1-LP]-SM[0]*2)
N62 _YE44:G1 G91 F=FF2 AX[_ZA]=_ZRF*(-SAB[LP])
_YQF6:IH1=IH1+1
IF(_ZSFI[37]<>0)
ATT=ATT-TAK[0]*IA
ELSE
IF(_HMISO>TAK[0])
ATT=ATT-TAK[0]*IA
_HMISO=_HMISO-TAK[0]
ELSE
ATT=ATT-_HMISO*IA
_HMISO=0
ENDIF
ENDIF
IF ((IH1==1)AND(_IH1F==0)AND(_ZSFI[37]==0))
ATT=ATT-SM[1] _IH1F=1 _HMISO=_HMISO-SM[1]*IA
ENDIF
IF (_ARTIS[11]==3)
_ARTIS[10]=_ARTIS[10]+1
IF (_ARTIS[6]<>0)
IF (_ARTIS[10]==_ARTIS[14])
_ARTIS[4]=_ARTIS[14] _ARTIS[5]=_ARTIS[14]
IF (_ARTIS[14]+_ARTIS[6]<=_SC_TOOL_VALI[5])
_ARTIS[14]=_ARTIS[14]+_ARTIS[6]
ENDIF
ENDIF
ELSE
IF ((_SC_TOOL_VALI[4]<=_ARTIS[10]) AND (_ARTIS[10]<=_SC_TOOL_VALI[5]))
_ARTIS[4]=_ARTIS[10] _ARTIS[5]=_ARTIS[10]
ENDIF
ENDIF
ENDIF
IF (IH1==1)
LSP[1,0]=SEC[0] LSP[1,1]=SEC[1] _LS=_NS
_MERKSP[0,0]=SEC[0] _MERKSP[0,1]=SEC[1] _MERKSP[0,2]=_NS
IF _MK[10]==2
_MERKSP[1,0]=SEC[0] _MERKSP[1,1]=SEC[1] _MERKSP[1,2]=_NS
ENDIF
ENDIF
IF (IH1>=_MERKIH1)
IH3=(IH1-_MERKIH1) MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
ENDIF
IH3=IH1 MOD _MSPL
_MERKSP[IH3,0]=SEC[0] _MERKSP[IH3,1]=SEC[1] _MERKSP[IH3,2]=_NS
_ATTAB=LSP[1,LP]+SAB[4]
_MFX6:IF IH1<>AZI GOTOF _YQG6 IF NOT _MK[2] GOTOF _YQG6
ZUE=_MK[3] SEC[0]=HEA[2] SEC[1]=HEA[3]
GOTOF _YQJ6
_YQG6:HH3=_KT[ZUE,3+LP] HH4=_KT[ZUE,5+LP]
IF (((HH4-ATT)>0) OR (ABS(HH4-ATT)<_EPS)) AND ((HH3-ATT)<0) GOTOF _YQH6 IF (((HH4-ATT)<0) OR (ABS(HH4-ATT)<_EPS)) AND ((HH3-ATT)>0) GOTOF _YQH6
ZUE=_KT[ZUE,1]
GOTOB _MFX6
_YQH6:ZT[0,3+LP]=ATT ZT[0,5+LP]=ATT SEC[0]=SEC[0] SEC[1]=SEC[1] FLAG=INTERSEC(_KT[ZUE],ZT[0],SEC)
IF FLAG==0 GOTOF FEHL73
IF IH1==AZI
IF (ABS(SEC[LP]-HEA[4+LP])>0) AND (ABS(SEC[LP]-HEA[4+LP])<_EPS)
SEC[0]=HEA[4] SEC[1]=HEA[5]
ENDIF
ENDIF
_YQJ6:
IF (_ATTAB-_KT[ZLE,5+LP])*IA>0
LSP[2,0]=_KT[ZLE,5] LSP[2,1]=_KT[ZLE,6] _LSNEU=ZLE
ENDIF
IF ((_ARTIS[11]==3) AND (_ARTIS[12]<>1) AND (_ARTIS[10]==_ARTIS[4]))
M=QU(_ARTIS[7])
ENDIF
HH5=SM[0]*2
IF ZUA<>ZUE GOTOF _YQK6
HH1=_KT[ZUA,3] HH2=_KT[ZUA,4] HH3=_KT[ZUA,5] HH4=_KT[ZUA,6]
_KT[ZUA,10-LP]=(_KT[ZUA,10-LP]-HH5)*_SRF _KT[ZUA,4-LP]=(LSP[0,1-LP]-HH5)*_SRF _KT[ZUA,3+LP]=LSP[0,LP]*_ZRF
_KT[ZUA,6-LP]=(SEC[1-LP]-HH5)*_SRF _KT[ZUA,5+LP]=SEC[LP]*_ZRF _KT[ZUA,9+LP]=_KT[ZUA,9+LP]*_ZRF
IF NOT((ABS(_KT[ZUA,3]-_KT[ZUA,5])<_EPS) AND (ABS(_KT[ZUA,4]-_KT[ZUA,6])<_EPS))
N63 EXECTAB(_KT[ZUA])
ENDIF
_KT[ZUA,9+LP]=_KT[ZUA,9+LP]/_ZRF _KT[ZUA,3]=HH1 _KT[ZUA,4]=HH2 _KT[ZUA,5]=HH3 _KT[ZUA,6]=HH4 _KT[ZUA,10-LP]=_KT[ZUA,10-LP]/_SRF+HH5
GOTOF _YQP6
_YQK6:HH1=_KT[ZUA,3] HH2=_KT[ZUA,4] HH3=_KT[ZUA,6-LP] HH4=_KT[ZUA,10-LP] _KT[ZUA,4-LP]=(LSP[0,1-LP]-HH5)*_SRF _KT[ZUA,3+LP]=LSP[0,LP]*_ZRF
_KT[ZUA,6-LP]=(_KT[ZUA,6-LP]-HH5)*_SRF _KT[ZUA,10-LP]=(_KT[ZUA,10-LP]-HH5)*_SRF _KT[ZUA,5+LP]=_KT[ZUA,5+LP]*_ZRF _KT[ZUA,9+LP]=_KT[ZUA,9+LP]*_ZRF
IF NOT((ABS(_KT[ZUA,3]-_KT[ZUA,5])<_EPS) AND (ABS(_KT[ZUA,4]-_KT[ZUA,6])<_EPS))
N630 EXECTAB(_KT[ZUA])
ENDIF
_KT[ZUA,5+LP]=_KT[ZUA,5+LP]/_ZRF _KT[ZUA,9+LP]=_KT[ZUA,9+LP]/_ZRF _KT[ZUA,3]=HH1 _KT[ZUA,4]=HH2 _KT[ZUA,6-LP]=HH3 _KT[ZUA,10-LP]=HH4 HH3=_KT[ZUE,5] HH4=_KT[ZUE,6] _KT[ZUE,6-LP]=SEC[1-LP]-HH5 _KT[ZUE,5+LP]=SEC[LP] IH2=ZUA
_YQL6:IH2=_KT[IH2,1]
IF IH2==ZUE GOTOF _YQM6
HH1=_KT[IH2,4-LP] HH2=_KT[IH2,6-LP] _KT[IH2,4-LP]=_KT[IH2,4-LP]-HH5 _KT[IH2,6-LP]=_KT[IH2,6-LP]-HH5 _KT[IH2,10-LP]=_KT[IH2,10-LP]-HH5
IF ABS(_KT[IH2,3+LP]-_KT[IH2,5+LP])>=_EPS GOTOF _A6
N64 G1 F=FF1
_A6:_KT[IH2,3+LP]=_KT[IH2,3+LP]*_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]*_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]*_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]*_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]*_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]*_SRF
IF NOT((ABS(_KT[IH2,3]-_KT[IH2,5])<_EPS) AND (ABS(_KT[IH2,4]-_KT[IH2,6])<_EPS))
N640 EXECTAB(_KT[IH2])
ENDIF
_KT[IH2,3+LP]=_KT[IH2,3+LP]/_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]/_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]/_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]/_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]/_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]/_SRF
N640 G1 F=FF2
_KT[IH2,10-LP]=_KT[IH2,10-LP]+HH5 _KT[IH2,4-LP]=HH1 _KT[IH2,6-LP]=HH2
GOTOB _YQL6
_YQM6:_KT[ZUE,4-LP]=_KT[ZUE,4-LP]-HH5 _KT[ZUE,10-LP]=_KT[ZUE,10-LP]-HH5
IF ABS(_KT[ZUE,3+LP]-_KT[ZUE,5+LP])>=_EPS GOTOF _B6
N65 G1 F=FF1
_B6:_KT[ZUE,3+LP]=_KT[ZUE,3+LP]*_ZRF _KT[ZUE,5+LP]=_KT[ZUE,5+LP]*_ZRF _KT[ZUE,4-LP]=_KT[ZUE,4-LP]*_SRF _KT[ZUE,6-LP]=_KT[ZUE,6-LP]*_SRF _KT[ZUE,9+LP]=_KT[ZUE,9+LP]*_ZRF _KT[ZUE,10-LP]=_KT[ZUE,10-LP]*_SRF
IF NOT((ABS(_KT[ZUE,3]-_KT[ZUE,5])<_EPS) AND (ABS(_KT[ZUE,4]-_KT[ZUE,6])<_EPS))
N650 EXECTAB(_KT[ZUE])
ENDIF
_KT[ZUE,3+LP]=_KT[ZUE,3+LP]/_ZRF _KT[ZUE,5+LP]=_KT[ZUE,5+LP]/_ZRF _KT[ZUE,4-LP]=_KT[ZUE,4-LP]/_SRF _KT[ZUE,6-LP]=_KT[ZUE,6-LP]/_SRF
_KT[ZUE,9+LP]=_KT[ZUE,9+LP]/_ZRF _KT[ZUE,10-LP]=_KT[ZUE,10-LP]/_SRF _KT[ZUE,4-LP]=_KT[ZUE,4-LP]+HH5 _KT[ZUE,10-LP]=_KT[ZUE,10-LP]+HH5 _KT[ZUE,5]=HH3 _KT[ZUE,6]=HH4
_YQP6:
IF (IH1>_MERKIH1)
IH3=(IH1-_MERKIH1) MOD _MSPL
LSP[0,0]=_MERKSP[IH3,3] LSP[0,1]=_MERKSP[IH3,4] ZUA=_MERKSP[IH3,5]
IF ABS(LSP[0,LP]-_KT[ZUA,5+LP])<_EPS
ZUA=_KT[ZUA,1]
ENDIF
ENDIF
IH3=IH1 MOD _MSPL
_MERKSP[IH3,3+LP]=SEC[LP] _MERKSP[IH3,4-LP]=SEC[1-LP]-HH5
_MERKSP[IH3,5]=ZUE TAK[1]=LSP[0,1-LP]
IF IH1<=_MERKIH1
TAK[1]=TAK[1]-HH5
ENDIF
II=ABS(_KT[ZHN,7])
IF IH1<>AZI GOTOF _MXG6 IF ABS(_DB)<>0 GOTOF _MXG6
_NS=II SEC[0]=_KT[II,3] SEC[1]=_KT[II,4]
GOTOF _YQQ6
_MXG6:HH3=_KT[II,3+LP] HH4=_KT[II,5+LP]
IF (IA==1)AND (ABS(HH3-HH4)>=_EPS)
IF ((HH4-ATT)>0) AND ((HH3-ATT)<0) GOTOF _MHX6
IF (ABS(HH4-ATT)<_EPS) AND ((HH3-ATT)<0)
SEC[0]=_KT[II,5] SEC[1]=_KT[II,6]
_NS=_KT[II,1]
IF _KT[_NS,7]>0
_NS=_KT[_NS,0]
ENDIF
GOTOF _E6
ENDIF
IF ((HH4-ATT)>0) AND (ABS(HH3-ATT)<_EPS)
SEC[0]=_KT[II,3] SEC[1]=_KT[II,4] _MK[1]=1
_NS=_KT[II,0]
GOTOF _E6
ENDIF
ENDIF
IF (IA==-1)AND(ABS(HH3-HH4)>=_EPS)
IF ((HH4-ATT)<0) AND ((HH3-ATT)>0) GOTOF _MHX6
IF (ABS(HH4-ATT)<_EPS) AND ((HH3-ATT)>0)
SEC[0]=_KT[II,5] SEC[1]=_KT[II,6]
_NS=_KT[II,1]
IF _KT[_NS,7]>0
_NS=_KT[_NS,0]
ENDIF
GOTOF _E6
ENDIF
IF ((HH4-ATT)<0) AND (ABS(HH3-ATT)<_EPS)
SEC[0]=_KT[II,3] SEC[1]=_KT[II,4] _MK[1]=1
_NS=_KT[II,0]
GOTOF _E6
ENDIF
ENDIF
II=_KT[II,1]
GOTOB _MXG6
_MHX6:_NS=II _MK[1]=0
_MJX6:SEC[0]=SEC[0] SEC[1]=SEC[1] ZT[0,3+LP]=ATT ZT[0,5+LP]=ATT FLAG=INTERSEC(_KT[_NS],ZT[0],SEC)
IF FLAG==0 GOTOF FEHL75
_E6:
IF ($P_EP[_SA]/_SRF-SEC[1-LP])*SLR<0
IF ABS($P_EP[_SA]/_SRF-SEC[1-LP])<0.001
GOTOF _M5304
ENDIF
II=_KT[_NS,1]
GOTOB _MXG6
ENDIF
_M5304:
IF DAM==0 GOTOF _YQQ6
HH1=$P_EP[_SA]/_SRF
_YXR6:IF ABS(HH1-SEC[1-LP])<=DAM GOTOF _YQQ6
HH1=HH1-SLR*DAM
IF ABS(HH1-SEC[1-LP])<=ABS(SAB[3-LP]) GOTOF _YQQ6
N66 G1 AX[_SA]=_SRF*HH1 AX[_ZA]=_ZRF*SEC[LP] F=FF1
N660 G4 F=DT
GOTOB _YXR6
N66 _YQQ6:G1 AX[_SA]=_SRF*SEC[1-LP] AX[_ZA]=_ZRF*SEC[LP] F=FF1
IF ABS(SEC[1-LP]-LSP[1,1-LP])>ABS(SAB[4])
IH5=IH5+1
ELSE
IH5=0
ENDIF
IF _MK[10]<>2
IF IH5>1
IH3=(IH1-1) MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
ENDIF
ELSE
IH3=IH1 MOD _MSPL
LSP[1,0]=_MERKSP[IH3,0] LSP[1,1]=_MERKSP[IH3,1] _LS=_MERKSP[IH3,2]
_ATTAB=LSP[1,LP]+SAB[4]
ENDIF
IF (IH1==1)
IH3=_LS IH6=0
IF (_LS==ZLE) AND (ABS(LSP[1,LP]-_KT[ZLE,5+LP])<_EPS)
GOTOF _M5231
ENDIF
_M5230: IH3=_KT[IH3,1]
IF NOT (_KT[IH3,7]<>0)
_NZP[0]=_KT[IH3,5] _NZP[1]=_KT[IH3,6]
IF SQRT( (_NZP[0]-LSP[1,0])*(_NZP[0]-LSP[1,0]) + (_NZP[1]-LSP[1,1])*(_NZP[1]-LSP[1,1]) ) - _MERKWZR <0
IF NOT(IH3==ZLE)
GOTOB _M5230
ELSE
_ATTAB=_ATTAB+(_NZP[LP]-LSP[1,LP])
_LS=IH3 LSP[1,0]=_KT[_LS,5] LSP[1,1]=_KT[_LS,6]
GOTOF _M5231
ENDIF
ELSE
IF NOT(IH3==ZLE)
IF (_KT[IH3,5+LP]-_ATTAB)* IA>0
ZT[0,3+LP]=LSP[0,LP]+SAB[4] ZT[0,5+LP]=ZT[0,3+LP] _LS=IH3
FLAG=INTERSEC(_KT[IH3],ZT[0],LSP[1])
IF FLAG==0 GOTOF FEHL76
ELSE
_ATTAB=_ATTAB+(_NZP[LP]-LSP[1,LP])
_LS=IH3 LSP[1,0]=_KT[_LS,5] LSP[1,1]=_KT[_LS,6]
ENDIF
ELSE
IF (_KT[ZLE,5+LP]-_ATTAB)* IA>0
ZT[0,3+LP]=LSP[0,LP]+SAB[4] ZT[0,5+LP]=ZT[0,3+LP]
FLAG=INTERSEC(_KT[ZLE],ZT[0],LSP[1])
IF NOT(AZI==1)
_LS=ZLE
ENDIF
IF FLAG==0 GOTOF FEHL76
ENDIF
ENDIF
ENDIF
ELSE
IF (_KT[IH3,7]<0) AND (_KT[IH3,7]>-99)
IH6=1
ENDIF
ENDIF
ELSE
IH6=0
ENDIF
_M5231:
IF _MK[10]==1 GOTOF _M5302
IF _MK[1]==0 GOTOF _D6
_NS=_KT[_NS,1]
_D6:HH4=_KT[_NS,3] HH5=_KT[_NS,4] _KT[_NS,3]=SEC[0] _KT[_NS,4]=SEC[1] HH1=_KT[_LS,5] HH2=_KT[_LS,6] _KT[_LS,5]=LSP[1,0] _KT[_LS,6]=LSP[1,1] IH2=_NS
GOTOF _YQW6
_YXS6:IH2=_KT[IH2,1]
IF _KT[IH2,7]<=0 GOTOF _YQW6
IF ABS(HEA[LP]-_KT[IH2,3+LP])<=_EPS
N684 G1 G90 AX[_ZA]=LSP[1,LP]*_ZRF
GOTOF _YQX6
ENDIF
HH3=_KT[IH2,3+LP] IH2=_KT[IH2,1]
_YQT6:IF (ABS(_KT[IH2,3+LP]-HH3)<=_EPS) AND (_KT[IH2,7]<=0) GOTOF _YQU6
IH2=_KT[IH2,1]
GOTOB _YQT6
N67 _YQU6:G1 G[10]=_GG10 G90 AX [_SA]=_SRF*_KT[IH2,4-LP] AX[_ZA]=_ZRF*_KT[IH2,3+LP]
IH3=(IH1+1) MOD _MSPL _MERKSP[IH3,0]=SEC[0] _MERKSP[IH3,1]=SEC[1] _MERKSP[IH3,2]=_NS
_ATTAB=LSP[1,LP]+SAB[4]
_YQW6:IF DAM==0 GOTOF _YW6
IF (_KT[IH2,2]>1)AND(_KT[IH2,2]<10) OR (_KT[IH2,2]>11)AND(_KT[IH2,2]<20) OR (_KT[IH2,2]>21)AND(_KT[IH2,2]<30) OR (_KT[IH2,2]>31) GOTOF _YW6
IF ABS(_KT[IH2,8]>_EPS) GOTOF _YW6 IF ABS(_KT[IH2,4-LP]-_KT[IH2,6-LP])<=DAM GOTOF _YW6
HH3=_KT[IH2,4-LP]
_MF6:IF ABS(HH3-_KT[IH2,6-LP])<=DAM GOTOF _MG6
N680 G1 G91 AX[_SA]=_SRF*(-SLR*DAM)
N681 G4 F=DT
HH3=HH3-SLR*DAM
IF ABS(HH3-_KT[IH2,6-LP])<=ABS(SAB[3-LP]) GOTOF _MG6
GOTOB _MF6
N682 _MG6:G1 G90 AX[_SA]=_SRF*_KT[IH2,6-LP]
GOTOF _YX6
_YW6:_KT[IH2,3+LP]=_KT[IH2,3+LP]*_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]*_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]*_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]*_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]*_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]*_SRF
IF NOT((ABS(_KT[IH2,3]-_KT[IH2,5])<_EPS) AND (ABS(_KT[IH2,4]-_KT[IH2,6])<_EPS))
IF ABS($P_EP[_ZA]*TAK[3]-_KT[IH2,5+LP])<_EPS
TAK[5]=_KT[IH2,5+LP]/_ZRF TAK[4]=1
ENDIF
N683 EXECTAB(_KT[IH2])
ENDIF
_KT[IH2,3+LP]=_KT[IH2,3+LP]/_ZRF _KT[IH2,5+LP]=_KT[IH2,5+LP]/_ZRF _KT[IH2,4-LP]=_KT[IH2,4-LP]/_SRF _KT[IH2,6-LP]=_KT[IH2,6-LP]/_SRF _KT[IH2,9+LP]=_KT[IH2,9+LP]/_ZRF _KT[IH2,10-LP]=_KT[IH2,10-LP]/_SRF
_YX6:IF IH2==ZLE GOTOF _YQX6
IF _MK[10]==2 GOTOF _M5221
IF ( (AZI==1) AND (IH1==1) )
IF (ABS(_KT[_LS,3+LP]-_KT[_LS,5+LP])<_EPS )
LSP[1,LP]=_KT[_LS,3+LP] LSP[1,1-LP]=_KT[_LS,4-LP]
_KT[_LS,5]=HH1 _KT[_LS,6]=HH2
_LS=_KT[_LS,0]
HH1=_KT[_LS,5] HH2=_KT[_LS,6]
ENDIF
GOTOF _M5221
ENDIF
IF (IH5>1) AND (ABS(LSP[1,LP]-_KT[IH2,3+LP])<=ABS(TAK[0]))
ZT[1,4-LP]=_KT[IH2,4-LP]-SLR*_MERKWZR ZT[1,6-LP]=ZT[1,4-LP] IH3=IH2
_M5220:
IF _KT[IH3,7]>0
_KT[_LS,5]=HH1 _KT[_LS,6]=HH2 IH3=_KT[IH3,0] LSP[1,0]=_KT[IH3,5] LSP[1,1]=_KT[IH3,6] _LS=IH3 HH1=_KT[_LS,5] HH2=_KT[_LS,6]
IF (ABS(_KT[IH3,5+LP]-$P_EP[_ZA]*TAK[3]/_ZRF)<_EPS) AND (ABS(_KT[IH3,6-LP]-$P_EP[_SA]*TAK[3]/_SRF)<_EPS)
_LS=IH2 HH1=_KT[_LS,5] HH2=_KT[_LS,6]
GOTOF _YQX6
ENDIF
ELSE
IF ((_KT[IH3,3]==_KT[IH3,5])AND(_KT[IH3,4]==_KT[IH3,6]))
FLAG=0
ELSE
FLAG=INTERSEC(_KT[IH3],ZT[1],_NZP)
ENDIF
IF FLAG==1
_KT[_LS,5]=HH1 _KT[_LS,6]=HH2 LSP[1,0]=_NZP[0] LSP[1,1]=_NZP[1] _LS=IH3
HH1=_KT[_LS,5] HH2=_KT[_LS,6] _KT[_LS,5]=LSP[1,0] _KT[_LS,6]=LSP[1,1]
ELSE
IF IH3==_LS
GOTOF _M5221
ENDIF
IH3=_KT[IH3,1]
IF IH3<>_LS
GOTOB _M5220
ENDIF
ENDIF
ENDIF
ENDIF
_M5221:
IF _LS<>IH2 GOTOB _YXS6
_YQX6:_KT[_NS,3]=HH4 _KT[_NS,4]=HH5 _KT[_LS,5]=HH1 _KT[_LS,6]=HH2
IF _MK[1]==0 GOTOF _YQZ6
_NS=_KT[_NS,0]
_YQZ6:
_M5302:
IF _MK[10]==1
IF NOT((IH1==AZI) AND (_MK[0]<>0))
N6801 G1 G91 AX[_ZA]=_ZRF*SAB[4]
N6802 G0 G91 AX[_ZA]=_ZRF*SAB[2+LP] AX[_SA]=_SRF*SAB[3-LP]
N6803 G90
ENDIF
GOTOF _YZ6B
ENDIF
IF IH6==1
N684 G1 G90 AX[_SA]=_SRF*_KT[_LS,6-LP]-SAB[1-LP]/ABS(SAB[1-LP])*_MERKWZR
ENDIF
IF ABS(LSP[1,LP]-_KT[ZLE,5+LP])<=_EPS
IF (ABS(SAB[4])>0)
IF (ABS(_KT[ZLE,3+LP]-_KT[ZLE,5+LP])<_EPS)
N685 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4])*_ZRF
GOTOF _MT66
ENDIF
IF (TAK[4]==1) AND ((TAK[5]-LSP[1,LP])*IA>=0)
N685 G1 G90 AX[_ZA]=(TAK[5]+SAB[4])*_ZRF
GOTOF _MT66
ENDIF
ENDIF
IF ABS(SAB[4])-ABS(TAK[0])>=0
IF ABS(SAB[4]/2)-ABS(TAK[0])<0
N686 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4]/2)*_ZRF
ELSE
N687 G1 G90 AX[_ZA]=(LSP[1,LP]+SAB[4]-TAK[0]*IA)*_ZRF
ENDIF
ENDIF
ENDIF
IF (_ATTAB-LSP[1,LP])*IA>0
IF _ZSD13I==0
IF (IH1<>AZI) OR ((IH1==AZI) AND (_MK[0])==0)
N688 G1 G90 AX[_ZA]=_ATTAB*_ZRF
ELSE
IF (LSP[1,1-LP]-_KT[ZMX,4-LP])*SLR<0
N688 G1 G90 AX[_ZA]=_ATTAB*_ZRF
ELSE
N689 G1 G90 AX[_ZA]=(_KT[ZMX,3+LP]+SAB[LP])*_ZRF
GOTOF _MPX6
ENDIF
ENDIF
ENDIF
ENDIF
_MT66:TAK[4]=0 TAK[5]=0
IF _KT[IH2,8]==0 GOTOF _YZ6A
N693 G0 G91 AX[_ZA]=_ZRF*SAB[LP] AX[_SA]=_SRF*SAB[1-LP]
GOTOF _YZ6B
N692 _YZ6A:G0 G91 AX[_ZA]=_ZRF*SAB[LP] AX[_SA]=_SRF*SAB[1-LP]
N693 G91 AX[_SA]=_SRF*SAB[1-LP]
_YZ6B:IF IH1==AZI GOTOF _MPX6
N695 G90 AX[_SA]=TAK[1]*_SRF
N696 G1 F=FF2 G90 AX[_ZA]=_ZRF*LSP[0,LP] AX[_SA]=_SRF*TAK[1]
_MPX6:
IF ((_ARTIS[11]==3) AND (_ARTIS[12]<>1) AND (_ARTIS[10]==_ARTIS[5]))
M=QU(_ARTIS[8])
ENDIF
IF IH1<AZI GOTOB _YQF6
_MQ6:_MK[0]=_MK[0]-1 ZMX=ABS(_KT[ZHN,7]) ZMX=ABS(_KT[ZMX,7])
IF _MK[0]>1
_ZMXN=ABS(_KT[ZMX,7]) _ZMXN=ABS(_KT[_ZMXN,7])
ENDIF
IF _MK[0]<>0 GOTOB _MBX6
IF VARI==1
IF (ZSP[2+LP]-$P_EP[_ZA])*IA>0
N696 G0 G90 G[10]=_GG10 AX[_ZA]=ZSP[LP]
ENDIF
IF _MK[4]<>9
N697 G40 G90 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[2+LP]
ELSE
N697 G40 G90 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[LP]
ENDIF
ELSE
IF (ZSP[2+LP]+SAB[4]-$P_EP[_ZA]*TAK[3])*IA>0
N698 G0 G90 G[10]=_GG10 AX[_ZA]=ZSP[LP]
ENDIF
IF _MK[4]>4
IF NOT _VR
N699 G0 G40 G90 G[10]=_GG10 F=FF3 AX[_SA]=_SRF*(_KT[_PTABA,6-LP]+SAB[3-LP])
ELSE
N699 G0 G40 G90 G[10]=_GG10 F=FF3 AX[_SA]=_SRF*(_KT[_PTABA,4-LP]+SAB[3-LP])
ENDIF
ELSE
IF NOT _VR
N699 G0 G40 G90 G[10]=_GG10 F=FF3 AX[_SA]=_SRF*(_KT[_PTABA,6-LP]+SAB[1-LP])
ELSE
N699 G0 G40 G90 G[10]=_GG10 F=FF3 AX[_SA]=_SRF*(_KT[_PTABA,4-LP]+SAB[1-LP])
ENDIF
ENDIF
ENDIF
IF _MERK_CDON==2
CDON
ENDIF
_MAX7:_GG7=_MK[5]-39
IF ($SCS_ISO_T_FUNCTION_MASK B_AND 'B1') GOTOF _MYX7
IF _MK[13]==1
N760 G0 G90 G64 F=FF3 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[2+LP]
N761 G0 AX[_SA]=_SRF*_KT[_PTABA,6-LP]
N762 G1 G[7]=_GG7 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,5+LP]
GOTOF _MBX7
ENDIF
IF (VARI==5) AND (_MK[4]<5)
ZSP[LP]=ZSP[LP]*_ZRF ZSP[1-LP]=ZSP[1-LP]*_SRF ZSP[2+LP]=ZSP[2+LP]*_ZRF ZSP[3-LP]=ZSP[3-LP]*_SRF
IF _MK[9]==2
N750 G0 G90 G64 F=FF3
ELSE
N750 G0 G90 G64 F=FF3 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[2+LP]
ENDIF
IH1=_KT[_PTABA,1] II=_KT[IH1,2] II=II MOD 10 HH1=_KT[IH1,8] HH5=_MERKWZR
IF II<2
IF (HH1==0) OR (HH1==90)
IF HH1==0
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ELSE
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ENDIF
ELSE
HH5=HH5/2
IF _KT[IH1,7]<=0
SAB[5+LP]=-IA*HH5*ABS(SIN(HH1))
ELSE
SAB[5+LP]=IA*HH5*ABS(SIN(HH1))
ENDIF
SAB[6-LP]=SLR*HH5*ABS(COS(HH1))
ENDIF
ELSE
IF NOT(ABS(_KT[IH1,3]-_KT[IH1,9]))<_EPS
HH5=HH5/2
HH2=(_KT[IH1,4]-_KT[IH1,10])/(_KT[IH1,3]-_KT[IH1,9]) HH3=HH5*HH5/(1+HH2*HH2) HH4=SQRT(HH3)
IF _KT[IH1,7]<=0
SAB[5+LP]=-IA*(HH4)
ELSE
SAB[5+LP]=IA*(HH4)
ENDIF
SAB[6-LP]=SLR*(ABS(HH2)*HH4)
ELSE
SAB[5+LP]=0 SAB[6-LP]=_MERKWZR*SLR
ENDIF
ENDIF
IF NOT _VR
HH2=ZSP[2+LP]-_ZRF*(_KT[_PTABA,5+LP]+SAB[5+LP]) HH3=ZSP[3-LP]-_SRF*(_KT[_PTABA,6-LP]+SAB[6-LP])
HH2=HH2/_ZRF HH3=HH3/_SRF
IF SQRT(HH2*HH2+HH3*HH3)>ABS(_MERKWZR)+ABS(SM[1])
IF HH2<>0
HH4=HH2/ABS(HH2)
ELSE
HH4=1
ENDIF
IF HH3<>0
HH5=HH3/ABS(HH3)
ELSE
HH5=1
ENDIF
HH1=ABS(HH3/HH2) HH2=(ABS(_MERKWZR)+ABS(SM[1]))*HH4 HH3=ABS(HH2)*HH5*HH1
ELSE
HH2=0 HH3=0
ENDIF
N751 G0 G[7]=_GG7 AX[_SA]=ZSP[1-LP] AX[_ZA]=ZSP[0+LP]
N752 AX[_SA]=_SRF*(_KT[_PTABA,6-LP]+SAB[1-LP]+ABS(SAB[4])*SLR) AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP])
N7520 G1 F=FF3 AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP]+SAB[5+LP]) AX[_SA]=_SRF*(_KT[_PTABA,6-LP]+SAB[6-LP])
N753 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,5+LP] AX[_SA]=_SRF*_KT[_PTABA,6-LP]
ELSE
HH2=ZSP[2+LP]-_ZRF*(_KT[_PTABA,3+LP]+SAB[5+LP]) HH3=ZSP[3-LP]-_SRF*(_KT[_PTABA,4-LP]+SAB[6-LP])
HH2=HH2/_ZRF HH3=HH3/_SRF
IF SQRT(HH2*HH2+HH3*HH3)>ABS(_MERKWZR)+ABS(SM[1])
IF HH2<>0
HH4=HH2/ABS(HH2)
ELSE
HH4=1
ENDIF
IF HH3<>0
HH5=HH3/ABS(HH3)
ELSE
HH5=1
ENDIF
HH1=ABS(HH3/HH2) HH2=(ABS(_MERKWZR)+ABS(SM[1]))*HH4 HH3=ABS(HH2)*HH5*HH1
ELSE
HH2=0 HH3=0
ENDIF
N751 G0 G[7]=_GG7 AX[_SA]=ZSP[1-LP] AX[_ZA]=ZSP[0+LP]
N752 AX[_SA]=_SRF*(_KT[_PTABA,4-LP]+SAB[1-LP]+ABS(SAB[4])*SLR) AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP])
N7520 G1 F=FF3 AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP]+SAB[5+LP]) AX[_SA]=_SRF*(_KT[_PTABA,4-LP]+SAB[6-LP])
N753 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,3+LP] AX[_SA]=_SRF*_KT[_PTABA,4-LP]
ENDIF
GOTOF _MBX7
ENDIF
IF VARI==5
ZSP[LP]=ZSP[LP]*_ZRF ZSP[1-LP]=ZSP[1-LP]*_SRF ZSP[2+LP]=ZSP[2+LP]*_ZRF ZSP[3-LP]=ZSP[3-LP]*_SRF
IF _MK[9]==2
N750 G0 G90 G64 G[7]=_GG7 NORM F=FF3
IF NOT _VR
N752 G0 G90 G64 AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP]+SAB[LP])+SM[1] AX[_SA]=ZSP[1-LP]
N753 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,5+LP] AX[_SA]=_SRF*_KT[_PTABA,6-LP]
ELSE
N754 G0 G90 G64 AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP]+SAB[LP])+SM[1] AX[_SA]=ZSP[1-LP]
N755 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,3+LP] AX[_SA]=_SRF*_KT[_PTABA,4-LP]
ENDIF
ELSE
N750 G0 G90 G64 G[7]=_GG7 NORM F=FF3 AX[_SA]=ZSP[1-LP] AX[_ZA]=ZSP[LP]
IF NOT _VR
N752 G0 G90 G64 AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP]+SAB[LP])+SM[1]
N753 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,5+LP] AX[_SA]=_SRF*_KT[_PTABA,6-LP]
ELSE
N754 G0 G90 G64 AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP]+SAB[LP])+SM[1]
N755 G1 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,3+LP] AX[_SA]=_SRF*_KT[_PTABA,4-LP]
ENDIF
ENDIF
GOTOF _MBX7
ENDIF
IF VARI==1 GOTOF _MYX7
SBLOF
IF ($AN_NCK_VERSION>=_NCVCYCFR)
N7 $P_CYCFRAME=_OLDFR
ELSE
N7 ATRANS AX[_ZA]=-SM[1] AX[_SA]=-SM[0]
ENDIF
SBLON
_M5205:
IF NOT _VR
N700 AX[_ZA]=_ZRF*(_KT[_PTABA,5+LP]+SAB[2+LP])+SM[1]
N711 G1 G[7]=_GG7 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,5+LP] AX[_SA]=_SRF*_KT[_PTABA,6-LP]
ELSE
N700 AX[_ZA]=_ZRF*(_KT[_PTABA,3+LP]+SAB[2+LP])+SM[1]
N711 G1 G[7]=_GG7 F=FF3 AX[_ZA]=_ZRF*_KT[_PTABA,3+LP] AX[_SA]=_SRF*_KT[_PTABA,4-LP]
ENDIF
_MBX7:
_MDX7:
IF (_ARTIS[12]>0)
M=QU(_ARTIS[7])
ENDIF
II=_PTABA
_NEXTII:
_NEXTII1: IH5=_KT[II,1] IH6=_KT[II,2] IH6=IH6 MOD 10
IF IH5==0
IF ( (ABS(_KT[II,3+LP]-_KT[II,5+LP])<_EPS) AND (ABS(_KT[II,4-LP]-_KT[II,6-LP])>_EPS) )
_KT[II,3+LP]=_KT[II,3+LP]*_ZRF _KT[II,5+LP]=_KT[II,5+LP]*_ZRF _KT[II,4-LP]=_KT[II,4-LP]*_SRF _KT[II,6-LP]=_KT[II,6-LP]*_SRF _KT[II,9+LP]=_KT[II,9+LP]*_ZRF _KT[II,10-LP]=_KT[II,10-LP]*_SRF
EXECTAB(_KT[II])
_KT[II,3+LP]=_KT[II,3+LP]/_ZRF _KT[II,5+LP]=_KT[II,5+LP]/_ZRF _KT[II,4-LP]=_KT[II,4-LP]/_SRF _KT[II,6-LP]=_KT[II,6-LP]/_SRF _KT[II,9+LP]=_KT[II,9+LP]/_ZRF _KT[II,10-LP]=_KT[II,10-LP]/_SRF
GOTOF _NEXTII2
ELSE
GOTOF _NEXTII2
ENDIF
ENDIF
IF _KT[II,2]==_KT[IH5,2]
IF IH6<2
IF _KT[II,8]==_KT[IH5,8]
II=_KT[II,1]
GOTOB _NEXTII1
ENDIF
ELSE
IF ((_KT[II,9]==_KT[IH5,9]) AND (_KT[II,10]==_KT[IH5,10]))
II=_KT[II,1]
GOTOB _NEXTII1
ENDIF
ENDIF
ENDIF
IF IH6<2
IF IH6==0
N720 G0 AX[_SA]=_SRF*_KT[II,6-LP] AX[_ZA]=_ZRF*_KT[II,5+LP]
ELSE
N721 G1 AX[_SA]=_SRF*_KT[II,6-LP] AX[_ZA]=_ZRF*_KT[II,5+LP]
ENDIF
ELSE
IF IH6==2
N723 G2 AX[_SA]=_SRF*_KT[II,6-LP] AX[_ZA]=_ZRF*_KT[II,5+LP] IP[_SA]=AC(_KT[II,10-LP]*_SRF) IP[_ZA]=AC(_KT[II,9+LP]*_ZRF)
ELSE
N724 G3 AX[_SA]=_SRF*_KT[II,6-LP] AX[_ZA]=_ZRF*_KT[II,5+LP] IP[_SA]=AC(_KT[II,10-LP]*_SRF) IP[_ZA]=AC(_KT[II,9+LP]*_ZRF)
ENDIF
ENDIF
II=_KT[II,1]
IF II<>0 GOTOB _NEXTII
_NEXTII2:
IF PLAN==1
DIAMOF
ELSE
DIAMON
ENDIF
IF ABS($P_EP[_ZA]/_ZRF*TAK[3]-_KT[ZLE,5+LP])<_EPS GOTOF _MFX7
_KT[ZLE,3+LP]=_KT[ZLE,3+LP]*_ZRF _KT[ZLE,5+LP]=_KT[ZLE,5+LP]*_ZRF _KT[ZLE,4-LP]=_KT[ZLE,4-LP]*_SRF _KT[ZLE,6-LP]=_KT[ZLE,6-LP]*_SRF _KT[ZLE,9+LP]=_KT[ZLE,9+LP]*_ZRF _KT[ZLE,10-LP]=_KT[ZLE,10-LP]*_SRF
N73 EXECTAB(_KT[ZLE])
_KT[ZLE,3+LP]=_KT[ZLE,3+LP]/_ZRF _KT[ZLE,5+LP]=_KT[ZLE,5+LP]/_ZRF _KT[ZLE,4-LP]=_KT[ZLE,4-LP]/_SRF _KT[ZLE,6-LP]=_KT[ZLE,6-LP]/_SRF _KT[ZLE,9+LP]=_KT[ZLE,9+LP]/_ZRF _KT[ZLE,10-LP]=_KT[ZLE,10-LP]/_SRF
_MFX7:
N77 G0 G90 G[10]=_GG10 AX[_ZA]=ZSP[LP]
IF _MK[9]<>2
IF _MK[4]<>9
N777 G40 G90 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[2+LP]
ELSE
N777 G40 G90 AX[_SA]=ZSP[3-LP] AX[_ZA]=ZSP[LP]
ENDIF
ENDIF
_KT[0,0]=REP(0)
SBLOF
IF (_IS_CYCFR==1)
N780 $P_CYCFRAME=_OLDFR
ELSE
N781 ATRANS AX[_ZA]=-SM[1] AX[_SA]=-SM[0]
ENDIF
RET
N78 _MYX7:G0 G90 AX[_SA]=ZSP[3-LP]
N79 AX[_ZA]=ZSP[2+LP]
MZ7:
MZ7:_KT[0,0]=REP(0)
SBLOF
IF ($AN_NCK_VERSION>=_NCVCYCFR)
N7 $P_CYCFRAME=_OLDFR
ELSE
N7 ATRANS AX[_ZA]=-SM[1] AX[_SA]=-SM[0]
ENDIF
SBLOF
RET
IF ( (_ARTIS[0]==11) OR (_ARTIS[11]==3) )
M=QU(_ARTIS[8])
ENDIF
_SC_LAST_CONT=_SC_LAST_CONT-1
RET
FEHL1:STOPRE
N709501 SETAL(61000)
RET
FEHL2:STOPRE
N709502 SETAL(61604)
RET
FEHL3:STOPRE
N709503 SETAL(61605)
RET
FEHL4:STOPRE
N709504 SETAL(61606)
RET
FEHL5:STOPRE
N709505 SETAL(61607)
RET
FEHL51: STOPRE
N339551 SETAL(61607)
RET
FEHL52: STOPRE
N339552 SETAL(61607)
RET
FEHL6:STOPRE
N709506 SETAL(61002)
RET
N709507 FEHL7:SETAL(61611)
RET
N709571 FEHL71:SETAL(61611)
RET
N709572 FEHL72:SETAL(61611)
RET
N709573 FEHL73:SETAL(61611)
RET
N709574 FEHL74:SETAL(61611)
RET
N709575 FEHL75:SETAL(61611)
RET
N709576 FEHL76:SETAL(61611)
RET
_FEHL8: STOPRE
N709508 SETAL(61019,"(_DMODE: dec4)")
RET
_FEHL9: STOPRE
N709509 SETAL(61158)
RET
_FEHL10: STOPRE
N709510 SETAL(61019,"(_DMODE: dec4 or NPP)")
RET
_FEHL15:STOPRE
N709515 SETAL(62106)
RET
_FEHL16:STOPRE
N709516 SETAL(61906)
RET
_FEHL17: STOPRE
N709517 SETAL(61019,"(_GMODE: dec1)")
RET
_FEHL18: STOPRE
N709518 SETAL(61212)
RET
_FEHL19: STOPRE
N88 SETAL(61023,"MID")
RET
_FEHL20: STOPRE
N339520 SETAL(61016)
RET
_FEHL21: STOPRE
N709520 SETAL(61029,_SERR)
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE398_SPF
PROC CYCLE398(REAL PO1,REAL DM1,REAL PO2,REAL DM2,REAL PO3,REAL DM3,REAL PO4,REAL DM4,REAL APP,REAL ROP,REAL TDEP,REAL FAL,REAL IANG,REAL NSP,INT NRC,INT NID,REAL PP1,REAL PP2,REAL PP3,INT VARI,INT NUMTH,REAL _VRT) SAVE DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 04.07.56.00 2015-07-14
;ISO-T threading
N10 DEF AXIS _ZA,_SA,_IPAX
N11 DEF INT IA,LP=1,RF=1,WI1=90,II,JJ,KK,ZF=1,_NRCI,_INCHFAK,PLAN=1,_ZAF=1,_SAF=1,_NULLWEG[3]=(1,1,1)
N12 DEF INT _ALF, _LIFTNR, _AXZAHL=4, _AKTLFON, _DIA,_ISO,_G76,_ZUKONST
N14 DEF REAL SAB=1,SPV,DEL,TW1,TW2,TW3,RZP,SPS,SPZ,EPZ,EPX,HH1,HH2,HH3,HH4,HH5,ZP[4,4],AEP[2,2],_ZKOR,_ZANF,_HC1
DEF REAL _ANGPLUS, _KEGV, _DESPZ, _FMUL, _LASTDEL
N16 DEF BOOL _MDG
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE398_MPF"
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE398_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,"CYCLE398("<<PO1<<","<<DM1<<","<<PO2<<","<<DM2<<","<<PO3<<","<<DM3<<","<<PO4<<","<<DM4<<","<<APP<<","<<ROP<<","<<TDEP<<","<<FAL<<","<<IANG<<","<<NSP<<","<<NRC<<","<<NID<<","<<PP1<<","<<PP2<<","<<PP3<<","<<VARI<<","<<NUMTH<<","<<_VRT<<")")
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF (DM1==DM2) AND (PO1==PO2)
_NULLWEG[0]=0
ENDIF
IF (DM2==DM3) AND (PO2==PO3)
_NULLWEG[1]=0
ENDIF
IF (DM3==DM4) AND (PO3==PO4)
_NULLWEG[2]=0
ENDIF
IF _VRT<=0
IF ($P_GG[13]==2) OR ($P_GG[13]==4)
SAB=1
ELSE
SAB=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
SAB=_VRT
ENDIF
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FMUL=1000
ELSE
_FMUL=10000
ENDIF
_ISO=(VARI/1000) MOD 10 _G76=0
IF(_ISO>2) GOTOF FEHL1
IF(_ISO==2)
_ISO=1
_G76=1
ENDIF
_AKTLFON=(VARI/10) MOD 10
IF(_AKTLFON>1) GOTOF FEHL1
VARI=VARI MOD 10
DM1=DM1/2 DM2=DM2/2 DM3=DM3/2 DM4=DM4/2 ZP[0,0]=PO2 ZP[0,1]=DM2 ZP[1,0]=PO3 ZP[1,1]=DM3
ZP[2,0]=PO1 ZP[2,1]=DM1 ZP[3,0]=PO4 ZP[3,1]=DM4
_ZA=$P_AXN2 _SA=$P_AXN1 _INCHFAK=$P_GG[13] IA=VARI MOD 2 TW2=TAN(ABS(IANG)) _NRCI=NRC _ZKOR=FAL*TW2
_INCHFAK=_INCHFAK MOD 2
IF $P_GG[29]>=2
PLAN=2
DIAMON
ENDIF
IF (VARI<0)OR(VARI>4) GOTOF FEHL1 IF IA==1 GOTOF _MA1
IA=-1
_MA1:IF NUMTH GOTOF _MMB1
NUMTH=1
_MMB1:IF (NRC<>0) GOTOF _MC1
NRC=1 _NRCI=1
_MC1:
IF NOT(_NULLWEG[0]==0)
HH2=PO2-PO1
IF HH2==0
GOTOF _MD1
ENDIF
N700 TW1=(DM2-DM1)/HH2 WI1=0
IF ABS(TW1)<=1
GOTOF _ME1
ENDIF
_MD1:LP=0
N701 HH2=DM2-DM1 TW1=(PO2-PO1)/HH2 _ZA=$P_AXN1 _SA=$P_AXN2
ELSE
HH2=PO3-PO2
IF HH2==0
GOTOF _MDD1
ENDIF
N700 TW1=(DM3-DM2)/HH2 WI1=0
IF ABS(TW1)<=1
GOTOF _ME1
ENDIF
_MDD1:LP=0
N701 HH2=DM3-DM2 TW1=(PO3-PO2)/HH2 _ZA=$P_AXN1 _SA=$P_AXN2
ENDIF
_ME1:
IF _ZA==AXNAME($MC_DIAMETER_AX_DEF)
_ZAF=PLAN
ENDIF
IF _SA==AXNAME($MC_DIAMETER_AX_DEF)
_SAF=PLAN
ENDIF
HH3=PO4-PO3
IF HH3==0 GOTOF _MG1
N702 TW3=(DM4-DM3)/HH3
IF LP GOTOF _MJ1
_MG1:IF TW3==0 GOTOF _MJ1
N703 TW3=1/TW3
_MJ1:
IF NOT(HH2==0)
N704 RF=HH2/ABS(HH2)
ELSE
RF=1
ENDIF
IA=IA/$P_ACTFRAME[_ZA,SC] SAB=SAB/$P_ACTFRAME[_ZA,SC]
_ML1:IF IANG>=0 GOTOF _MA2 IF (TW1==0)OR(WI1==90) GOTOF _MA2
IANG=ABS(IANG)
_MA2:IF LP==0 GOTOF _MG2
SPS=PO1-RF*APP SPZ=DM1+IA*SAB-TW1*RF*APP EPZ=PO4+RF*ROP EPX=DM4+IA*SAB+TW3*RF*ROP RZP=EPX HH3=EPZ
_DESPZ=0
IF(_G76==1)
IF(IA==1)
IF(SPZ<EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ELSE
IF(SPZ>EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ENDIF
ENDIF
AEP[0,0]=SPS AEP[0,1]=SPZ AEP[1,0]=EPZ AEP[1,1]=EPX
GOTOF _MA3
_MG2:SPS=DM1-RF*APP EPZ=DM4+RF*ROP
IF WI1 GOTOF _MP2
SPZ=PO1+IA*SAB-RF*TW1*APP EPX=PO4+IA*SAB+RF*TW3*ROP
_DESPZ=0
IF(_G76==1)
IF(IA==1)
IF(SPZ<EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ELSE
IF(SPZ>EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ENDIF
ENDIF
GOTOF _MQ2
_MP2:SPZ=PO1+IA EPX=PO4+IA
_DESPZ=0
IF(_G76==1)
IF(IA==1)
IF(SPZ<EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ELSE
IF(SPZ>EPX)
_DESPZ=EPX-SPZ
SPZ=EPX
ENDIF
ENDIF
ENDIF
_MQ2:RZP=EPX HH3=EPX AEP[0,0]=SPZ AEP[0,1]=SPS AEP[1,0]=EPX AEP[1,1]=EPZ
_MA3:IF ABS(ZP[1,1-LP]-ZP[0,1-LP])>=ABS(ZP[1,LP]-ZP[0,LP]) GOTOF _MMB3
ZP[0,2]=1
_MMB3:IF ABS(AEP[1,1-LP]-ZP[1,1-LP])>=ABS(AEP[1,LP]-IA*SAB-ZP[1,LP]) GOTOF _MC3
ZP[1,2]=1
N705 _MC3:
ZP[0,3]=1 ZP[1,3]=1
IF ((ZP[3,LP]-ZP[1,LP])*IA==0) AND ((ZP[1,LP]-ZP[0,LP])*IA==0) AND ((ZP[0,LP]-ZP[2,LP])*IA==0)
ZP[0,3]=0 ZP[1,3]=0
GOTOF _MG3
ENDIF
IF (ZP[0,1-LP]-ZP[3,1-LP])==0
HH1=0
ELSE
HH1=IA*((ZP[0,LP]-ZP[3,LP])/(ZP[0,1-LP]-ZP[3,1-LP]))
ENDIF
IF (ZP[1,1-LP]-ZP[3,1-LP])==0
HH2=0
ELSE
HH2=IA*((ZP[1,LP]-ZP[3,LP])/(ZP[1,1-LP]-ZP[3,1-LP]))
ENDIF
IF (ZP[0,1-LP]-ZP[1,1-LP])==0
HH3=0
ELSE
HH3=IA*((ZP[0,LP]-ZP[1,LP])/(ZP[0,1-LP]-ZP[1,1-LP]))
ENDIF
IF ((HH1>=0) AND (HH3>=0) AND (HH3<HH1)) OR ((HH1<=0) AND (HH2<=0) AND (HH1>HH2))
ZP[1,3]=0
GOTOF _MG3
ENDIF
IF (ZP[2,1-LP]-ZP[1,1-LP])==0
HH1=0
ELSE
HH1=IA*((ZP[2,LP]-ZP[1,LP])/(ZP[2,1-LP]-ZP[1,1-LP]))
ENDIF
IF (ZP[0,1-LP]-ZP[1,1-LP])==0
HH2=0
ELSE
HH2=IA*((ZP[0,LP]-ZP[1,LP])/(ZP[0,1-LP]-ZP[1,1-LP]))
ENDIF
IF (ZP[2,1-LP]-ZP[0,1-LP])==0
HH3=0
ELSE
HH3=IA*((ZP[2,LP]-ZP[0,LP])/(ZP[2,1-LP]-ZP[0,1-LP]))
ENDIF
IF ((HH1>=0) AND (HH3>=0) AND (HH3<HH1)) OR ((HH1<=0) AND (HH2<=0) AND (HH1>HH2))
ZP[0,3]=0
ENDIF
_MG3:IF NRC<>0 GOTOF _MH3
_NRCI=1
N706 _MH3:_ZANF=SPS _HC1=ABS((TDEP-FAL)/SQRT(_NRCI)*TW2) II=NRC JJ=-RF
IF IANG>=0 GOTOF _MA4 IF VARI<3 GOTOF _MA4
N711 _MB3:HH1=(SQRT(II)-SQRT(II-1))*_HC1 II=II-1 _ZANF=_ZANF+JJ*HH1 JJ=-JJ
IF II>1 GOTOB _MB3
_MA4:
_M5304:_ANGPLUS=0
IF(LP==1)
IF(IA==1)
_ALF=3
ELSE
_ALF=7
ENDIF
ELSE
IF(IA==1)
_ALF=1
ELSE
_ALF=5
ENDIF
ENDIF
IF($P_GG[29]==1)
_DIA=1
ELSE
_DIA=2
ENDIF
_KEGV=0
IF(_G76==0)
IF(_ISO==1)
_KEGV=_ZFPR[29]*_DIA*(-1)
ENDIF
ENDIF
II=0
N707 _MMB4:HH1=ABS(TDEP-FAL)/_NRCI _IPAX=_SA
IF VARI<3 GOTOF _MC4
N708 HH1=HH1*_NRCI/SQRT(_NRCI)
IF (NRC MOD 2)==0 GOTOF _MC4 IF IANG>=0 GOTOF _MC4
ZF=-1
N709 _MC4:SPV=NSP+360/NUMTH*II JJ=1 HH2=0
SBLOF
IF(_AKTLFON==1)
$AC_LIFTFAST=0
ENDIF
SBLON
N712 _MD4: _LIFTNR=0
_IPAX=_SA
IF(_AKTLFON==1)
SBLOF
IF NOT $AC_LIFTFAST
IF(LP==1)
MSG("$80010")
ELSE
MSG("$80011")
ENDIF
_MDG=1
ENDIF
SBLON
ENDIF
IF NRC==0 GOTOF _MJ4
IF(JJ<>1)
IF(_ZUKONST==0)
IF (VARI>2)
DEL=HH1*SQRT(JJ)
ELSE
DEL=HH1*JJ
ENDIF
IF((DEL-_LASTDEL)<=(_ZSFI[27]/_FMUL))
DEL=_LASTDEL+(_ZSFI[27]/_FMUL)
_ZUKONST=1
IF(DEL>=(TDEP-FAL))
DEL=(TDEP-FAL)
JJ=NRC
ENDIF
ENDIF
ELSE
DEL=_LASTDEL+(_ZSFI[27]/_FMUL)
_ZUKONST=1
IF(DEL>=(TDEP-FAL))
DEL=(TDEP-FAL)
JJ=NRC
ENDIF
ENDIF
ELSE
IF (VARI>2)
DEL=HH1*SQRT(JJ)
ELSE
DEL=HH1*JJ
ENDIF
ENDIF
_LASTDEL=DEL HH4=-IA*DEL
IF IANG==0 GOTOF _MF4 IF IANG<0 GOTOF _MP4
HH2=-RF*ZF*((TDEP-DEL)*TW2-_ZKOR)
GOTOF _MF4
_MP4:IF VARI<3 GOTOF _MQ4 IF JJ==1 GOTOF _MF4
N713 _ZANF=_ZANF+HH2 HH2=-RF*ZF*(SQRT(JJ)-SQRT(JJ-1))*_HC1
GOTOF _MF4
N710 _MQ4:HH2=-RF*((NRC-JJ) MOD 2)*TW2*ABS(TDEP-FAL)/NRC
_MF4:
IF(_ISO==0)
N40 G0 G90 AX[_SA]=(_ZANF+HH2)*_SAF AX[_ZA]=SPZ*_ZAF
ELSE
N401 G0 G90 AX[_SA]=(_ZANF+HH2)*_SAF AX[_ZA]=SPZ*_ZAF+_KEGV
ENDIF
IF(_AKTLFON==1)
IF($P_LIFTFAST==0)
GOTOF _XWEIT
ELSE
SBLOF
MSG("$80723")
_MDG=1
SBLON
M0
STOPRE
SBLOF
IF(LP==1)
MSG("$80010")
ELSE
MSG("$80011")
ENDIF
_MDG=1
SBLON
ENDIF
ENDIF
_XWEIT:
IF(_AKTLFON==1)
SBLOF
$AC_LIFTFAST=0
SBLON
ENDIF
IF IANG>0 GOTOF _MG4
ZF=-ZF
_MG4:
IF(_ISO==0)
N42 G91 AX[_ZA]=(HH4-IA*SAB)*_ZAF
ELSE
N421 G91 AX[_ZA]=(HH4-IA*SAB)*_ZAF-_KEGV-(_DESPZ*_DIA)
ENDIF
IF _NULLWEG[0]
_LIFTNR=1
IF ((_NULLWEG[2]==1)AND(_ISO==1))
HH5=HH2
ELSE
HH5=0
ENDIF
IF(_AKTLFON==0)
N43 G33 G90 AX[_SA]=(ZP[0,1-LP]+HH5)*_SAF AX[_ZA]=(ZP[0,LP]+HH4)*_ZAF IP[_SA]=PP1 SF=SPV+_ANGPLUS
ELSE
N43 G33 G90 AX[_SA]=(ZP[0,1-LP]+HH5)*_SAF AX[_ZA]=(ZP[0,LP]+HH4)*_ZAF IP[_SA]=PP1 SF=SPV+_ANGPLUS LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
N430 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5311
ENDIF
ENDIF
ENDIF
IF NOT(ZP[0,2]==0)
_IPAX=_ZA
ENDIF
IF _NULLWEG[1]
_LIFTNR=2
IF _NULLWEG[0]==1
IF(_AKTLFON==0)
N44 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH4)*_ZAF IP[_IPAX]=PP2
ELSE
N44 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH4)*_ZAF IP[_IPAX]=PP2 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
N440 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5311
ENDIF
ENDIF
ELSE
IF(_AKTLFON==0)
N44 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH4)*_ZAF IP[_IPAX]=PP2 SF=SPV
ELSE
N44 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH4)*_ZAF IP[_IPAX]=PP2 SF=SPV LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
N440 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5311
ENDIF
ENDIF
ENDIF
ENDIF
_IPAX=_SA
IF NOT(ZP[1,2]==0)
_IPAX=_ZA
ENDIF
IF _NULLWEG[2]
_LIFTNR=3
IF(_AKTLFON==0)
IF(_ISO==1)
IF(IA>0)
IF(((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)>=((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N451 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ELSE
N452 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ENDIF
ELSE
N453 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4+ABS(HH2))*_ZAF IP[_IPAX]=PP3
ENDIF
ELSE
IF(((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)<((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N454 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((SPZ*_ZAF+_KEGV)-((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ELSE
N455 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((SPZ*_ZAF+_KEGV)-((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ENDIF
ELSE
N456 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4-ABS(HH2))*_ZAF IP[_IPAX]=PP3
ENDIF
ENDIF
ELSE
N45 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4)*_ZAF IP[_IPAX]=PP3
ENDIF
N450 G0
ELSE
IF(_ISO==1)
IF(IA>0)
IF(((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)>=((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N451 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ELSE
N452 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((RZP-IA*SAB+HH4+ABS(HH2))*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ENDIF
ELSE
N453 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4+ABS(HH2))*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ENDIF
ELSE
IF(((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)<((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N454 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((SPZ*_ZAF+_KEGV)-((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ELSE
N455 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((SPZ*_ZAF+_KEGV)-((RZP-IA*SAB+HH4-ABS(HH2))*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ENDIF
ELSE
N456 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4-ABS(HH2))*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ENDIF
ENDIF
ELSE
N45 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=(RZP-IA*SAB+HH4)*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(HH4-IA*SAB) LFWP ALF=_ALF
ENDIF
N450 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5311
ENDIF
ENDIF
ENDIF
_M5311: G0 G64
IF (_AKTLFON==0)
IF(_ISO==0)
N46 G64 G90 AX[_ZA]=RZP*_ZAF
IF ZP[1,3]==1
N47 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N48 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
ELSE
N461 G0 G64 G90 AX[_ZA]=(SPZ*_ZAF)+_KEGV ;ISO
ENDIF
JJ=JJ+1
ELSE
IF ($P_LIFTFAST==0)
IF(_ISO==0)
N46 G64 G90 AX[_ZA]=RZP*_ZAF
ELSE
N461 G0 G64 G90 AX[_ZA]=(SPZ*_ZAF)+_KEGV ;ISO
ENDIF
GOTOF _M531A
ELSE
IF(_ISO==0)
IF _LIFTNR==1
GOTOB _MD4
ENDIF
IF _LIFTNR==2
IF ZP[0,3]==1
N460 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _MD4
ELSE
IF ZP[1,3]==1
N461 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N462 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _MD4
ENDIF
ELSE
N461 G0 G64 G90 AX[_ZA]=(SPZ*_ZAF)+_KEGV ;ISO
GOTOB _MD4
ENDIF
ENDIF
ENDIF
_M531A:
IF (_AKTLFON==1)
STOPRE
IF ($AC_LIFTFAST==0)
IF(_ISO==0)
N46 G64 G90 AX[_ZA]=RZP*_ZAF
IF ZP[1,3]==1
N47 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N48 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
ELSE
N461 G0 G64 G90 AX[_ZA]=(SPZ*_ZAF)+_KEGV ;ISO
ENDIF
JJ=JJ+1
ELSE
IF(_ISO==0)
IF _LIFTNR==1
GOTOB _MD4
ENDIF
IF _LIFTNR==2
IF ZP[0,3]==1
N460 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _MD4
ELSE
IF ZP[1,3]==1
N461 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N462 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _MD4
ENDIF
ELSE
N461 G0 G64 G90 AX[_ZA]=(SPZ*_ZAF)+_KEGV ;ISO
GOTOB _MD4
ENDIF
ENDIF
ENDIF
IF JJ<=NRC GOTOB _MD4 IF (NID==0)AND(FAL==0) GOTOF _MX4
IF (NID==0)AND(_ISO==1) GOTOF _MX4
_MJ4:JJ=0 HH2=-IA*TDEP HH4=EPX-IA*(SAB+TDEP) _IPAX=_SA
_M5310:
IF LP>0 GOTOF _MM4
HH4=RZP-IA*(SAB+TDEP)
_MM4:
IF(_ISO==0)
N50 G0 G90 AX[_SA]=SPS*_SAF AX[_ZA]=SPZ*_ZAF
ELSE
N501 G0 G90 AX[_SA]=SPS*_SAF AX[_ZA]=SPZ*_ZAF+_KEGV
ENDIF
IF(_AKTLFON==1)
IF($P_LIFTFAST==0)
GOTOF _XWEITS
ELSE
SBLOF
MSG("$80723")
_MDG=1
SBLON
M0
STOPRE
SBLOF
IF(LP==1)
MSG("$80010")
ELSE
MSG("$80011")
ENDIF
_MDG=1
SBLON
ENDIF
ENDIF
_XWEITS:
IF(_AKTLFON==1)
SBLOF
$AC_LIFTFAST=0
SBLON
ENDIF
_MG4:
IF(_ISO==0)
N51 G91 AX[_ZA]=(-IA*(SAB+TDEP))*_ZAF
ELSE
N511 G91 AX[_ZA]=(-IA*(SAB+TDEP))*_ZAF-_KEGV-(_DESPZ*_DIA)
ENDIF
IF _NULLWEG[0]
_LIFTNR=1
IF(_AKTLFON==0)
N52 G33 G90 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+HH2)*_ZAF IP[_SA]=PP1 SF=SPV+_ANGPLUS
ELSE
N52 G33 G90 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+HH2)*_ZAF IP[_SA]=PP1 SF=SPV+_ANGPLUS LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
N520 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5312
ENDIF
ENDIF
ENDIF
IF NOT(ZP[0,2]==0)
_IPAX=_ZA
ENDIF
IF _NULLWEG[1]
_LIFTNR=2
IF _NULLWEG[0]
IF(_AKTLFON==0)
N53 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH2)*_ZAF IP[_IPAX]=PP2
ELSE
N53 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH2)*_ZAF IP[_IPAX]=PP2 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
N530 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5312
ENDIF
ENDIF
ELSE
IF(_AKTLFON==0)
N53 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH2)*_ZAF IP[_IPAX]=PP2 SF=SPV
ELSE
N53 G33 G90 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+HH2)*_ZAF IP[_IPAX]=PP2 SF=SPV LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
N530 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5312
ENDIF
ENDIF
ENDIF
ENDIF
_IPAX=_SA
IF NOT(ZP[1,2]==0)
_IPAX=_ZA
ENDIF
IF _NULLWEG[2]
_LIFTNR=3
IF(_AKTLFON==0)
IF(_ISO==1)
IF(IA>0)
IF(((HH4)*_ZAF)>=((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N541 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((HH4)*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ELSE
N542 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((HH4)*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ENDIF
ELSE
N543 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3
ENDIF
ELSE
IF(((HH4)*_ZAF)<((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N544 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((SPZ*_ZAF+_KEGV)-((HH4)*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ELSE
N545 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((SPZ*_ZAF+_KEGV)-((HH4)*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3
ENDIF
ELSE
N546 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3
ENDIF
ENDIF
ELSE
N54 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3
ENDIF
N540 G0
ELSE
IF(_ISO==1)
IF(IA>0)
IF((HH4*_ZAF)>=((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N541 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-(((HH4*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ELSE
N542 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+(((HH4*_ZAF)-(SPZ*_ZAF+_KEGV))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ENDIF
ELSE
N543 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ENDIF
ELSE
IF((HH4*_ZAF)<((SPZ*_ZAF)+_KEGV))
IF((AEP[1,1-LP]*_SAF)>(SPS*_SAF))
N544 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)-((((SPZ*_ZAF+_KEGV)-(HH4*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ELSE
N545 G33 G90 AX[_SA]=(AEP[1,1-LP]*_SAF)+((((SPZ*_ZAF+_KEGV)-(HH4*_ZAF)))/_DIA) AX[_ZA]=SPZ*_ZAF+_KEGV IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ENDIF
ELSE
N546 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ENDIF
ENDIF
ELSE
N54 G33 G90 AX[_SA]=AEP[1,1-LP]*_SAF AX[_ZA]=HH4*_ZAF IP[_IPAX]=PP3 LFON DILF=ABS(SAB+TDEP) LFWP ALF=_ALF
ENDIF
N540 LFOF G33
IF $P_LIFTFAST
MSG("$80653")
STOPRE
GOTOF _M5312
ENDIF
ENDIF
ENDIF
_M5312: G0 G64
IF (_AKTLFON==0)
IF(_ISO==0)
N55 G64 G90 AX[_ZA]=RZP*_ZAF
IF ZP[1,3]==1
N56 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N57 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
ELSE
N551 G0 AX[_ZA]=(SPZ*_ZAF)+_KEGV
ENDIF
JJ=JJ+1
ELSE
IF ($P_LIFTFAST==0)
IF(_ISO==0)
N55 G64 G90 AX[_ZA]=RZP*_ZAF
ELSE
N551 G0 AX[_ZA]=(SPZ*_ZAF)+_KEGV
ENDIF
GOTOF _M531B
ELSE
IF(_ISO==0)
IF _LIFTNR==1
GOTOB _M5310
ENDIF
IF _LIFTNR==2
IF ZP[0,3]==1
N550 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _M5310
ELSE
IF ZP[1,3]==1
N551 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N552 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _M5310
ENDIF
ELSE
N551 G0 AX[_ZA]=(SPZ*_ZAF)+_KEGV
GOTOB _M5310
ENDIF
ENDIF
ENDIF
_M531B:
IF (_AKTLFON==1)
STOPRE
IF ($AC_LIFTFAST==0)
IF(_ISO==0)
N55 G64 G90 AX[_ZA]=RZP*_ZAF
IF ZP[1,3]==1
N56 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N57 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
ELSE
N551 G0 AX[_ZA]=(SPZ*_ZAF)+_KEGV
ENDIF
JJ=JJ+1
ELSE
IF(_ISO==0)
IF _LIFTNR==1
GOTOB _M5310
ENDIF
IF _LIFTNR==2
IF ZP[0,3]==1
N550 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _M5310
ELSE
IF ZP[1,3]==1
N551 AX[_SA]=ZP[1,1-LP]*_SAF AX[_ZA]=(ZP[1,LP]+IA*SAB)*_ZAF
ENDIF
IF ZP[0,3]==1
N552 AX[_SA]=ZP[0,1-LP]*_SAF AX[_ZA]=(ZP[0,LP]+IA*SAB)*_ZAF
ENDIF
GOTOB _M5310
ENDIF
ELSE
N551 G0 AX[_ZA]=(SPZ*_ZAF)+_KEGV
GOTOB _M5310
ENDIF
ENDIF
ENDIF
IF (JJ==NID)AND(_ISO==1) GOTOF _MX4
IF ((JJ<=NID) AND (FAL<>0)) GOTOB _MM4
IF ((JJ<NID) AND (FAL==0)) GOTOB _MM4
_MX4:II=II+1
IF (II<NUMTH)AND(NRC==0) GOTOB _MC4 IF II<NUMTH GOTOB _MMB4
IF(_ISO==0)
N60 G0 G90 AX[_SA]=SPS*_SAF AX[_ZA]=SPZ*_ZAF
ELSE
N601 G0 G90 AX[_SA]=SPS*_SAF AX[_ZA]=SPZ*_ZAF+_KEGV
ENDIF
SBLOF
IF(_MDG==1)
MSG("")
ENDIF
RET
FEHL1: STOPRE
N339801 SETAL(61002)
RET
_FEHL3: STOPRE
N339803 SETAL(61612)
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE3106_SPF
PROC CYCLE3106
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 02.05.01.00 Sep 27, 2007
;ISO rapid lift (G10.6)
;
;
; to do:
; If the axes and spindle are to be stopped following fast retraction,
; M0 and M5 must be programmed accordingly.
; Otherwise the part program will continue uninterrupted following fast retraction.
;
;
M17

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE3512_SPF
PROC CYCLE3512 SAVE DISPLOF SBLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO-T polygonal turning (G50.2/G51.2)
DEF INT _FS,_LS
DEF REAL _UFS,_ULS,_PSFS
DEF BOOL _G51,_CDEF
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE3512_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE3512_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
IF ($P_EXTGG[20]==2)
_TEMP_LINE=_TEMP_LINE<<"G51.2 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G50.2 "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1)GOTOF _FEHL1
IF ($P_EXTGG[20]==2)
_G51=1
IF (($C_P_PROG>0) AND ($C_Q_PROG>0))
_CDEF=1 _ULS=$C_P _UFS=$C_Q
IF (_ULS<1)
GOTOF _FEHL9
ENDIF
ENDIF
IF (($C_P_PROG==0) AND ($C_Q_PROG==0))
_CDEF=0
ENDIF
IF (($C_P_PROG>0) AND ($C_Q_PROG==0)) OR (($C_P_PROG==0) AND ($C_Q_PROG>0))
GOTOF _FEHL9
ENDIF
IF ($C_R_PROG>0)
_PSFS=$C_R
ELSE
_PSFS=0
ENDIF
ELSE
_G51=0
ENDIF
CYCLE218(1)
_FS=2 _LS=$MC_SPIND_DEF_MASTER_SPIND
IF (_G51==1)
COUPOF(SPI(_FS),SPI(_LS))
SPCON(_LS,_FS)
IF (_CDEF==1)
COUPDEF(SPI(_FS),SPI(_LS),_UFS,_ULS)
ENDIF
COUPON(SPI(_FS),SPI(_LS),_PSFS)
ELSE
COUPOF(SPI(_FS),SPI(_LS))
SPCOF(_LS,_FS)
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N351201 SETAL(61800)
RET
_FEHL9: STOPRE
N351209 SETAL(61812)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE3721_SPF
PROC CYCLE3721 DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : V04.94.00.00.005 ;DATE: 2020-06-11
;ISO-M contour repeating (G72.1/G72.2)
DEF AXIS _AX1,_AX2
DEF INT _FCL,_FCP,_GC,_I,_PLAN,_ZFCL
DEF REAL _FCX,_FCY,_FCZ,_FCR,_FAK1,_SPTA1,_SPTA2,_TIA1,_TIA2,_ZFCR
DEF STRING[12] _UPS
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE3721_MPF"
DEF STRING[200] _TEMP_LINE=""
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE3721_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,"G290")
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"G[14]="<<$P_GG[14]<<"    ; G90/G91/...") ; Positionierung abs./ink.
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,";")
WRITE(_TEMP,_TEMP_FILE,"G291")
_TEMP_LINE=""
IF $C_G_PROG<>0
IF ($C_G==721)
_TEMP_LINE=_TEMP_LINE<<"G72.1 "
ELSE
_TEMP_LINE=_TEMP_LINE<<"G72.2 "
ENDIF
ENDIF
IF $C_A_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"A"<<$C_A<<" "
ENDIF
IF $C_B_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"B"<<$C_B<<" "
ENDIF
IF $C_C_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"C"<<$C_C<<" "
ENDIF
IF $C_X_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"X"<<$C_X<<" "
ENDIF
IF $C_U_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"U"<<$C_U<<" "
ENDIF
IF $C_Y_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Y"<<$C_Y<<" "
ENDIF
IF $C_V_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"V"<<$C_V<<" "
ENDIF
IF $C_Z_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Z"<<$C_Z<<" "
ENDIF
IF $C_W_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"W"<<$C_W<<" "
ENDIF
IF $C_P_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"P"<<$C_P<<" "
ENDIF
IF $C_Q_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"Q"<<$C_Q<<" "
ENDIF
IF $C_R_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"R"<<$C_R<<" "
ENDIF
IF $C_F_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"F"<<$C_F<<" "
ENDIF
IF $C_S_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"S"<<$C_S<<" "
ENDIF
IF $C_T_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"T"<<$C_T<<" "
ENDIF
IF $C_I_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"I"<<$C_I[0]<<" "
ENDIF
IF $C_J_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"J"<<$C_J[0]<<" "
ENDIF
IF $C_K_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"K"<<$C_K[0]<<" "
ENDIF
IF $C_L_PROG<>0
_TEMP_LINE=_TEMP_LINE<<"L"<<$C_L<<" "
ENDIF
WRITE(_TEMP,_TEMP_FILE,_TEMP_LINE)
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF($MN_MM_EXTERN_LANGUAGE<>1) GOTOF _FEHL1
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
IF ($C_G==721)
_GC=1
ELSE
_GC=2
ENDIF
_PLAN=$P_EXTGG[2]
_AX1=$P_AXN1 _AX2=$P_AXN2
_I=1
IF($C_L_PROG==0)
_FCL=1
ELSE
_FCL=$C_L
IF(_FCL==0)
GOTOF _RET
ELSE
IF(_FCL<0)
_FCL=1
ENDIF
ENDIF
ENDIF
IF($C_P_PROG==0)
GOTOF _FEHL5
ELSE
_FCP=$C_P
ENDIF
IF(_FCP<0) GOTOF _FEHL5
IF NOT ($MC_EXTERN_FUNCTION_MASK B_AND 'B1000000')
IF ($C_L_PROG==0)
_FCL=ABS(_FCP/10000)
IF(_FCL==0)
GOTOF _RET
ENDIF
_FCP=(_FCP MOD 10000)
ENDIF
IF (STRLEN(<<_FCP)>4) GOTOF _FEHL5
CASE STRLEN(<<_FCP) OF 1 GOTOF _M1 2 GOTOF _M2 3 GOTOF _M3 DEFAULT GOTOF _M4
_M1:_UPS="000"<<_FCP
GOTOF _M5
_M2:_UPS="00"<<_FCP
GOTOF _M5
_M3:_UPS="0"<<_FCP
GOTOF _M5
_M4:_UPS=""<<_FCP
_M5:
ELSE
IF(STRLEN(<<_FCP)>8) GOTOF _FEHL5
_UPS=<<_FCP
ENDIF
IF (_GC==1)
IF ($C_R_PROG<>1)
_FCR=0
ELSE
_FCR=$C_R
ENDIF
CASE _PLAN OF 3 GOTOF _MG19R 2 GOTOF _MG18R DEFAULT GOTOF _MG17R
_MG19R:
IF ($C_Y_PROG==0)
_FCY=0
ELSE
IF ($C_Y_PROG==1)
_FZY=$C_Y
ELSE
_FCY=$P_EP[_AX1]*_FAK1+$C_Y
ENDIF
ENDIF
IF ($C_Z_PROG==0)
_FCZ=0
ELSE
IF ($C_Z_PROG==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_AX2]*_FAK1+$C_Z
ENDIF
ENDIF
_FCX=0 _SPTA1=_FCY _SPTA2=_FCZ
GOTOF _MWBRE
_MG18R:
IF ($C_Z_PROG==0)
_FCZ=0
ELSE
IF ($C_Z_PROG==1)
_FCZ=$C_Z
ELSE
_FCZ=$P_EP[_AX1]*_FAK1+$C_Z
ENDIF
ENDIF
IF ($C_X_PROG==0)
_FCX=0
ELSE
IF ($C_X_PROG==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_AX2]*_FAK1+$C_X
ENDIF
ENDIF
_FCY=0 _SPTA1=_FCZ _SPTA2=_FCX
GOTOF _MWBRE
_MG17R:
IF ($C_X_PROG==0)
_FCX=0
ELSE
IF ($C_X_PROG==1)
_FCX=$C_X
ELSE
_FCX=$P_EP[_AX1]*_FAK1+$C_X
ENDIF
ENDIF
IF ($C_Y_PROG==0)
_FCY=0
ELSE
IF ($C_Y_PROG==1)
_FCY=$C_Y
ELSE
_FCY=$P_EP[_AX2]*_FAK1+$C_Y
ENDIF
ENDIF
_FCZ=0 _SPTA1=_FCX _SPTA2=_FCY
_MWBRE:
ELSE
CASE _PLAN OF 3 GOTOF _MG19V 2 GOTOF _MG18V DEFAULT GOTOF _MG17V
_MG19V:
IF ($C_J_PROG<>0)
_FCY=$C_J[0]
ELSE
_FCY=0
ENDIF
IF ($C_K_PROG<>0)
_FCZ=$C_K[0]
ELSE
_FCZ=0
ENDIF
_FCX=0 _TIA1=_FCY _TIA2=_FCZ
GOTOF _MWBVE
_MG18V:
IF ($C_K_PROG<>0)
_FCZ=$C_K[0]
ELSE
_FCZ=0
ENDIF
IF ($C_I_PROG<>0)
_FCX=$C_I[0]
ELSE
_FCX=0
ENDIF
_FCY=0 _TIA1=_FCZ _TIA2=_FCX
GOTOF _MWBVE
_MG17V:
IF ($C_I_PROG<>0)
_FCX=$C_I[0]
ELSE
_FCX=0
ENDIF
IF ($C_J_PROG<>0)
_FCY=$C_J[0]
ELSE
_FCY=0
ENDIF
_FCZ=0 _TIA1=_FCX _TIA2=_FCY
_MWBVE:
ENDIF
CYCLE218(1)
IF (_GC==1)
ATRANS AX[_AX1]=_SPTA1 AX[_AX2]=_SPTA2
FOR _I=1 TO _FCL
_ZFCL=_FCL
ISOCALL _UPS
AROT RPL=_FCR
ENDFOR
_ZFCR=(_FCR*_ZFCL)
AROT RPL=-_ZFCR
ATRANS AX[_AX1]=-_SPTA1 AX[_AX2]=-_SPTA2
ELSE
FOR _I=1 TO _FCL
ISOCALL _UPS
ATRANS AX[_AX1]=_TIA1 AX[_AX2]=_TIA2
ENDFOR
_TIA1=_FCL*_TIA1 _TIA2=_FCL*_TIA2
ATRANS AX[_AX1]=-_TIA1 AX[_AX2]=-_TIA2
ENDIF
GOTOF _RET
_FEHL1: STOPRE
N372101 SETAL(61800)
RET
_FEHL2: STOPRE
N372102 SETAL(61003)
RET
_FEHL3: STOPRE
N372103 SETAL(61102)
RET
_FEHL4: STOPRE
N372104 SETAL(61808)
RET
_FEHL5: STOPRE
N372105 SETAL(61812)
RET
_RET:
RET

;$ACCESS=70771
;$PATH=/_N_CST_DIR/_N_CYCLE3841_SPF
PROC CYCLE3841(REAL RTP,REAL RFP,REAL SDIS,REAL DP,REAL DPR,REAL DTB,INT SDAC,REAL MPIT,REAL PIT,REAL POSS,REAL SST,REAL SST1,INT _AXN,INT _VARI,REAL _DAM,REAL _VRT) SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 06.24.00.00 ;DATE: 2024-07-15
;CHANGE : 06.20.00.00.011 ;DATE: 2022-04-13
;ISO-M rigid tapping
DEF AXIS _Z
DEF INT HH7
DEF REAL PP,HH1,HH2,HH3,HH4,HH5,_HH9,VHA,HZ,HMF,FAK,_FAK1
DEF INT _TEMP
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE3841_MPF"
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE3841_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,";Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<"  Time: "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T="<<$TC_TP2[$P_TOOLNO]<<" D"<<$P_TOOL<<" T"<<$P_TOOLNO<<"   ; active TOOL")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$TC_DP1[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-TYPE") ; Werkzeugtyp
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$TC_DP2[$P_TOOLNO,$P_TOOL]<<"     ; EDGE-POSITION") ; Schneidenlage
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$TC_DP6[$P_TOOLNO,$P_TOOL]<<"   ; TOOL-RADIUS") ; Werkzeugradius
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
WRITE(_TEMP,_TEMP_FILE,";D1")
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19") ; aktive Ebene
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...") ; Inch/Metrisch
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...") ; DIAMON/DIAMOF/DIAM90
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...") ; Vorschubart
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F) ; Vorschub
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$AC_MSNUM]) ; Drehzahl und Drehrichtung
WRITE(_TEMP,_TEMP_FILE,"CYCLE3841("<<RTP<<","<<RFP<<","<<SDIS<<","<<DP<<","<<DPR<<","<<DTB<<","<<SDAC<<","<<MPIT<<","<<PIT<<","<<POSS<<","<<SST<<","<<SST1<<","<<_AXN<<","<<_VARI<<","<<_DAM<<","<<_VRT<<")")
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
IF HH7>0 GOTOF _MA3
CASE _AXN OF 1 GOTOF _AX1 2 GOTOF _AX2 DEFAULT GOTOF _AX3
_AX1:_Z=$P_AXN1
GOTOF _AX
_AX2:_Z=$P_AXN2
GOTOF _AX
_AX3:_Z=$P_AXN3
_AX:
DPR=ABS(DPR) SDIS=ABS(SDIS) PP=PIT HH3=$P_S[0] HH4=$P_F
_DAM=ABS(_DAM) _VRT=ABS(_VRT)
IF DPR==0 GOTOF _MD1 IF RTP==RFP GOTOF _FEHL1
HH2=RFP-((RTP-RFP)/ABS(RTP-RFP)*DPR)
IF DP==0 GOTOF _MB1 IF DP==HH2 GOTOF _MD1
_MB1:DP=HH2
_MD1:HH7=1 HH2=RTP-RFP
IF(_DAM==0)
_DAM=ABS(DP)
ENDIF
IF RFP==DP GOTOF _MX3 IF HH2==0 GOTOF _MA2 IF HH2/ABS(HH2)<>(RFP-DP)/ABS(RFP-DP) GOTOF _FEHL1
HH1=SDIS*(RFP-DP)/ABS(RFP-DP)
_MA2:IF (PIT==0)AND(MPIT==0) GOTOF _FEHL2 IF MPIT==0 GOTOF _MC2 IF (ABS(MPIT)<3)OR(ABS(MPIT)>48) GOTOF _FEHL2
N2 STEIGUNG(PP,ABS(MPIT))
PP=PP*MPIT/ABS(MPIT)
IF (PP<>PIT)AND(PIT<>0) GOTOF _FEHL2
_MC2:IF (SDAC<6)AND(SDAC>2) GOTOF _MD2
SDAC=5
_MD2:IF SST1>0 GOTOF _MA3A
SST1=SST
_MA3A:
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
_MA3:
HH2=RFP+HH1
IF(HH2<>$P_EP[_Z]*_FAK1)
SBLON
N20 G0 G9 G90 AX[_Z]=HH2
SBLOF
ENDIF
IF $P_SMODE[$P_MSNUM]<>2
N29 S=SST
ENDIF
N30 SPOS=DC(POSS)
N31 BRISK
IF(_VARI==0)
IF(NOT $P_ISTEST)
N32 G90 G331 AX[_Z]=DP IP[_Z]=PP S=SST
IF ABS(DTB)>0.0001
N33 G4 F=DTB
ENDIF
N34 G332 AX[_Z]=RFP+HH1 IP[_Z]=PP S=SST1
ELSE
N42 G90 G0 AX[_Z]=DP S=SST
IF ABS(DTB)>0.0001
N43 G4 F=DTB
ENDIF
N44 G0 AX[_Z]=RFP+HH1 S=SST1
ENDIF
ELSE
HZ=1
HH1=1 ;Bohrrichtung
FAK=1
_HH9=_DAM
HH2=RFP-_DAM
IF(HH2<DP) GOTOF _FEHL3
HMF=$P_ACTFRAME[_Z,SC]
IF($P_GG[13]==1)OR($P_GG[13]==3)
FAK=$MN_SCALING_VALUE_INCH
ENDIF
IF(_VRT<=0)
_VRT=HZ/FAK
ENDIF
_MA5A: G90 G331 AX[_Z]=HH2 IP[_Z]=PP S=SST
IF(HH2==DP)GOTOF _MA8
_MMD:
IF(ABS(HH2-DP)-_HH9>=_DAM)
IF(ABS(HH2-DP)>2*_DAM)
HH5=HH2-_HH9*HH1
ELSE
IF(ABS(HH2-DP)>_DAM)
HH5=HH2-ABS(HH2-DP)/2*HH1
ELSE
HH5=DP
ENDIF
ENDIF
ELSE
IF(ABS(HH2-DP)>_HH9)
IF(ABS(HH2-DP)>2*_DAM)
HH5=DP+_DAM*HH1
ELSE
HH5=HH2-ABS(HH2-DP)/2*HH1
ENDIF
ELSE
HH5=DP
ENDIF
ENDIF
_MA6:
IF(_VARI==2)
N280 G90 G332 AX[_Z]=RFP+SDIS*HH1 IP[_Z]=PP S=SST1
VHA=_VRT
VHA=VHA/FAK/HMF
N330 G90 G331 AX[_Z]=HH2+VHA*HH1 IP[_Z]=PP S=SST1
ELSE
N365 G91 G332 AX[_Z]=HH1*(_VRT/HMF) IP[_Z]=PP S=SST1
ENDIF
HH2=HH5
GOTOB _MA5A
_MA8:
IF ABS(DTB)>0.0001
G4 F=DTB
ENDIF
N380 G90 G332 AX[_Z]=RFP+SDIS*HH1 IP[_Z]=PP S=SST1
ENDIF
N35 SOFT
SBLON
IF ($SCS_ISO_M_TAPPING_SET_MC==1)
N36 G0 G64 AX[_Z]=RTP S=HH3
ELSE
N36 G0 G64 AX[_Z]=RTP S=HH3 M=SDAC
ENDIF
SBLOF
N37 MM2:
IF HH4==0 GOTOF _MX3
N38 F=HH4
N39 _MX3:
RET
_FEHL1: STOPRE
N384101 SETAL(61101)
RET
_FEHL2: STOPRE
N384102 SETAL(61001)
RET
_FEHL3: STOPRE
N384103 SETAL(61809)
RET

